// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ReadyzDatabase - Database connection
type ReadyzDatabase struct {
	// Connection status
	Status *bool `json:"status,omitempty"`
}

type ReadyzEngines struct {
	// Engine ID
	EngineID *string `json:"engine_id,omitempty"`
	// This engine is mandatorily active
	Required *bool `json:"required,omitempty"`
	// Status
	Status *bool `json:"status,omitempty"`
}

// ReadyzLicenseStatus - License status
type ReadyzLicenseStatus string

const (
	ReadyzLicenseStatusExpired ReadyzLicenseStatus = "expired"
	ReadyzLicenseStatusInvalid ReadyzLicenseStatus = "invalid"
	ReadyzLicenseStatusOk      ReadyzLicenseStatus = "ok"
)

func (e ReadyzLicenseStatus) ToPointer() *ReadyzLicenseStatus {
	return &e
}

func (e *ReadyzLicenseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "expired":
		fallthrough
	case "invalid":
		fallthrough
	case "ok":
		*e = ReadyzLicenseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReadyzLicenseStatus: %v", v)
	}
}

// ReadyzLicense - License status
type ReadyzLicense struct {
	// License status
	Status *ReadyzLicenseStatus `json:"status,omitempty"`
}

// ReadyzNumberActiveAvEngines - Number of active AV engines
type ReadyzNumberActiveAvEngines struct {
	// Status
	Status *bool `json:"status,omitempty"`
	// User-defined threshold
	Threshold *int64 `json:"threshold,omitempty"`
}

// ReadyzScanQueue - Scan queue status
type ReadyzScanQueue struct {
	// Maximum slots in scan queue
	MaxNumberInQueue *int64 `json:"max_number_in_queue,omitempty"`
	// Current queue status
	NumberInQueue *int64 `json:"number_in_queue,omitempty"`
	// status
	Status *bool `json:"status,omitempty"`
	// User-defined threshold
	Threshold *int64 `json:"threshold,omitempty"`
}

type Readyz struct {
	// Database connection
	Database *ReadyzDatabase `json:"database,omitempty"`
	// All available engines according to the activated license
	Engines []ReadyzEngines `json:"engines,omitempty"`
	// License status
	License *ReadyzLicense `json:"license,omitempty"`
	// Number of active AV engines
	NumberActiveAvEngines *ReadyzNumberActiveAvEngines `json:"number_active_av_engines,omitempty"`
	// Scan queue status
	ScanQueue *ReadyzScanQueue `json:"scan_queue,omitempty"`
}
