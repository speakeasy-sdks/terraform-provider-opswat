// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// NewUserRoleResponseRights - A list of rights for each permission
type NewUserRoleResponseRights struct {
	// What permissions are allowed for Node.
	Agents []RolePermissionObject `json:"agents,omitempty"`
	// What permissions are allowed for Certificates.
	Cert []RolePermissionObject `json:"cert,omitempty"`
	// What permissions are allowed for Configuration logs.
	Configlog []RolePermissionObject `json:"configlog,omitempty"`
	// What permissions are allowed for Engines and Modules.
	Engines []RolePermissionObject `json:"engines,omitempty"`
	// What permissions are allowed for External actions (External Scanner/Post Actions).
	External []RolePermissionObject `json:"external,omitempty"`
	// What permissions are allowed for managing the License.
	License []RolePermissionObject `json:"license,omitempty"`
	// What permissions are allowed for managing the Quarantine.
	Quarantine []RolePermissionObject `json:"quarantine,omitempty"`
	// What permissions are allowed for managing the retention policies.
	Retention []RolePermissionObject `json:"retention,omitempty"`
	// What permissions are allowed for managing the workflow rules.
	Rule []RolePermissionObject `json:"rule,omitempty"`
	// What permissions are allowed for managing analysis actions.
	Scan []RolePermissionObject `json:"scan,omitempty"`
	// What permissions are allowed for managing the analysis logs.
	Scanlog []RolePermissionObject `json:"scanlog,omitempty"`
	// What permissions are allowed for managing the Whitelist/blacklist defined in the Inventory.
	Skip []RolePermissionObject `json:"skip,omitempty"`
	// What permissions are allowed for managing the update configuration.
	Update []RolePermissionObject `json:"update,omitempty"`
	// What permissions are allowed for managing the update logs.
	Updatelog []RolePermissionObject `json:"updatelog,omitempty"`
	// What permissions are allowed for managing the users.
	Users []RolePermissionObject `json:"users,omitempty"`
	// What permissions are allowed for managing the workflow templates.
	Workflow []RolePermissionObject `json:"workflow,omitempty"`
	// What permissions are allowed for managing the network zones.
	Zone []RolePermissionObject `json:"zone,omitempty"`
}

func (o *NewUserRoleResponseRights) GetAgents() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.Agents
}

func (o *NewUserRoleResponseRights) GetCert() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.Cert
}

func (o *NewUserRoleResponseRights) GetConfiglog() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.Configlog
}

func (o *NewUserRoleResponseRights) GetEngines() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.Engines
}

func (o *NewUserRoleResponseRights) GetExternal() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.External
}

func (o *NewUserRoleResponseRights) GetLicense() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.License
}

func (o *NewUserRoleResponseRights) GetQuarantine() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.Quarantine
}

func (o *NewUserRoleResponseRights) GetRetention() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.Retention
}

func (o *NewUserRoleResponseRights) GetRule() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.Rule
}

func (o *NewUserRoleResponseRights) GetScan() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.Scan
}

func (o *NewUserRoleResponseRights) GetScanlog() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.Scanlog
}

func (o *NewUserRoleResponseRights) GetSkip() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.Skip
}

func (o *NewUserRoleResponseRights) GetUpdate() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.Update
}

func (o *NewUserRoleResponseRights) GetUpdatelog() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.Updatelog
}

func (o *NewUserRoleResponseRights) GetUsers() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *NewUserRoleResponseRights) GetWorkflow() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.Workflow
}

func (o *NewUserRoleResponseRights) GetZone() []RolePermissionObject {
	if o == nil {
		return nil
	}
	return o.Zone
}

// NewUserRoleResponse - MetaDefender user role describing object.
type NewUserRoleResponse struct {
	// The extended name showed in the Management Console.
	DisplayName *string `json:"display_name,omitempty"`
	// If the role can be altered or not.
	Editable bool `json:"editable"`
	// Internal used identifier
	ID int64 `json:"id"`
	// The name identifier of the role
	Name *string `json:"name,omitempty"`
	// A list of rights for each permission
	Rights *NewUserRoleResponseRights `json:"rights,omitempty"`
}

func (o *NewUserRoleResponse) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *NewUserRoleResponse) GetEditable() bool {
	if o == nil {
		return false
	}
	return o.Editable
}

func (o *NewUserRoleResponse) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *NewUserRoleResponse) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *NewUserRoleResponse) GetRights() *NewUserRoleResponseRights {
	if o == nil {
		return nil
	}
	return o.Rights
}
