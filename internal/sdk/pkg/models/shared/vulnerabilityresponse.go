// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Product data object
type Product struct {
	// The OPSWAT product id
	ID *int64 `json:"id,omitempty"`
	// The product name
	Name *string `json:"name,omitempty"`
}

func (o *Product) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Product) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

// VulnerabilityResponseSeverity - String description of Severity level:
//   - `LOW`
//   - `MODERATE`
//   - `IMPORTANT`
//   - `CRITICAL`
//   - `NOT_AVAILABLE`
//   - `UNKNOWN`
type VulnerabilityResponseSeverity string

const (
	VulnerabilityResponseSeverityLow          VulnerabilityResponseSeverity = "LOW"
	VulnerabilityResponseSeverityModerate     VulnerabilityResponseSeverity = "MODERATE"
	VulnerabilityResponseSeverityImportant    VulnerabilityResponseSeverity = "IMPORTANT"
	VulnerabilityResponseSeverityCritical     VulnerabilityResponseSeverity = "CRITICAL"
	VulnerabilityResponseSeverityNotAvailable VulnerabilityResponseSeverity = "NOT_AVAILABLE"
	VulnerabilityResponseSeverityUnknown      VulnerabilityResponseSeverity = "UNKNOWN"
)

func (e VulnerabilityResponseSeverity) ToPointer() *VulnerabilityResponseSeverity {
	return &e
}

func (e *VulnerabilityResponseSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LOW":
		fallthrough
	case "MODERATE":
		fallthrough
	case "IMPORTANT":
		fallthrough
	case "CRITICAL":
		fallthrough
	case "NOT_AVAILABLE":
		fallthrough
	case "UNKNOWN":
		*e = VulnerabilityResponseSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VulnerabilityResponseSeverity: %v", v)
	}
}

// Vendor data object
type Vendor struct {
	// The OPSWAT vendor id
	ID *int64 `json:"id,omitempty"`
	// The vendor name
	Name *string `json:"name,omitempty"`
}

func (o *Vendor) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Vendor) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

// VersionData - Object containing detailed patch information
type VersionData struct {
	// The number of patches behind of the installed product
	CountBehind *int64 `json:"count_behind,omitempty"`
	// The remote feed ID used to determine patch level
	FeedID *int64 `json:"feed_id,omitempty"`
	// The current version of the product in the remote feed
	Version *string `json:"version,omitempty"`
}

func (o *VersionData) GetCountBehind() *int64 {
	if o == nil {
		return nil
	}
	return o.CountBehind
}

func (o *VersionData) GetFeedID() *int64 {
	if o == nil {
		return nil
	}
	return o.FeedID
}

func (o *VersionData) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

// Cvss - A set of cvss severity information
type Cvss struct {
	// A CVSS access-complexity descriptor
	AccessComplexity *string `json:"access-complexity,omitempty"`
	// A CVSS access-vector descriptor
	AccessVector *string `json:"access-vector,omitempty"`
	// A CVSS authentication descriptor
	Authentication *string `json:"authentication,omitempty"`
	// A CVSS availability impact descriptor
	AvailabilityImpact *string `json:"availability-impact,omitempty"`
	// A CVSS confidentiality impact descriptor
	ConfidentialityImpact *string `json:"confidentiality-impact,omitempty"`
	// An epoch timestamp indicating CVSS generation time
	GeneratedOnEpoch *string `json:"generated-on-epoch,omitempty"`
	// A CVSS integrity impact descriptor
	IntegrityImpact *string `json:"integrity-impact,omitempty"`
	// A CVSS 10-point severity score
	Score *string `json:"score,omitempty"`
	// A CVSS source descriptor
	Source *string `json:"source,omitempty"`
}

func (o *Cvss) GetAccessComplexity() *string {
	if o == nil {
		return nil
	}
	return o.AccessComplexity
}

func (o *Cvss) GetAccessVector() *string {
	if o == nil {
		return nil
	}
	return o.AccessVector
}

func (o *Cvss) GetAuthentication() *string {
	if o == nil {
		return nil
	}
	return o.Authentication
}

func (o *Cvss) GetAvailabilityImpact() *string {
	if o == nil {
		return nil
	}
	return o.AvailabilityImpact
}

func (o *Cvss) GetConfidentialityImpact() *string {
	if o == nil {
		return nil
	}
	return o.ConfidentialityImpact
}

func (o *Cvss) GetGeneratedOnEpoch() *string {
	if o == nil {
		return nil
	}
	return o.GeneratedOnEpoch
}

func (o *Cvss) GetIntegrityImpact() *string {
	if o == nil {
		return nil
	}
	return o.IntegrityImpact
}

func (o *Cvss) GetScore() *string {
	if o == nil {
		return nil
	}
	return o.Score
}

func (o *Cvss) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

// VulnerabilityResponseDetails - A set of optional vulnerability details
type VulnerabilityResponseDetails struct {
	// A CPE product reference
	Cpe *string `json:"cpe,omitempty"`
	// A CVE identification string
	Cve *string `json:"cve,omitempty"`
	// A set of cvss severity information
	Cvss *Cvss `json:"cvss,omitempty"`
	// A CWE group identification string
	Cwe *string `json:"cwe,omitempty"`
	// An epoch timestamp indicating source last update time
	LastModifiedEpoch *string `json:"last_modified_epoch,omitempty"`
	// An epoch timestamp indicating source publishing time
	PublishedEpoch *string `json:"published-epoch,omitempty"`
	// An array of external reference links
	References []string `json:"references,omitempty"`
}

func (o *VulnerabilityResponseDetails) GetCpe() *string {
	if o == nil {
		return nil
	}
	return o.Cpe
}

func (o *VulnerabilityResponseDetails) GetCve() *string {
	if o == nil {
		return nil
	}
	return o.Cve
}

func (o *VulnerabilityResponseDetails) GetCvss() *Cvss {
	if o == nil {
		return nil
	}
	return o.Cvss
}

func (o *VulnerabilityResponseDetails) GetCwe() *string {
	if o == nil {
		return nil
	}
	return o.Cwe
}

func (o *VulnerabilityResponseDetails) GetLastModifiedEpoch() *string {
	if o == nil {
		return nil
	}
	return o.LastModifiedEpoch
}

func (o *VulnerabilityResponseDetails) GetPublishedEpoch() *string {
	if o == nil {
		return nil
	}
	return o.PublishedEpoch
}

func (o *VulnerabilityResponseDetails) GetReferences() []string {
	if o == nil {
		return nil
	}
	return o.References
}

// VulnerabilityResponseSchemasSeverity - String description of Severity level:
//   - `LOW`
//   - `MODERATE`
//   - `IMPORTANT`
//   - `CRITICAL`
//   - `NOT_AVAILABLE`
//   - `UNKNOWN`
type VulnerabilityResponseSchemasSeverity string

const (
	VulnerabilityResponseSchemasSeverityLow          VulnerabilityResponseSchemasSeverity = "LOW"
	VulnerabilityResponseSchemasSeverityModerate     VulnerabilityResponseSchemasSeverity = "MODERATE"
	VulnerabilityResponseSchemasSeverityImportant    VulnerabilityResponseSchemasSeverity = "IMPORTANT"
	VulnerabilityResponseSchemasSeverityCritical     VulnerabilityResponseSchemasSeverity = "CRITICAL"
	VulnerabilityResponseSchemasSeverityNotAvailable VulnerabilityResponseSchemasSeverity = "NOT_AVAILABLE"
	VulnerabilityResponseSchemasSeverityUnknown      VulnerabilityResponseSchemasSeverity = "UNKNOWN"
)

func (e VulnerabilityResponseSchemasSeverity) ToPointer() *VulnerabilityResponseSchemasSeverity {
	return &e
}

func (e *VulnerabilityResponseSchemasSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LOW":
		fallthrough
	case "MODERATE":
		fallthrough
	case "IMPORTANT":
		fallthrough
	case "CRITICAL":
		fallthrough
	case "NOT_AVAILABLE":
		fallthrough
	case "UNKNOWN":
		*e = VulnerabilityResponseSchemasSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VulnerabilityResponseSchemasSeverity: %v", v)
	}
}

type Vulnerabilites struct {
	// A text description of the specific vulnerability
	Description *string `json:"description,omitempty"`
	// A set of optional vulnerability details
	Details *VulnerabilityResponseDetails `json:"details,omitempty"`
	// String description of Severity level:
	//   * `LOW`
	//   * `MODERATE`
	//   * `IMPORTANT`
	//   * `CRITICAL`
	//   * `NOT_AVAILABLE`
	//   * `UNKNOWN`
	//
	Severity *VulnerabilityResponseSchemasSeverity `json:"severity,omitempty"`
	// A 5 point scale numerical description of Severity level with 5 being greatest and 0 being unknown
	SeverityIndex *int64 `json:"severity_index,omitempty"`
	// An OPSWAT identifier for the vulnerability
	StaticID *int64 `json:"static_id,omitempty"`
}

func (o *Vulnerabilites) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Vulnerabilites) GetDetails() *VulnerabilityResponseDetails {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *Vulnerabilites) GetSeverity() *VulnerabilityResponseSchemasSeverity {
	if o == nil {
		return nil
	}
	return o.Severity
}

func (o *Vulnerabilites) GetSeverityIndex() *int64 {
	if o == nil {
		return nil
	}
	return o.SeverityIndex
}

func (o *Vulnerabilites) GetStaticID() *int64 {
	if o == nil {
		return nil
	}
	return o.StaticID
}

// DetectedProduct - Detected products object is present if input hash has been found to correspond to verified product
type DetectedProduct struct {
	// Indicates whether any KBs or MSBs exist for this hash
	HasKb *bool `json:"has_kb,omitempty"`
	// Indicates whether any vulnerabilities have been associated with the particular product
	HasVulnerability *bool `json:"has_vulnerability,omitempty"`
	// True if this product's patch level is current, defaults to true
	IsCurrent *bool `json:"is_current,omitempty"`
	// Product data object
	Product *Product `json:"product,omitempty"`
	// A link where product updates or patches can be obtained
	RemediationLink *string `json:"remediation_link,omitempty"`
	// String description of Severity level:
	//   * `LOW`
	//   * `MODERATE`
	//   * `IMPORTANT`
	//   * `CRITICAL`
	//   * `NOT_AVAILABLE`
	//   * `UNKNOWN`
	//
	Severity *VulnerabilityResponseSeverity `json:"severity,omitempty"`
	// Product signature descriptor
	SigName *string `json:"sig_name,omitempty"`
	// OPSWAT signature id
	Signature *int64 `json:"signature,omitempty"`
	// Vendor data object
	Vendor *Vendor `json:"vendor,omitempty"`
	// The installed product version
	Version *string `json:"version,omitempty"`
	// Object containing detailed patch information
	VersionData *VersionData `json:"version_data,omitempty"`
	// A list of specific vulnerabilities
	Vulnerabilites []Vulnerabilites `json:"vulnerabilites,omitempty"`
}

func (o *DetectedProduct) GetHasKb() *bool {
	if o == nil {
		return nil
	}
	return o.HasKb
}

func (o *DetectedProduct) GetHasVulnerability() *bool {
	if o == nil {
		return nil
	}
	return o.HasVulnerability
}

func (o *DetectedProduct) GetIsCurrent() *bool {
	if o == nil {
		return nil
	}
	return o.IsCurrent
}

func (o *DetectedProduct) GetProduct() *Product {
	if o == nil {
		return nil
	}
	return o.Product
}

func (o *DetectedProduct) GetRemediationLink() *string {
	if o == nil {
		return nil
	}
	return o.RemediationLink
}

func (o *DetectedProduct) GetSeverity() *VulnerabilityResponseSeverity {
	if o == nil {
		return nil
	}
	return o.Severity
}

func (o *DetectedProduct) GetSigName() *string {
	if o == nil {
		return nil
	}
	return o.SigName
}

func (o *DetectedProduct) GetSignature() *int64 {
	if o == nil {
		return nil
	}
	return o.Signature
}

func (o *DetectedProduct) GetVendor() *Vendor {
	if o == nil {
		return nil
	}
	return o.Vendor
}

func (o *DetectedProduct) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

func (o *DetectedProduct) GetVersionData() *VersionData {
	if o == nil {
		return nil
	}
	return o.VersionData
}

func (o *DetectedProduct) GetVulnerabilites() []Vulnerabilites {
	if o == nil {
		return nil
	}
	return o.Vulnerabilites
}

// Method - The method used by OESIS Framework, it should be 50700 every time.
type Method int64

const (
	MethodFiftyThousandSevenHundred Method = 50700
)

func (e Method) ToPointer() *Method {
	return &e
}

func (e *Method) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 50700:
		*e = Method(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Method: %v", v)
	}
}

// Result - The result information provided by the OESIS Framework
type Result struct {
	// The result code for vulnerability check, 0 means a successful check
	Code *int64 `json:"code,omitempty"`
	// Detected products object is present if input hash has been found to correspond to verified product
	DetectedProduct *DetectedProduct `json:"detected_product,omitempty"`
	// The file's SHA1 hash value
	Hash *string `json:"hash,omitempty"`
	// The method used by OESIS Framework, it should be 50700 every time.
	Method *Method `json:"method,omitempty"`
	// Timestamp of the request issued
	Timestamp *string `json:"timestamp,omitempty"`
	// The vulnerability check's duration in milliseconds
	Timing *int64 `json:"timing,omitempty"`
}

func (o *Result) GetCode() *int64 {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *Result) GetDetectedProduct() *DetectedProduct {
	if o == nil {
		return nil
	}
	return o.DetectedProduct
}

func (o *Result) GetHash() *string {
	if o == nil {
		return nil
	}
	return o.Hash
}

func (o *Result) GetMethod() *Method {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *Result) GetTimestamp() *string {
	if o == nil {
		return nil
	}
	return o.Timestamp
}

func (o *Result) GetTiming() *int64 {
	if o == nil {
		return nil
	}
	return o.Timing
}

// VulnerabilityResponse - Contains all vulnerability information of the analysis result
type VulnerabilityResponse struct {
	// The result information provided by the OESIS Framework
	Result *Result `json:"result,omitempty"`
	// The vulnerability check's duration in milliseconds
	// * `0` - No Vulnerability Found
	// * `1` - Vulnerability Found
	// * `3` - Failed
	// * `16` - Processing Timed Out
	//
	Verdict *int64 `json:"verdict,omitempty"`
}

func (o *VulnerabilityResponse) GetResult() *Result {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *VulnerabilityResponse) GetVerdict() *int64 {
	if o == nil {
		return nil
	}
	return o.Verdict
}
