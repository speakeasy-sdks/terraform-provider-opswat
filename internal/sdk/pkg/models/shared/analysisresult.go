// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AnalysisResultProcessInfoOutdatedData string

const (
	AnalysisResultProcessInfoOutdatedDataEnginedefinitions AnalysisResultProcessInfoOutdatedData = "enginedefinitions"
	AnalysisResultProcessInfoOutdatedDataConfiguration     AnalysisResultProcessInfoOutdatedData = "configuration"
	AnalysisResultProcessInfoOutdatedDataSanitization      AnalysisResultProcessInfoOutdatedData = "sanitization"
)

func (e AnalysisResultProcessInfoOutdatedData) ToPointer() *AnalysisResultProcessInfoOutdatedData {
	return &e
}

func (e *AnalysisResultProcessInfoOutdatedData) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enginedefinitions":
		fallthrough
	case "configuration":
		fallthrough
	case "sanitization":
		*e = AnalysisResultProcessInfoOutdatedData(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalysisResultProcessInfoOutdatedData: %v", v)
	}
}

// AnalysisResultProcessInfoPostProcessing - Contains information about result of sanitization process and any action done after finalizing the process using Post Actions.
type AnalysisResultProcessInfoPostProcessing struct {
	// Empty string if no action failed or list of failed actions, separated by "|".
	ActionsFailed *string `json:"actions_failed,omitempty"`
	// List of successful actions, separated by "|". Empty string if otherwise.
	ActionsRan *string `json:"actions_ran,omitempty"`
	// Contains the name of the sanitized file.
	ConvertedDestination *string `json:"converted_destination,omitempty"`
	// Contains target type name of sanitization.
	ConvertedTo *string `json:"converted_to,omitempty"`
	// Contains target type name of sanitization.
	CopyMoveDestination *string `json:"copy_move_destination,omitempty"`
	// Contains target type name of sanitization.
	SanitizationDetails *DeepCDRDetails `json:"sanitization_details,omitempty"`
}

func (o *AnalysisResultProcessInfoPostProcessing) GetActionsFailed() *string {
	if o == nil {
		return nil
	}
	return o.ActionsFailed
}

func (o *AnalysisResultProcessInfoPostProcessing) GetActionsRan() *string {
	if o == nil {
		return nil
	}
	return o.ActionsRan
}

func (o *AnalysisResultProcessInfoPostProcessing) GetConvertedDestination() *string {
	if o == nil {
		return nil
	}
	return o.ConvertedDestination
}

func (o *AnalysisResultProcessInfoPostProcessing) GetConvertedTo() *string {
	if o == nil {
		return nil
	}
	return o.ConvertedTo
}

func (o *AnalysisResultProcessInfoPostProcessing) GetCopyMoveDestination() *string {
	if o == nil {
		return nil
	}
	return o.CopyMoveDestination
}

func (o *AnalysisResultProcessInfoPostProcessing) GetSanitizationDetails() *DeepCDRDetails {
	if o == nil {
		return nil
	}
	return o.SanitizationDetails
}

// AnalysisResultProcessInfoProcessingTimeDetails - Starting with MetaDefender Core 4.19.1, processing time on each major workflow processing step is calculated.
type AnalysisResultProcessInfoProcessingTimeDetails struct {
	// AV engines' processing time.
	AvScanTime *int64 `json:"av_scan_time,omitempty"`
	// Deep CDR engine's sanitization time.
	CdrTime *int64 `json:"cdr_time,omitempty"`
	// Proactive DLP engine's processing time.
	DlpTime *int64 `json:"dlp_time,omitempty"`
	// Archive extraction engine's processing time.
	ExtractionTime *int64 `json:"extraction_time,omitempty"`
	// FileType engine's processing time.
	FiletypeTime *int64 `json:"filetype_time,omitempty"`
	// OPSWAT Filescan engine's processing time.
	OpswatfilescanTime *int64 `json:"opswatfilescan_time,omitempty"`
	// Total time elapsed for following processing tasks in the product (in milliseconds):
	// * Decryption time (if receiving an encrypted file)
	// * External scanner (if configured)
	// * Post action (if configured)
	// * Other internal processing time among components in the product
	//
	OthersTime *int64 `json:"others_time,omitempty"`
	// Digital signature analyzing time.
	ParseDgsgTime *int64 `json:"parse_dgsg_time,omitempty"`
	// Vulnerability engine's lookup time.
	VulTime *int64 `json:"vul_time,omitempty"`
	// Yara engine's processing time.
	YaraTime *int64 `json:"yara_time,omitempty"`
}

func (o *AnalysisResultProcessInfoProcessingTimeDetails) GetAvScanTime() *int64 {
	if o == nil {
		return nil
	}
	return o.AvScanTime
}

func (o *AnalysisResultProcessInfoProcessingTimeDetails) GetCdrTime() *int64 {
	if o == nil {
		return nil
	}
	return o.CdrTime
}

func (o *AnalysisResultProcessInfoProcessingTimeDetails) GetDlpTime() *int64 {
	if o == nil {
		return nil
	}
	return o.DlpTime
}

func (o *AnalysisResultProcessInfoProcessingTimeDetails) GetExtractionTime() *int64 {
	if o == nil {
		return nil
	}
	return o.ExtractionTime
}

func (o *AnalysisResultProcessInfoProcessingTimeDetails) GetFiletypeTime() *int64 {
	if o == nil {
		return nil
	}
	return o.FiletypeTime
}

func (o *AnalysisResultProcessInfoProcessingTimeDetails) GetOpswatfilescanTime() *int64 {
	if o == nil {
		return nil
	}
	return o.OpswatfilescanTime
}

func (o *AnalysisResultProcessInfoProcessingTimeDetails) GetOthersTime() *int64 {
	if o == nil {
		return nil
	}
	return o.OthersTime
}

func (o *AnalysisResultProcessInfoProcessingTimeDetails) GetParseDgsgTime() *int64 {
	if o == nil {
		return nil
	}
	return o.ParseDgsgTime
}

func (o *AnalysisResultProcessInfoProcessingTimeDetails) GetVulTime() *int64 {
	if o == nil {
		return nil
	}
	return o.VulTime
}

func (o *AnalysisResultProcessInfoProcessingTimeDetails) GetYaraTime() *int64 {
	if o == nil {
		return nil
	}
	return o.YaraTime
}

// AnalysisResultProcessInfo - Processing information
type AnalysisResultProcessInfo struct {
	// Provides the reason why the file is blocked (if so).
	BlockedReason *string `json:"blocked_reason,omitempty"`
	// Provides the reason why the file is blocked in an array (if so).
	BlockedReasons []string `json:"blocked_reasons,omitempty"`
	// Indicates if the input file's detected type was configured to skip scanning.
	FileTypeSkippedScan *bool `json:"file_type_skipped_scan,omitempty"`
	// Total time elapsed for computing hashes (in milliseconds).
	HashTime *int64 `json:"hash_time,omitempty"`
	// array of flags - if occur - describing outdated data in the result, these can be
	//   * enginedefinitions: at least one of the AV engines the item was scanned with has a newer definition database
	//   * configuration: the process' rule - or any item used by the rule - was modified since the item was processed
	//   * sanitization: if item was sanitized this flag notifies that the sanitization information regarding this result is outdated, meaning the sanitized item is no longer available
	//
	OutdatedData []AnalysisResultProcessInfoOutdatedData `json:"outdated_data,omitempty"`
	// Contains information about result of sanitization process and any action done after finalizing the process using Post Actions.
	PostProcessing *AnalysisResultProcessInfoPostProcessing `json:"post_processing,omitempty"`
	// Total time elapsed during processing file on the node (in milliseconds).
	ProcessingTime *int64 `json:"processing_time,omitempty"`
	// Starting with MetaDefender Core 4.19.1, processing time on each major workflow processing step is calculated.
	ProcessingTimeDetails *AnalysisResultProcessInfoProcessingTimeDetails `json:"processing_time_details,omitempty"`
	// The used rule name.
	Profile *string `json:"profile,omitempty"`
	// Percentage of processing completed (from 1-100).
	ProgressPercentage *int64 `json:"progress_percentage,omitempty"`
	// Total time elapsed for file processing task was waiting in MetaDefender Core’s queue until being picked up (queue_time = start_time - upload_timestamp) (in milliseconds).
	QueueTime *int64 `json:"queue_time,omitempty"`
	// The final result of processing the file (Allowed / Blocked / Processing).
	Result *string `json:"result,omitempty"`
	// Identifier for the REST Client that calls the API.
	UserAgent *string `json:"user_agent,omitempty"`
	// User identifier who submitted scan request earlier.
	Username *string `json:"username,omitempty"`
	// Aggregated list of potential issues.
	Verdicts []string `json:"verdicts,omitempty"`
}

func (o *AnalysisResultProcessInfo) GetBlockedReason() *string {
	if o == nil {
		return nil
	}
	return o.BlockedReason
}

func (o *AnalysisResultProcessInfo) GetBlockedReasons() []string {
	if o == nil {
		return nil
	}
	return o.BlockedReasons
}

func (o *AnalysisResultProcessInfo) GetFileTypeSkippedScan() *bool {
	if o == nil {
		return nil
	}
	return o.FileTypeSkippedScan
}

func (o *AnalysisResultProcessInfo) GetHashTime() *int64 {
	if o == nil {
		return nil
	}
	return o.HashTime
}

func (o *AnalysisResultProcessInfo) GetOutdatedData() []AnalysisResultProcessInfoOutdatedData {
	if o == nil {
		return nil
	}
	return o.OutdatedData
}

func (o *AnalysisResultProcessInfo) GetPostProcessing() *AnalysisResultProcessInfoPostProcessing {
	if o == nil {
		return nil
	}
	return o.PostProcessing
}

func (o *AnalysisResultProcessInfo) GetProcessingTime() *int64 {
	if o == nil {
		return nil
	}
	return o.ProcessingTime
}

func (o *AnalysisResultProcessInfo) GetProcessingTimeDetails() *AnalysisResultProcessInfoProcessingTimeDetails {
	if o == nil {
		return nil
	}
	return o.ProcessingTimeDetails
}

func (o *AnalysisResultProcessInfo) GetProfile() *string {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *AnalysisResultProcessInfo) GetProgressPercentage() *int64 {
	if o == nil {
		return nil
	}
	return o.ProgressPercentage
}

func (o *AnalysisResultProcessInfo) GetQueueTime() *int64 {
	if o == nil {
		return nil
	}
	return o.QueueTime
}

func (o *AnalysisResultProcessInfo) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *AnalysisResultProcessInfo) GetUserAgent() *string {
	if o == nil {
		return nil
	}
	return o.UserAgent
}

func (o *AnalysisResultProcessInfo) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *AnalysisResultProcessInfo) GetVerdicts() []string {
	if o == nil {
		return nil
	}
	return o.Verdicts
}

type AnalysisResult struct {
	// data identifier of the requested file
	DataID *string `json:"data_id,omitempty"`
	// Full report from Proactive DLP
	DlpInfo *DLPResponse `json:"dlp_info,omitempty"`
	// The downloading status.
	DownloadInfo *DownloadInfo `json:"download_info,omitempty"`
	// Details for archive extraction.
	ExtractionInfo *ExtractionInfo `json:"extraction_info,omitempty"`
	// basic information of the scanned file
	FileInfo *FileInformation `json:"file_info,omitempty"`
	// response information from FileType engine
	FiletypeInfo *FileTypeResponse `json:"filetype_info,omitempty"`
	// response information from OPSWAT Filescan engine
	OpswatfilescanInfo *OPSWATFilescanResponse `json:"opswatfilescan_info,omitempty"`
	// Processing information
	ProcessInfo *AnalysisResultProcessInfo `json:"process_info,omitempty"`
	// Result of the scanning process.
	ScanResults *MetascanReport `json:"scan_results,omitempty"`
	// Contains all vulnerability information of the analysis result
	VulnerabilityInfo *VulnerabilityResponse `json:"vulnerability_info,omitempty"`
	// Information on data that matched yara rules
	Yara *YaraReport `json:"yara,omitempty"`
}

func (o *AnalysisResult) GetDataID() *string {
	if o == nil {
		return nil
	}
	return o.DataID
}

func (o *AnalysisResult) GetDlpInfo() *DLPResponse {
	if o == nil {
		return nil
	}
	return o.DlpInfo
}

func (o *AnalysisResult) GetDownloadInfo() *DownloadInfo {
	if o == nil {
		return nil
	}
	return o.DownloadInfo
}

func (o *AnalysisResult) GetExtractionInfo() *ExtractionInfo {
	if o == nil {
		return nil
	}
	return o.ExtractionInfo
}

func (o *AnalysisResult) GetFileInfo() *FileInformation {
	if o == nil {
		return nil
	}
	return o.FileInfo
}

func (o *AnalysisResult) GetFiletypeInfo() *FileTypeResponse {
	if o == nil {
		return nil
	}
	return o.FiletypeInfo
}

func (o *AnalysisResult) GetOpswatfilescanInfo() *OPSWATFilescanResponse {
	if o == nil {
		return nil
	}
	return o.OpswatfilescanInfo
}

func (o *AnalysisResult) GetProcessInfo() *AnalysisResultProcessInfo {
	if o == nil {
		return nil
	}
	return o.ProcessInfo
}

func (o *AnalysisResult) GetScanResults() *MetascanReport {
	if o == nil {
		return nil
	}
	return o.ScanResults
}

func (o *AnalysisResult) GetVulnerabilityInfo() *VulnerabilityResponse {
	if o == nil {
		return nil
	}
	return o.VulnerabilityInfo
}

func (o *AnalysisResult) GetYara() *YaraReport {
	if o == nil {
		return nil
	}
	return o.Yara
}
