// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BatchResponseInProgressSchemasProcessInfo - The analysis summary
type BatchResponseInProgressSchemasProcessInfo struct {
	// Provides the reason why the file is blocked (if so).
	BlockedReason *string `json:"blocked_reason,omitempty"`
	// Percentage of processing completed (from 1-100).
	ProgressPercentage *int64 `json:"progress_percentage,omitempty"`
	// The final result of processing the file (Allowed / Blocked / Processing).
	Result *string `json:"result,omitempty"`
	// Aggregated list of potential issues.
	Verdicts []string `json:"verdicts,omitempty"`
}

func (o *BatchResponseInProgressSchemasProcessInfo) GetBlockedReason() *string {
	if o == nil {
		return nil
	}
	return o.BlockedReason
}

func (o *BatchResponseInProgressSchemasProcessInfo) GetProgressPercentage() *int64 {
	if o == nil {
		return nil
	}
	return o.ProgressPercentage
}

func (o *BatchResponseInProgressSchemasProcessInfo) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *BatchResponseInProgressSchemasProcessInfo) GetVerdicts() []string {
	if o == nil {
		return nil
	}
	return o.Verdicts
}

// BatchResponseInProgressSchemasScanAllResultA - Processing result and its index
// * `No Threat Detected`: 0
// * `Infected`: 1
// * `Suspicious`: 2
// * `Failed`: 3
// * `Whitelisted`: 7
// * `Blacklisted`: 8
// * `Exceeded Archive Depth`: 9
// * `Not Scanned`: 10
// * `Encrypted Archive`: 12
// * `Exceeded Archive Size`: 13
// * `Exceeded Archive File Number`: 14
// * `Password Protected Document`: 15
// * `Exceeded Archive Timeout`: 16
// * `Mismatch`: 17
// * `Potentially Vulnerable File`: 18
// * `Cancelled`: 19
// * `Sensitive Data Found`: 20
// * `Yara Rule Matched`: 21
// * `Potentially Unwanted`: 22
// * `Unsupported File Type`: 23
// * `In Progress`: 255
type BatchResponseInProgressSchemasScanAllResultA string

const (
	BatchResponseInProgressSchemasScanAllResultANoThreatDetected          BatchResponseInProgressSchemasScanAllResultA = "No Threat Detected"
	BatchResponseInProgressSchemasScanAllResultAInfected                  BatchResponseInProgressSchemasScanAllResultA = "Infected"
	BatchResponseInProgressSchemasScanAllResultASuspicious                BatchResponseInProgressSchemasScanAllResultA = "Suspicious"
	BatchResponseInProgressSchemasScanAllResultAFailed                    BatchResponseInProgressSchemasScanAllResultA = "Failed"
	BatchResponseInProgressSchemasScanAllResultAWhitelisted               BatchResponseInProgressSchemasScanAllResultA = "Whitelisted"
	BatchResponseInProgressSchemasScanAllResultABlacklisted               BatchResponseInProgressSchemasScanAllResultA = "Blacklisted"
	BatchResponseInProgressSchemasScanAllResultAExceededArchiveDepth      BatchResponseInProgressSchemasScanAllResultA = "Exceeded Archive Depth"
	BatchResponseInProgressSchemasScanAllResultANotScanned                BatchResponseInProgressSchemasScanAllResultA = "Not Scanned"
	BatchResponseInProgressSchemasScanAllResultAEncryptedArchive          BatchResponseInProgressSchemasScanAllResultA = "Encrypted Archive"
	BatchResponseInProgressSchemasScanAllResultAExceededArchiveSize       BatchResponseInProgressSchemasScanAllResultA = "Exceeded Archive Size"
	BatchResponseInProgressSchemasScanAllResultAExceededArchiveFileNumber BatchResponseInProgressSchemasScanAllResultA = "Exceeded Archive File Number"
	BatchResponseInProgressSchemasScanAllResultAPasswordProtectedDocument BatchResponseInProgressSchemasScanAllResultA = "Password Protected Document"
	BatchResponseInProgressSchemasScanAllResultAExceededArchiveTimeout    BatchResponseInProgressSchemasScanAllResultA = "Exceeded Archive Timeout"
	BatchResponseInProgressSchemasScanAllResultAMismatch                  BatchResponseInProgressSchemasScanAllResultA = "Mismatch"
	BatchResponseInProgressSchemasScanAllResultAPotentiallyVulnerableFile BatchResponseInProgressSchemasScanAllResultA = "Potentially Vulnerable File"
	BatchResponseInProgressSchemasScanAllResultACancelled                 BatchResponseInProgressSchemasScanAllResultA = "Cancelled"
	BatchResponseInProgressSchemasScanAllResultASensitiveDataFound        BatchResponseInProgressSchemasScanAllResultA = "Sensitive Data Found"
	BatchResponseInProgressSchemasScanAllResultAYaraRuleMatched           BatchResponseInProgressSchemasScanAllResultA = "Yara Rule Matched"
	BatchResponseInProgressSchemasScanAllResultAPotentiallyUnwanted       BatchResponseInProgressSchemasScanAllResultA = "Potentially Unwanted"
	BatchResponseInProgressSchemasScanAllResultAUnsupportedFileType       BatchResponseInProgressSchemasScanAllResultA = "Unsupported File Type"
	BatchResponseInProgressSchemasScanAllResultAInProgress                BatchResponseInProgressSchemasScanAllResultA = "In Progress"
)

func (e BatchResponseInProgressSchemasScanAllResultA) ToPointer() *BatchResponseInProgressSchemasScanAllResultA {
	return &e
}

func (e *BatchResponseInProgressSchemasScanAllResultA) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No Threat Detected":
		fallthrough
	case "Infected":
		fallthrough
	case "Suspicious":
		fallthrough
	case "Failed":
		fallthrough
	case "Whitelisted":
		fallthrough
	case "Blacklisted":
		fallthrough
	case "Exceeded Archive Depth":
		fallthrough
	case "Not Scanned":
		fallthrough
	case "Encrypted Archive":
		fallthrough
	case "Exceeded Archive Size":
		fallthrough
	case "Exceeded Archive File Number":
		fallthrough
	case "Password Protected Document":
		fallthrough
	case "Exceeded Archive Timeout":
		fallthrough
	case "Mismatch":
		fallthrough
	case "Potentially Vulnerable File":
		fallthrough
	case "Cancelled":
		fallthrough
	case "Sensitive Data Found":
		fallthrough
	case "Yara Rule Matched":
		fallthrough
	case "Potentially Unwanted":
		fallthrough
	case "Unsupported File Type":
		fallthrough
	case "In Progress":
		*e = BatchResponseInProgressSchemasScanAllResultA(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseInProgressSchemasScanAllResultA: %v", v)
	}
}

// BatchResponseInProgressSchemasScanAllResultI - Scan result as index in the Processing Results table above
type BatchResponseInProgressSchemasScanAllResultI int64

const (
	BatchResponseInProgressSchemasScanAllResultIZero                   BatchResponseInProgressSchemasScanAllResultI = 0
	BatchResponseInProgressSchemasScanAllResultIOne                    BatchResponseInProgressSchemasScanAllResultI = 1
	BatchResponseInProgressSchemasScanAllResultITwo                    BatchResponseInProgressSchemasScanAllResultI = 2
	BatchResponseInProgressSchemasScanAllResultIThree                  BatchResponseInProgressSchemasScanAllResultI = 3
	BatchResponseInProgressSchemasScanAllResultISeven                  BatchResponseInProgressSchemasScanAllResultI = 7
	BatchResponseInProgressSchemasScanAllResultIEight                  BatchResponseInProgressSchemasScanAllResultI = 8
	BatchResponseInProgressSchemasScanAllResultINine                   BatchResponseInProgressSchemasScanAllResultI = 9
	BatchResponseInProgressSchemasScanAllResultITen                    BatchResponseInProgressSchemasScanAllResultI = 10
	BatchResponseInProgressSchemasScanAllResultITwelve                 BatchResponseInProgressSchemasScanAllResultI = 12
	BatchResponseInProgressSchemasScanAllResultIThirteen               BatchResponseInProgressSchemasScanAllResultI = 13
	BatchResponseInProgressSchemasScanAllResultIFourteen               BatchResponseInProgressSchemasScanAllResultI = 14
	BatchResponseInProgressSchemasScanAllResultIFifteen                BatchResponseInProgressSchemasScanAllResultI = 15
	BatchResponseInProgressSchemasScanAllResultISixteen                BatchResponseInProgressSchemasScanAllResultI = 16
	BatchResponseInProgressSchemasScanAllResultISeventeen              BatchResponseInProgressSchemasScanAllResultI = 17
	BatchResponseInProgressSchemasScanAllResultIEighteen               BatchResponseInProgressSchemasScanAllResultI = 18
	BatchResponseInProgressSchemasScanAllResultINineteen               BatchResponseInProgressSchemasScanAllResultI = 19
	BatchResponseInProgressSchemasScanAllResultITwenty                 BatchResponseInProgressSchemasScanAllResultI = 20
	BatchResponseInProgressSchemasScanAllResultITwentyOne              BatchResponseInProgressSchemasScanAllResultI = 21
	BatchResponseInProgressSchemasScanAllResultITwentyTwo              BatchResponseInProgressSchemasScanAllResultI = 22
	BatchResponseInProgressSchemasScanAllResultITwentyThree            BatchResponseInProgressSchemasScanAllResultI = 23
	BatchResponseInProgressSchemasScanAllResultITwoHundredAndFiftyFive BatchResponseInProgressSchemasScanAllResultI = 255
)

func (e BatchResponseInProgressSchemasScanAllResultI) ToPointer() *BatchResponseInProgressSchemasScanAllResultI {
	return &e
}

func (e *BatchResponseInProgressSchemasScanAllResultI) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 7:
		fallthrough
	case 8:
		fallthrough
	case 9:
		fallthrough
	case 10:
		fallthrough
	case 12:
		fallthrough
	case 13:
		fallthrough
	case 14:
		fallthrough
	case 15:
		fallthrough
	case 16:
		fallthrough
	case 17:
		fallthrough
	case 18:
		fallthrough
	case 19:
		fallthrough
	case 20:
		fallthrough
	case 21:
		fallthrough
	case 22:
		fallthrough
	case 23:
		fallthrough
	case 255:
		*e = BatchResponseInProgressSchemasScanAllResultI(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseInProgressSchemasScanAllResultI: %v", v)
	}
}

type BatchResponseInProgressFilesInBatch struct {
	// Unique identifer for the file.
	DataID *string `json:"data_id,omitempty"`
	// Total number of engines that detected this file.
	DetectedBy *int64 `json:"detected_by,omitempty"`
	// The filename reported via `filename` header.
	DisplayName *string `json:"display_name,omitempty"`
	// Total file size in bytes.
	FileSize *int64 `json:"file_size,omitempty"`
	// The filetype using mimetype.
	FileType *string `json:"file_type,omitempty"`
	// The filetype in human readable format.
	FileTypeDescription *string `json:"file_type_description,omitempty"`
	// The analysis summary
	ProcessInfo *BatchResponseInProgressSchemasProcessInfo `json:"process_info,omitempty"`
	// Track analysis progress until reaches 100.
	ProgressPercentage *int64 `json:"progress_percentage,omitempty"`
	// The overall scan result as string
	ScanAllResultA *BatchResponseInProgressSchemasScanAllResultA `json:"scan_all_result_a,omitempty"`
	// The overall scan result as index in the Processing Results table.
	ScanAllResultI *BatchResponseInProgressSchemasScanAllResultI `json:"scan_all_result_i,omitempty"`
	// The total number of engines used to analyze this file.
	ScannedWith *int64 `json:"scanned_with,omitempty"`
}

func (o *BatchResponseInProgressFilesInBatch) GetDataID() *string {
	if o == nil {
		return nil
	}
	return o.DataID
}

func (o *BatchResponseInProgressFilesInBatch) GetDetectedBy() *int64 {
	if o == nil {
		return nil
	}
	return o.DetectedBy
}

func (o *BatchResponseInProgressFilesInBatch) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *BatchResponseInProgressFilesInBatch) GetFileSize() *int64 {
	if o == nil {
		return nil
	}
	return o.FileSize
}

func (o *BatchResponseInProgressFilesInBatch) GetFileType() *string {
	if o == nil {
		return nil
	}
	return o.FileType
}

func (o *BatchResponseInProgressFilesInBatch) GetFileTypeDescription() *string {
	if o == nil {
		return nil
	}
	return o.FileTypeDescription
}

func (o *BatchResponseInProgressFilesInBatch) GetProcessInfo() *BatchResponseInProgressSchemasProcessInfo {
	if o == nil {
		return nil
	}
	return o.ProcessInfo
}

func (o *BatchResponseInProgressFilesInBatch) GetProgressPercentage() *int64 {
	if o == nil {
		return nil
	}
	return o.ProgressPercentage
}

func (o *BatchResponseInProgressFilesInBatch) GetScanAllResultA() *BatchResponseInProgressSchemasScanAllResultA {
	if o == nil {
		return nil
	}
	return o.ScanAllResultA
}

func (o *BatchResponseInProgressFilesInBatch) GetScanAllResultI() *BatchResponseInProgressSchemasScanAllResultI {
	if o == nil {
		return nil
	}
	return o.ScanAllResultI
}

func (o *BatchResponseInProgressFilesInBatch) GetScannedWith() *int64 {
	if o == nil {
		return nil
	}
	return o.ScannedWith
}

// BatchResponseInProgressBatchFiles - Information about the files included in this batch.
type BatchResponseInProgressBatchFiles struct {
	// How many files/entries in the batch.
	BatchCount *int64 `json:"batch_count,omitempty"`
	// The list of files in this batch.
	FilesInBatch []BatchResponseInProgressFilesInBatch `json:"files_in_batch,omitempty"`
	// The starting index in the batch. Used for pagination.
	FirstIndex *int64 `json:"first_index,omitempty"`
	// The number of entries per page.
	PageSize *int64 `json:"page_size,omitempty"`
}

func (o *BatchResponseInProgressBatchFiles) GetBatchCount() *int64 {
	if o == nil {
		return nil
	}
	return o.BatchCount
}

func (o *BatchResponseInProgressBatchFiles) GetFilesInBatch() []BatchResponseInProgressFilesInBatch {
	if o == nil {
		return nil
	}
	return o.FilesInBatch
}

func (o *BatchResponseInProgressBatchFiles) GetFirstIndex() *int64 {
	if o == nil {
		return nil
	}
	return o.FirstIndex
}

func (o *BatchResponseInProgressBatchFiles) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

// BatchResponseInProgressProcessInfo - Overall batch process result
type BatchResponseInProgressProcessInfo struct {
	// Provides the reason why the file is blocked (if so).
	BlockedReason *string `json:"blocked_reason,omitempty"`
	// Indicates if the input file's detected type was configured to skip scanning.
	FileTypeSkippedScan *bool `json:"file_type_skipped_scan,omitempty"`
	// The used rule name.
	Profile *string `json:"profile,omitempty"`
	// The final result of processing the file (Allowed / Blocked / Processing).
	Result *string `json:"result,omitempty"`
	// Identifier for the REST Client that calls the API.
	UserAgent *string `json:"user_agent,omitempty"`
	// User identifier who submitted scan request earlier.
	Username *string `json:"username,omitempty"`
}

func (o *BatchResponseInProgressProcessInfo) GetBlockedReason() *string {
	if o == nil {
		return nil
	}
	return o.BlockedReason
}

func (o *BatchResponseInProgressProcessInfo) GetFileTypeSkippedScan() *bool {
	if o == nil {
		return nil
	}
	return o.FileTypeSkippedScan
}

func (o *BatchResponseInProgressProcessInfo) GetProfile() *string {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *BatchResponseInProgressProcessInfo) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *BatchResponseInProgressProcessInfo) GetUserAgent() *string {
	if o == nil {
		return nil
	}
	return o.UserAgent
}

func (o *BatchResponseInProgressProcessInfo) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// BatchResponseInProgressScanAllResultA - Processing result and its index
// * `No Threat Detected`: 0
// * `Infected`: 1
// * `Suspicious`: 2
// * `Failed`: 3
// * `Whitelisted`: 7
// * `Blacklisted`: 8
// * `Exceeded Archive Depth`: 9
// * `Not Scanned`: 10
// * `Encrypted Archive`: 12
// * `Exceeded Archive Size`: 13
// * `Exceeded Archive File Number`: 14
// * `Password Protected Document`: 15
// * `Exceeded Archive Timeout`: 16
// * `Mismatch`: 17
// * `Potentially Vulnerable File`: 18
// * `Cancelled`: 19
// * `Sensitive Data Found`: 20
// * `Yara Rule Matched`: 21
// * `Potentially Unwanted`: 22
// * `Unsupported File Type`: 23
// * `In Progress`: 255
type BatchResponseInProgressScanAllResultA string

const (
	BatchResponseInProgressScanAllResultANoThreatDetected          BatchResponseInProgressScanAllResultA = "No Threat Detected"
	BatchResponseInProgressScanAllResultAInfected                  BatchResponseInProgressScanAllResultA = "Infected"
	BatchResponseInProgressScanAllResultASuspicious                BatchResponseInProgressScanAllResultA = "Suspicious"
	BatchResponseInProgressScanAllResultAFailed                    BatchResponseInProgressScanAllResultA = "Failed"
	BatchResponseInProgressScanAllResultAWhitelisted               BatchResponseInProgressScanAllResultA = "Whitelisted"
	BatchResponseInProgressScanAllResultABlacklisted               BatchResponseInProgressScanAllResultA = "Blacklisted"
	BatchResponseInProgressScanAllResultAExceededArchiveDepth      BatchResponseInProgressScanAllResultA = "Exceeded Archive Depth"
	BatchResponseInProgressScanAllResultANotScanned                BatchResponseInProgressScanAllResultA = "Not Scanned"
	BatchResponseInProgressScanAllResultAEncryptedArchive          BatchResponseInProgressScanAllResultA = "Encrypted Archive"
	BatchResponseInProgressScanAllResultAExceededArchiveSize       BatchResponseInProgressScanAllResultA = "Exceeded Archive Size"
	BatchResponseInProgressScanAllResultAExceededArchiveFileNumber BatchResponseInProgressScanAllResultA = "Exceeded Archive File Number"
	BatchResponseInProgressScanAllResultAPasswordProtectedDocument BatchResponseInProgressScanAllResultA = "Password Protected Document"
	BatchResponseInProgressScanAllResultAExceededArchiveTimeout    BatchResponseInProgressScanAllResultA = "Exceeded Archive Timeout"
	BatchResponseInProgressScanAllResultAMismatch                  BatchResponseInProgressScanAllResultA = "Mismatch"
	BatchResponseInProgressScanAllResultAPotentiallyVulnerableFile BatchResponseInProgressScanAllResultA = "Potentially Vulnerable File"
	BatchResponseInProgressScanAllResultACancelled                 BatchResponseInProgressScanAllResultA = "Cancelled"
	BatchResponseInProgressScanAllResultASensitiveDataFound        BatchResponseInProgressScanAllResultA = "Sensitive Data Found"
	BatchResponseInProgressScanAllResultAYaraRuleMatched           BatchResponseInProgressScanAllResultA = "Yara Rule Matched"
	BatchResponseInProgressScanAllResultAPotentiallyUnwanted       BatchResponseInProgressScanAllResultA = "Potentially Unwanted"
	BatchResponseInProgressScanAllResultAUnsupportedFileType       BatchResponseInProgressScanAllResultA = "Unsupported File Type"
	BatchResponseInProgressScanAllResultAInProgress                BatchResponseInProgressScanAllResultA = "In Progress"
)

func (e BatchResponseInProgressScanAllResultA) ToPointer() *BatchResponseInProgressScanAllResultA {
	return &e
}

func (e *BatchResponseInProgressScanAllResultA) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No Threat Detected":
		fallthrough
	case "Infected":
		fallthrough
	case "Suspicious":
		fallthrough
	case "Failed":
		fallthrough
	case "Whitelisted":
		fallthrough
	case "Blacklisted":
		fallthrough
	case "Exceeded Archive Depth":
		fallthrough
	case "Not Scanned":
		fallthrough
	case "Encrypted Archive":
		fallthrough
	case "Exceeded Archive Size":
		fallthrough
	case "Exceeded Archive File Number":
		fallthrough
	case "Password Protected Document":
		fallthrough
	case "Exceeded Archive Timeout":
		fallthrough
	case "Mismatch":
		fallthrough
	case "Potentially Vulnerable File":
		fallthrough
	case "Cancelled":
		fallthrough
	case "Sensitive Data Found":
		fallthrough
	case "Yara Rule Matched":
		fallthrough
	case "Potentially Unwanted":
		fallthrough
	case "Unsupported File Type":
		fallthrough
	case "In Progress":
		*e = BatchResponseInProgressScanAllResultA(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseInProgressScanAllResultA: %v", v)
	}
}

// BatchResponseInProgressScanAllResultI - Scan result as index in the Processing Results table above
type BatchResponseInProgressScanAllResultI int64

const (
	BatchResponseInProgressScanAllResultIZero                   BatchResponseInProgressScanAllResultI = 0
	BatchResponseInProgressScanAllResultIOne                    BatchResponseInProgressScanAllResultI = 1
	BatchResponseInProgressScanAllResultITwo                    BatchResponseInProgressScanAllResultI = 2
	BatchResponseInProgressScanAllResultIThree                  BatchResponseInProgressScanAllResultI = 3
	BatchResponseInProgressScanAllResultISeven                  BatchResponseInProgressScanAllResultI = 7
	BatchResponseInProgressScanAllResultIEight                  BatchResponseInProgressScanAllResultI = 8
	BatchResponseInProgressScanAllResultINine                   BatchResponseInProgressScanAllResultI = 9
	BatchResponseInProgressScanAllResultITen                    BatchResponseInProgressScanAllResultI = 10
	BatchResponseInProgressScanAllResultITwelve                 BatchResponseInProgressScanAllResultI = 12
	BatchResponseInProgressScanAllResultIThirteen               BatchResponseInProgressScanAllResultI = 13
	BatchResponseInProgressScanAllResultIFourteen               BatchResponseInProgressScanAllResultI = 14
	BatchResponseInProgressScanAllResultIFifteen                BatchResponseInProgressScanAllResultI = 15
	BatchResponseInProgressScanAllResultISixteen                BatchResponseInProgressScanAllResultI = 16
	BatchResponseInProgressScanAllResultISeventeen              BatchResponseInProgressScanAllResultI = 17
	BatchResponseInProgressScanAllResultIEighteen               BatchResponseInProgressScanAllResultI = 18
	BatchResponseInProgressScanAllResultINineteen               BatchResponseInProgressScanAllResultI = 19
	BatchResponseInProgressScanAllResultITwenty                 BatchResponseInProgressScanAllResultI = 20
	BatchResponseInProgressScanAllResultITwentyOne              BatchResponseInProgressScanAllResultI = 21
	BatchResponseInProgressScanAllResultITwentyTwo              BatchResponseInProgressScanAllResultI = 22
	BatchResponseInProgressScanAllResultITwentyThree            BatchResponseInProgressScanAllResultI = 23
	BatchResponseInProgressScanAllResultITwoHundredAndFiftyFive BatchResponseInProgressScanAllResultI = 255
)

func (e BatchResponseInProgressScanAllResultI) ToPointer() *BatchResponseInProgressScanAllResultI {
	return &e
}

func (e *BatchResponseInProgressScanAllResultI) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 7:
		fallthrough
	case 8:
		fallthrough
	case 9:
		fallthrough
	case 10:
		fallthrough
	case 12:
		fallthrough
	case 13:
		fallthrough
	case 14:
		fallthrough
	case 15:
		fallthrough
	case 16:
		fallthrough
	case 17:
		fallthrough
	case 18:
		fallthrough
	case 19:
		fallthrough
	case 20:
		fallthrough
	case 21:
		fallthrough
	case 22:
		fallthrough
	case 23:
		fallthrough
	case 255:
		*e = BatchResponseInProgressScanAllResultI(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseInProgressScanAllResultI: %v", v)
	}
}

// BatchResponseInProgressScanResults - Metascan analysis result.
type BatchResponseInProgressScanResults struct {
	// The batch unique identifer
	BatchID *string `json:"batch_id,omitempty"`
	// The overall scan result as string
	ScanAllResultA *BatchResponseInProgressScanAllResultA `json:"scan_all_result_a,omitempty"`
	// The overall scan result as index in the Processing Results table.
	ScanAllResultI *BatchResponseInProgressScanAllResultI `json:"scan_all_result_i,omitempty"`
	// Timestamp when the scanning process starts.
	StartTime *string `json:"start_time,omitempty"`
	// Total number of scanning engines used as part of this analysis. Not like files, batch is not processed by engine, so this value is always 0.
	TotalAvs *int64 `json:"total_avs,omitempty"`
	// Total time elapsed during scan (in milliseconds).
	TotalTime *int64 `json:"total_time,omitempty"`
}

func (o *BatchResponseInProgressScanResults) GetBatchID() *string {
	if o == nil {
		return nil
	}
	return o.BatchID
}

func (o *BatchResponseInProgressScanResults) GetScanAllResultA() *BatchResponseInProgressScanAllResultA {
	if o == nil {
		return nil
	}
	return o.ScanAllResultA
}

func (o *BatchResponseInProgressScanResults) GetScanAllResultI() *BatchResponseInProgressScanAllResultI {
	if o == nil {
		return nil
	}
	return o.ScanAllResultI
}

func (o *BatchResponseInProgressScanResults) GetStartTime() *string {
	if o == nil {
		return nil
	}
	return o.StartTime
}

func (o *BatchResponseInProgressScanResults) GetTotalAvs() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalAvs
}

func (o *BatchResponseInProgressScanResults) GetTotalTime() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalTime
}

// BatchResponseInProgress - The response for a Batch status request.
type BatchResponseInProgress struct {
	// Information about the files included in this batch.
	BatchFiles *BatchResponseInProgressBatchFiles `json:"batch_files,omitempty"`
	// The batch unique identifer
	BatchID *string `json:"batch_id,omitempty"`
	// The batch status (open/close).
	IsClosed *bool `json:"is_closed,omitempty"`
	// Overall batch process result
	ProcessInfo *BatchResponseInProgressProcessInfo `json:"process_info,omitempty"`
	// Metascan analysis result.
	ScanResults *BatchResponseInProgressScanResults `json:"scan_results,omitempty"`
	// Metadata submitted at batch creation.
	UserData *string `json:"user_data,omitempty"`
}

func (o *BatchResponseInProgress) GetBatchFiles() *BatchResponseInProgressBatchFiles {
	if o == nil {
		return nil
	}
	return o.BatchFiles
}

func (o *BatchResponseInProgress) GetBatchID() *string {
	if o == nil {
		return nil
	}
	return o.BatchID
}

func (o *BatchResponseInProgress) GetIsClosed() *bool {
	if o == nil {
		return nil
	}
	return o.IsClosed
}

func (o *BatchResponseInProgress) GetProcessInfo() *BatchResponseInProgressProcessInfo {
	if o == nil {
		return nil
	}
	return o.ProcessInfo
}

func (o *BatchResponseInProgress) GetScanResults() *BatchResponseInProgressScanResults {
	if o == nil {
		return nil
	}
	return o.ScanResults
}

func (o *BatchResponseInProgress) GetUserData() *string {
	if o == nil {
		return nil
	}
	return o.UserData
}
