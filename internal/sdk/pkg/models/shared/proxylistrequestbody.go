// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProxyListRequestBodyFeatureProxyID - Feature ID.
type ProxyListRequestBodyFeatureProxyID string

const (
	ProxyListRequestBodyFeatureProxyIDCallbackurl  ProxyListRequestBodyFeatureProxyID = "callbackurl"
	ProxyListRequestBodyFeatureProxyIDDownloadfrom ProxyListRequestBodyFeatureProxyID = "downloadfrom"
	ProxyListRequestBodyFeatureProxyIDLicense      ProxyListRequestBodyFeatureProxyID = "license"
	ProxyListRequestBodyFeatureProxyIDMdcloud      ProxyListRequestBodyFeatureProxyID = "mdcloud"
	ProxyListRequestBodyFeatureProxyIDUpdateengine ProxyListRequestBodyFeatureProxyID = "updateengine"
	ProxyListRequestBodyFeatureProxyIDSanitizedurl ProxyListRequestBodyFeatureProxyID = "sanitizedurl"
	ProxyListRequestBodyFeatureProxyIDSsologin     ProxyListRequestBodyFeatureProxyID = "ssologin"
	ProxyListRequestBodyFeatureProxyIDYara         ProxyListRequestBodyFeatureProxyID = "yara"
)

func (e ProxyListRequestBodyFeatureProxyID) ToPointer() *ProxyListRequestBodyFeatureProxyID {
	return &e
}

func (e *ProxyListRequestBodyFeatureProxyID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "callbackurl":
		fallthrough
	case "downloadfrom":
		fallthrough
	case "license":
		fallthrough
	case "mdcloud":
		fallthrough
	case "updateengine":
		fallthrough
	case "sanitizedurl":
		fallthrough
	case "ssologin":
		fallthrough
	case "yara":
		*e = ProxyListRequestBodyFeatureProxyID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyListRequestBodyFeatureProxyID: %v", v)
	}
}

// ProxyListRequestBodyFeatureProxyUseProxy - 0 - this feature does not use proxy. 1 - this feature use master proxy setting. 2 - this feature use a custom proxy.
type ProxyListRequestBodyFeatureProxyUseProxy int64

const (
	ProxyListRequestBodyFeatureProxyUseProxyZero ProxyListRequestBodyFeatureProxyUseProxy = 0
	ProxyListRequestBodyFeatureProxyUseProxyOne  ProxyListRequestBodyFeatureProxyUseProxy = 1
	ProxyListRequestBodyFeatureProxyUseProxyTwo  ProxyListRequestBodyFeatureProxyUseProxy = 2
)

func (e ProxyListRequestBodyFeatureProxyUseProxy) ToPointer() *ProxyListRequestBodyFeatureProxyUseProxy {
	return &e
}

func (e *ProxyListRequestBodyFeatureProxyUseProxy) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		*e = ProxyListRequestBodyFeatureProxyUseProxy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyListRequestBodyFeatureProxyUseProxy: %v", v)
	}
}

type ProxyListRequestBodyFeatureProxy struct {
	Exclusion *string `json:"exclusion,omitempty"`
	// Feature ID.
	ID     *ProxyListRequestBodyFeatureProxyID `json:"id,omitempty"`
	Port   *string                             `json:"port,omitempty"`
	Server *string                             `json:"server,omitempty"`
	// 0 - this feature does not use proxy. 1 - this feature use master proxy setting. 2 - this feature use a custom proxy.
	UseProxy *ProxyListRequestBodyFeatureProxyUseProxy `json:"use_proxy,omitempty"`
	Username *string                                   `json:"username,omitempty"`
}

type ProxyListRequestBody struct {
	// When true, use a proxy server for MetaDefender Core
	Enabled bool `json:"enabled"`
	// Not use the proxy server for the addresses starting with the following entries
	Exclusion *string `json:"exclusion,omitempty"`
	// Decide which feature to use or not use proxy.
	FeatureProxy []ProxyListRequestBodyFeatureProxy `json:"feature_proxy,omitempty"`
	// Password for proxy authentication
	Password *string `json:"password,omitempty"`
	// Proxy server port
	Port string `json:"port"`
	// Proxy server host address
	Server string `json:"server"`
	// Username for proxy authentication
	Username *string `json:"username,omitempty"`
}
