// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProxyListRequestBodyID - Feature ID.
type ProxyListRequestBodyID string

const (
	ProxyListRequestBodyIDCallbackurl  ProxyListRequestBodyID = "callbackurl"
	ProxyListRequestBodyIDDownloadfrom ProxyListRequestBodyID = "downloadfrom"
	ProxyListRequestBodyIDLicense      ProxyListRequestBodyID = "license"
	ProxyListRequestBodyIDMdcloud      ProxyListRequestBodyID = "mdcloud"
	ProxyListRequestBodyIDUpdateengine ProxyListRequestBodyID = "updateengine"
	ProxyListRequestBodyIDSanitizedurl ProxyListRequestBodyID = "sanitizedurl"
	ProxyListRequestBodyIDSsologin     ProxyListRequestBodyID = "ssologin"
	ProxyListRequestBodyIDYara         ProxyListRequestBodyID = "yara"
)

func (e ProxyListRequestBodyID) ToPointer() *ProxyListRequestBodyID {
	return &e
}

func (e *ProxyListRequestBodyID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "callbackurl":
		fallthrough
	case "downloadfrom":
		fallthrough
	case "license":
		fallthrough
	case "mdcloud":
		fallthrough
	case "updateengine":
		fallthrough
	case "sanitizedurl":
		fallthrough
	case "ssologin":
		fallthrough
	case "yara":
		*e = ProxyListRequestBodyID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyListRequestBodyID: %v", v)
	}
}

// ProxyListRequestBodyUseProxy - 0 - this feature does not use proxy. 1 - this feature use master proxy setting. 2 - this feature use a custom proxy.
type ProxyListRequestBodyUseProxy int64

const (
	ProxyListRequestBodyUseProxyZero ProxyListRequestBodyUseProxy = 0
	ProxyListRequestBodyUseProxyOne  ProxyListRequestBodyUseProxy = 1
	ProxyListRequestBodyUseProxyTwo  ProxyListRequestBodyUseProxy = 2
)

func (e ProxyListRequestBodyUseProxy) ToPointer() *ProxyListRequestBodyUseProxy {
	return &e
}

func (e *ProxyListRequestBodyUseProxy) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		*e = ProxyListRequestBodyUseProxy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyListRequestBodyUseProxy: %v", v)
	}
}

type ProxyListRequestBodyFeatureProxy struct {
	Exclusion *string `json:"exclusion,omitempty"`
	// Feature ID.
	ID     *ProxyListRequestBodyID `json:"id,omitempty"`
	Port   *string                 `json:"port,omitempty"`
	Server *string                 `json:"server,omitempty"`
	// 0 - this feature does not use proxy. 1 - this feature use master proxy setting. 2 - this feature use a custom proxy.
	UseProxy *ProxyListRequestBodyUseProxy `json:"use_proxy,omitempty"`
	Username *string                       `json:"username,omitempty"`
}

func (o *ProxyListRequestBodyFeatureProxy) GetExclusion() *string {
	if o == nil {
		return nil
	}
	return o.Exclusion
}

func (o *ProxyListRequestBodyFeatureProxy) GetID() *ProxyListRequestBodyID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ProxyListRequestBodyFeatureProxy) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *ProxyListRequestBodyFeatureProxy) GetServer() *string {
	if o == nil {
		return nil
	}
	return o.Server
}

func (o *ProxyListRequestBodyFeatureProxy) GetUseProxy() *ProxyListRequestBodyUseProxy {
	if o == nil {
		return nil
	}
	return o.UseProxy
}

func (o *ProxyListRequestBodyFeatureProxy) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type ProxyListRequestBody struct {
	// When true, use a proxy server for MetaDefender Core
	Enabled bool `json:"enabled"`
	// Not use the proxy server for the addresses starting with the following entries
	Exclusion *string `json:"exclusion,omitempty"`
	// Decide which feature to use or not use proxy.
	FeatureProxy []ProxyListRequestBodyFeatureProxy `json:"feature_proxy,omitempty"`
	// Password for proxy authentication
	Password *string `json:"password,omitempty"`
	// Proxy server port
	Port string `json:"port"`
	// Proxy server host address
	Server string `json:"server"`
	// Username for proxy authentication
	Username *string `json:"username,omitempty"`
}

func (o *ProxyListRequestBody) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *ProxyListRequestBody) GetExclusion() *string {
	if o == nil {
		return nil
	}
	return o.Exclusion
}

func (o *ProxyListRequestBody) GetFeatureProxy() []ProxyListRequestBodyFeatureProxy {
	if o == nil {
		return nil
	}
	return o.FeatureProxy
}

func (o *ProxyListRequestBody) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *ProxyListRequestBody) GetPort() string {
	if o == nil {
		return ""
	}
	return o.Port
}

func (o *ProxyListRequestBody) GetServer() string {
	if o == nil {
		return ""
	}
	return o.Server
}

func (o *ProxyListRequestBody) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}
