// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AdminConfigUpdateDisabledupdate - The JSON below mean that from Friday to Sunday (week starts on Monday (1), ends on Sunday (7)) from 8:00 to 16:00 you do not want to distribute packages.
// <i>From and to is the distance in minutes from 0:00 (8:00 → 480 minutes, 16:00 → 960 minutes)<i>
type AdminConfigUpdateDisabledupdate struct {
	// A particular day (index of the week) or a defined interval (Fri-Sun -> 5-7)
	Days *string `json:"days,omitempty"`
	// When to start the lockdown, expressed in minutes (8 AM=480)
	From *int64 `json:"from,omitempty"`
	// When to end the lockdown, expressed in minutes (4 PM=960)
	To *int64 `json:"to,omitempty"`
}

func (o *AdminConfigUpdateDisabledupdate) GetDays() *string {
	if o == nil {
		return nil
	}
	return o.Days
}

func (o *AdminConfigUpdateDisabledupdate) GetFrom() *int64 {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *AdminConfigUpdateDisabledupdate) GetTo() *int64 {
	if o == nil {
		return nil
	}
	return o.To
}

// AdminConfigUpdateSource - Define where the updates will be loaded from. <p> This can be either:
//   - `internet` -> if selected, will check for new updates every `autoupdateperiod` minutes
//   - `folder` -> make sure that MetaDefender has access/permission to that folder
//   - `manual` -> requires manually uploading the packages in Inventory > Modules > Upload package.
type AdminConfigUpdateSource string

const (
	AdminConfigUpdateSourceInternet AdminConfigUpdateSource = "internet"
	AdminConfigUpdateSourceFolder   AdminConfigUpdateSource = "folder"
	AdminConfigUpdateSourceManual   AdminConfigUpdateSource = "manual"
)

func (e AdminConfigUpdateSource) ToPointer() *AdminConfigUpdateSource {
	return &e
}

func (e *AdminConfigUpdateSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internet":
		fallthrough
	case "folder":
		fallthrough
	case "manual":
		*e = AdminConfigUpdateSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AdminConfigUpdateSource: %v", v)
	}
}

// AdminConfigUpdate - API object for /admin/config/update
type AdminConfigUpdate struct {
	// The interval (in minutes) for checking for new updates.
	Autoupdateperiod *int64 `json:"autoupdateperiod,omitempty"`
	// If you want to clean the pickup folder after the updates have been applied.
	Deleteafterimport *bool `json:"deleteafterimport,omitempty"`
	// Lockdown a time interval when the engines are not allowed to update.
	Disabledupdate []AdminConfigUpdateDisabledupdate `json:"disabledupdate,omitempty"`
	// The folder where MetaDefender will look for the new engine files.
	Pickupfolder *string `json:"pickupfolder,omitempty"`
	// Define where the updates will be loaded from. <p> This can be either:
	//   * `internet` -> if selected, will check for new updates every `autoupdateperiod` minutes
	//   * `folder` -> make sure that MetaDefender has access/permission to that folder
	//   * `manual` -> requires manually uploading the packages in Inventory > Modules > Upload package.
	//
	Source *AdminConfigUpdateSource `json:"source,omitempty"`
}

func (o *AdminConfigUpdate) GetAutoupdateperiod() *int64 {
	if o == nil {
		return nil
	}
	return o.Autoupdateperiod
}

func (o *AdminConfigUpdate) GetDeleteafterimport() *bool {
	if o == nil {
		return nil
	}
	return o.Deleteafterimport
}

func (o *AdminConfigUpdate) GetDisabledupdate() []AdminConfigUpdateDisabledupdate {
	if o == nil {
		return nil
	}
	return o.Disabledupdate
}

func (o *AdminConfigUpdate) GetPickupfolder() *string {
	if o == nil {
		return nil
	}
	return o.Pickupfolder
}

func (o *AdminConfigUpdate) GetSource() *AdminConfigUpdateSource {
	if o == nil {
		return nil
	}
	return o.Source
}
