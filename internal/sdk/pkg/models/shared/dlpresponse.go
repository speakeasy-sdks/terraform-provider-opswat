// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Certainty - Describes how certain the hit is, possible values:
//   - `Very Low`
//   - `Low`
//   - `Medium`
//   - `High`
//   - `Very High`
type Certainty string

const (
	CertaintyVeryLow  Certainty = "Very Low"
	CertaintyLow      Certainty = "Low"
	CertaintyMedium   Certainty = "Medium"
	CertaintyHigh     Certainty = "High"
	CertaintyVeryHigh Certainty = "Very High"
)

func (e Certainty) ToPointer() *Certainty {
	return &e
}

func (e *Certainty) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Very Low":
		fallthrough
	case "Low":
		fallthrough
	case "Medium":
		fallthrough
	case "High":
		fallthrough
	case "Very High":
		*e = Certainty(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Certainty: %v", v)
	}
}

// Errors - A  list of error objects (empty if no errors happened), each error object contains following keys:
//   - `scan`: scan related error description
//   - `redact`: redaction related error description
//   - `watermark`: watermark related error description
//   - `metadata_removal`: metadata removal related error description
type Errors struct {
}

// DLPResponseCertainty - The text version of "certainty_score", possible values:
//   - `Very Low`
//   - `Low`
//   - `Medium`
//   - `High`
//   - `Very High`
type DLPResponseCertainty string

const (
	DLPResponseCertaintyVeryLow  DLPResponseCertainty = "Very Low"
	DLPResponseCertaintyLow      DLPResponseCertainty = "Low"
	DLPResponseCertaintyMedium   DLPResponseCertainty = "Medium"
	DLPResponseCertaintyHigh     DLPResponseCertainty = "High"
	DLPResponseCertaintyVeryHigh DLPResponseCertainty = "Very High"
)

func (e DLPResponseCertainty) ToPointer() *DLPResponseCertainty {
	return &e
}

func (e *DLPResponseCertainty) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Very Low":
		fallthrough
	case "Low":
		fallthrough
	case "Medium":
		fallthrough
	case "High":
		fallthrough
	case "Very High":
		*e = DLPResponseCertainty(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DLPResponseCertainty: %v", v)
	}
}

// DLPResponseSeverity - (NOTE: this field is deprecated): can be 0 (detected) or 1 (suspicious).
type DLPResponseSeverity int64

const (
	DLPResponseSeverityZero DLPResponseSeverity = 0
	DLPResponseSeverityOne  DLPResponseSeverity = 1
)

func (e DLPResponseSeverity) ToPointer() *DLPResponseSeverity {
	return &e
}

func (e *DLPResponseSeverity) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = DLPResponseSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DLPResponseSeverity: %v", v)
	}
}

// DLPResponseHits - An entry detailing the match.
type DLPResponseHits struct {
	// The context after the matched data.
	After *string `json:"after,omitempty"`
	// The context before the matched data.
	Before *string `json:"before,omitempty"`
	// The text version of "certainty_score", possible values:
	//   * `Very Low`
	//   * `Low`
	//   * `Medium`
	//   * `High`
	//   * `Very High`
	//
	Certainty *DLPResponseCertainty `json:"certainty,omitempty"`
	// Is  defined by the relevance of the given hit in its context. It is calculated based on multiple factors such as the number of digits, possible values: [0-100]
	//
	CertaintyScore *int64 `json:"certainty_score,omitempty"`
	// The matched data.
	Hit *string `json:"hit,omitempty"`
	// The location of the hit that is found in a file.
	Location *string `json:"location,omitempty"`
	// (NOTE: this field is deprecated): can be 0 (detected) or 1 (suspicious).
	//
	Severity *DLPResponseSeverity `json:"severity,omitempty"`
	// If file was redacted or not.
	TryRedact *bool `json:"tryRedact,omitempty"`
}

func (o *DLPResponseHits) GetAfter() *string {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *DLPResponseHits) GetBefore() *string {
	if o == nil {
		return nil
	}
	return o.Before
}

func (o *DLPResponseHits) GetCertainty() *DLPResponseCertainty {
	if o == nil {
		return nil
	}
	return o.Certainty
}

func (o *DLPResponseHits) GetCertaintyScore() *int64 {
	if o == nil {
		return nil
	}
	return o.CertaintyScore
}

func (o *DLPResponseHits) GetHit() *string {
	if o == nil {
		return nil
	}
	return o.Hit
}

func (o *DLPResponseHits) GetLocation() *string {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *DLPResponseHits) GetSeverity() *DLPResponseSeverity {
	if o == nil {
		return nil
	}
	return o.Severity
}

func (o *DLPResponseHits) GetTryRedact() *bool {
	if o == nil {
		return nil
	}
	return o.TryRedact
}

type Ccn struct {
	// Credit Card Number, Social Security Number, or in case of RegEx, the name of the rule that has been given by the user
	DisplayName *string `json:"display_name,omitempty"`
	// A list of detections that matched this rule/pattern.
	Hits []DLPResponseHits `json:"hits,omitempty"`
}

func (o *Ccn) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *Ccn) GetHits() []DLPResponseHits {
	if o == nil {
		return nil
	}
	return o.Hits
}

// Hits - Detailed results that contains as key the type of matched rule:
//   - ccn (credit card number),
//   - ssn (social security number),
//   - regex_<index> (regular expression with an index in order to differentiate the RegEx rules if there are more.)
type Hits struct {
	Ccn *Ccn `json:"ccn,omitempty"`
}

func (o *Hits) GetCcn() *Ccn {
	if o == nil {
		return nil
	}
	return o.Ccn
}

// DLPResponseSchemasMetadataRemovalResult - Result of the metadata removal process, possible values:
//   - `removed`
//   - `not removed`
//   - `failed to remove`
type DLPResponseSchemasMetadataRemovalResult string

const (
	DLPResponseSchemasMetadataRemovalResultRemoved        DLPResponseSchemasMetadataRemovalResult = "removed"
	DLPResponseSchemasMetadataRemovalResultNotRemoved     DLPResponseSchemasMetadataRemovalResult = "not removed"
	DLPResponseSchemasMetadataRemovalResultFailedToRemove DLPResponseSchemasMetadataRemovalResult = "failed to remove"
)

func (e DLPResponseSchemasMetadataRemovalResult) ToPointer() *DLPResponseSchemasMetadataRemovalResult {
	return &e
}

func (e *DLPResponseSchemasMetadataRemovalResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "removed":
		fallthrough
	case "not removed":
		fallthrough
	case "failed to remove":
		*e = DLPResponseSchemasMetadataRemovalResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DLPResponseSchemasMetadataRemovalResult: %v", v)
	}
}

// MetadataRemoval - Result of metadata removal.
type MetadataRemoval struct {
	// Result of the metadata removal process, possible values:
	//   * `removed`
	//   * `not removed`
	//   * `failed to remove`
	//
	Result *DLPResponseSchemasMetadataRemovalResult `json:"result,omitempty"`
}

func (o *MetadataRemoval) GetResult() *DLPResponseSchemasMetadataRemovalResult {
	if o == nil {
		return nil
	}
	return o.Result
}

// DLPResponseResult - Result of the redaction process, possible values:
//   - `redacted`
//   - `not redacted`
//   - `failed to redact`
type DLPResponseResult string

const (
	DLPResponseResultRedacted       DLPResponseResult = "redacted"
	DLPResponseResultNotRedacted    DLPResponseResult = "not redacted"
	DLPResponseResultFailedToRedact DLPResponseResult = "failed to redact"
)

func (e DLPResponseResult) ToPointer() *DLPResponseResult {
	return &e
}

func (e *DLPResponseResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redacted":
		fallthrough
	case "not redacted":
		fallthrough
	case "failed to redact":
		*e = DLPResponseResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DLPResponseResult: %v", v)
	}
}

// Redact - Result of redaction process.
type Redact struct {
	// Result of the redaction process, possible values:
	//   * `redacted`
	//   * `not redacted`
	//   * `failed to redact`
	//
	Result *DLPResponseResult `json:"result,omitempty"`
}

func (o *Redact) GetResult() *DLPResponseResult {
	if o == nil {
		return nil
	}
	return o.Result
}

// Severity - (NOTE: this field is deprecated): represents the severity of the data loss, possible values:
//   - `0` - Certainly is data loss
//   - `1` - Might be data loss
type Severity int64

const (
	SeverityZero Severity = 0
	SeverityOne  Severity = 1
)

func (e Severity) ToPointer() *Severity {
	return &e
}

func (e *Severity) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = Severity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Severity: %v", v)
	}
}

// Verdict - The overall result for the scanned file. Possible values:
//   - `0` - Clean
//   - `1` - Found matched data
//   - `2` - Suspicious
//   - `3` - Failed
//   - `4` - Not scanned
type Verdict int64

const (
	VerdictZero  Verdict = 0
	VerdictOne   Verdict = 1
	VerdictTwo   Verdict = 2
	VerdictThree Verdict = 3
	VerdictFour  Verdict = 4
)

func (e Verdict) ToPointer() *Verdict {
	return &e
}

func (e *Verdict) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		*e = Verdict(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Verdict: %v", v)
	}
}

// DLPResponseSchemasResult - Result of the watermarking process, possible values:
//   - `added`
//   - `not added`
//   - `failed to add`
type DLPResponseSchemasResult string

const (
	DLPResponseSchemasResultAdded       DLPResponseSchemasResult = "added"
	DLPResponseSchemasResultNotAdded    DLPResponseSchemasResult = "not added"
	DLPResponseSchemasResultFailedToAdd DLPResponseSchemasResult = "failed to add"
)

func (e DLPResponseSchemasResult) ToPointer() *DLPResponseSchemasResult {
	return &e
}

func (e *DLPResponseSchemasResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "added":
		fallthrough
	case "not added":
		fallthrough
	case "failed to add":
		*e = DLPResponseSchemasResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DLPResponseSchemasResult: %v", v)
	}
}

// Watermark - Result of watermarking process.
type Watermark struct {
	// Result of the watermarking process, possible values:
	//   * `added`
	//   * `not added`
	//   * `failed to add`
	//
	Result *DLPResponseSchemasResult `json:"result,omitempty"`
}

func (o *Watermark) GetResult() *DLPResponseSchemasResult {
	if o == nil {
		return nil
	}
	return o.Result
}

// DLPResponse - Full report from Proactive DLP
type DLPResponse struct {
	// Describes how certain the hit is, possible values:
	//   * `Very Low`
	//   * `Low`
	//   * `Medium`
	//   * `High`
	//   * `Very High`
	//
	Certainty *Certainty `json:"certainty,omitempty"`
	// A  list of error objects (empty if no errors happened), each error object contains following keys:
	//   * `scan`: scan related error description
	//   * `redact`: redaction related error description
	//   * `watermark`: watermark related error description
	//   * `metadata_removal`: metadata removal related error description
	//
	Errors *Errors `json:"errors,omitempty"`
	// Output processed file name (pre-configured on engine settings under Core's worflow rule)
	Filename *string `json:"filename,omitempty"`
	// Detailed results that contains as key the type of matched rule:
	//   * ccn (credit card number),
	//   * ssn (social security number),
	//   * regex_<index> (regular expression with an index in order to differentiate the RegEx rules if there are more.)
	//
	Hits *Hits `json:"hits,omitempty"`
	// Result of metadata removal.
	MetadataRemoval *MetadataRemoval `json:"metadata_removal,omitempty"`
	// Result of redaction process.
	Redact *Redact `json:"redact,omitempty"`
	// (NOTE: this field is deprecated): represents the severity of the data loss, possible values:
	//   * `0` - Certainly is data loss
	//   * `1` - Might be data loss
	//
	Severity *Severity `json:"severity,omitempty"`
	// The overall result for the scanned file. Possible values:
	//   * `0` - Clean
	//   * `1` - Found matched data
	//   * `2` - Suspicious
	//   * `3` - Failed
	//   * `4` - Not scanned
	//
	Verdict *Verdict `json:"verdict,omitempty"`
	// Result of watermarking process.
	Watermark *Watermark `json:"watermark,omitempty"`
}

func (o *DLPResponse) GetCertainty() *Certainty {
	if o == nil {
		return nil
	}
	return o.Certainty
}

func (o *DLPResponse) GetErrors() *Errors {
	if o == nil {
		return nil
	}
	return o.Errors
}

func (o *DLPResponse) GetFilename() *string {
	if o == nil {
		return nil
	}
	return o.Filename
}

func (o *DLPResponse) GetHits() *Hits {
	if o == nil {
		return nil
	}
	return o.Hits
}

func (o *DLPResponse) GetMetadataRemoval() *MetadataRemoval {
	if o == nil {
		return nil
	}
	return o.MetadataRemoval
}

func (o *DLPResponse) GetRedact() *Redact {
	if o == nil {
		return nil
	}
	return o.Redact
}

func (o *DLPResponse) GetSeverity() *Severity {
	if o == nil {
		return nil
	}
	return o.Severity
}

func (o *DLPResponse) GetVerdict() *Verdict {
	if o == nil {
		return nil
	}
	return o.Verdict
}

func (o *DLPResponse) GetWatermark() *Watermark {
	if o == nil {
		return nil
	}
	return o.Watermark
}
