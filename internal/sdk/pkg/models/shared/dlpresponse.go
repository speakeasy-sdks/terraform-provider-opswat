// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DLPResponseCertainty - Describes how certain the hit is, possible values:
//   - `Very Low`
//   - `Low`
//   - `Medium`
//   - `High`
//   - `Very High`
type DLPResponseCertainty string

const (
	DLPResponseCertaintyVeryLow  DLPResponseCertainty = "Very Low"
	DLPResponseCertaintyLow      DLPResponseCertainty = "Low"
	DLPResponseCertaintyMedium   DLPResponseCertainty = "Medium"
	DLPResponseCertaintyHigh     DLPResponseCertainty = "High"
	DLPResponseCertaintyVeryHigh DLPResponseCertainty = "Very High"
)

func (e DLPResponseCertainty) ToPointer() *DLPResponseCertainty {
	return &e
}

func (e *DLPResponseCertainty) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Very Low":
		fallthrough
	case "Low":
		fallthrough
	case "Medium":
		fallthrough
	case "High":
		fallthrough
	case "Very High":
		*e = DLPResponseCertainty(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DLPResponseCertainty: %v", v)
	}
}

// DLPResponseErrors - A  list of error objects (empty if no errors happened), each error object contains following keys:
//   - `scan`: scan related error description
//   - `redact`: redaction related error description
//   - `watermark`: watermark related error description
//   - `metadata_removal`: metadata removal related error description
type DLPResponseErrors struct {
}

// DLPResponseHitsCcnHitsCertainty - The text version of "certainty_score", possible values:
//   - `Very Low`
//   - `Low`
//   - `Medium`
//   - `High`
//   - `Very High`
type DLPResponseHitsCcnHitsCertainty string

const (
	DLPResponseHitsCcnHitsCertaintyVeryLow  DLPResponseHitsCcnHitsCertainty = "Very Low"
	DLPResponseHitsCcnHitsCertaintyLow      DLPResponseHitsCcnHitsCertainty = "Low"
	DLPResponseHitsCcnHitsCertaintyMedium   DLPResponseHitsCcnHitsCertainty = "Medium"
	DLPResponseHitsCcnHitsCertaintyHigh     DLPResponseHitsCcnHitsCertainty = "High"
	DLPResponseHitsCcnHitsCertaintyVeryHigh DLPResponseHitsCcnHitsCertainty = "Very High"
)

func (e DLPResponseHitsCcnHitsCertainty) ToPointer() *DLPResponseHitsCcnHitsCertainty {
	return &e
}

func (e *DLPResponseHitsCcnHitsCertainty) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Very Low":
		fallthrough
	case "Low":
		fallthrough
	case "Medium":
		fallthrough
	case "High":
		fallthrough
	case "Very High":
		*e = DLPResponseHitsCcnHitsCertainty(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DLPResponseHitsCcnHitsCertainty: %v", v)
	}
}

// DLPResponseHitsCcnHitsSeverity - (NOTE: this field is deprecated): can be 0 (detected) or 1 (suspicious).
type DLPResponseHitsCcnHitsSeverity int64

const (
	DLPResponseHitsCcnHitsSeverityZero DLPResponseHitsCcnHitsSeverity = 0
	DLPResponseHitsCcnHitsSeverityOne  DLPResponseHitsCcnHitsSeverity = 1
)

func (e DLPResponseHitsCcnHitsSeverity) ToPointer() *DLPResponseHitsCcnHitsSeverity {
	return &e
}

func (e *DLPResponseHitsCcnHitsSeverity) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = DLPResponseHitsCcnHitsSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DLPResponseHitsCcnHitsSeverity: %v", v)
	}
}

// DLPResponseHitsCcnHits - An entry detailing the match.
type DLPResponseHitsCcnHits struct {
	// The context after the matched data.
	After *string `json:"after,omitempty"`
	// The context before the matched data.
	Before *string `json:"before,omitempty"`
	// The text version of "certainty_score", possible values:
	//   * `Very Low`
	//   * `Low`
	//   * `Medium`
	//   * `High`
	//   * `Very High`
	//
	Certainty *DLPResponseHitsCcnHitsCertainty `json:"certainty,omitempty"`
	// Is  defined by the relevance of the given hit in its context. It is calculated based on multiple factors such as the number of digits, possible values: [0-100]
	//
	CertaintyScore *int64 `json:"certainty_score,omitempty"`
	// The matched data.
	Hit *string `json:"hit,omitempty"`
	// The location of the hit that is found in a file.
	Location *string `json:"location,omitempty"`
	// (NOTE: this field is deprecated): can be 0 (detected) or 1 (suspicious).
	//
	Severity *DLPResponseHitsCcnHitsSeverity `json:"severity,omitempty"`
	// If file was redacted or not.
	TryRedact *bool `json:"tryRedact,omitempty"`
}

type DLPResponseHitsCcn struct {
	// Credit Card Number, Social Security Number, or in case of RegEx, the name of the rule that has been given by the user
	DisplayName *string `json:"display_name,omitempty"`
	// A list of detections that matched this rule/pattern.
	Hits []DLPResponseHitsCcnHits `json:"hits,omitempty"`
}

// DLPResponseHits - Detailed results that contains as key the type of matched rule:
//   - ccn (credit card number),
//   - ssn (social security number),
//   - regex_<index> (regular expression with an index in order to differentiate the RegEx rules if there are more.)
type DLPResponseHits struct {
	Ccn *DLPResponseHitsCcn `json:"ccn,omitempty"`
}

// DLPResponseMetadataRemovalResult - Result of the metadata removal process, possible values:
//   - `removed`
//   - `not removed`
//   - `failed to remove`
type DLPResponseMetadataRemovalResult string

const (
	DLPResponseMetadataRemovalResultRemoved        DLPResponseMetadataRemovalResult = "removed"
	DLPResponseMetadataRemovalResultNotRemoved     DLPResponseMetadataRemovalResult = "not removed"
	DLPResponseMetadataRemovalResultFailedToRemove DLPResponseMetadataRemovalResult = "failed to remove"
)

func (e DLPResponseMetadataRemovalResult) ToPointer() *DLPResponseMetadataRemovalResult {
	return &e
}

func (e *DLPResponseMetadataRemovalResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "removed":
		fallthrough
	case "not removed":
		fallthrough
	case "failed to remove":
		*e = DLPResponseMetadataRemovalResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DLPResponseMetadataRemovalResult: %v", v)
	}
}

// DLPResponseMetadataRemoval - Result of metadata removal.
type DLPResponseMetadataRemoval struct {
	// Result of the metadata removal process, possible values:
	//   * `removed`
	//   * `not removed`
	//   * `failed to remove`
	//
	Result *DLPResponseMetadataRemovalResult `json:"result,omitempty"`
}

// DLPResponseRedactResult - Result of the redaction process, possible values:
//   - `redacted`
//   - `not redacted`
//   - `failed to redact`
type DLPResponseRedactResult string

const (
	DLPResponseRedactResultRedacted       DLPResponseRedactResult = "redacted"
	DLPResponseRedactResultNotRedacted    DLPResponseRedactResult = "not redacted"
	DLPResponseRedactResultFailedToRedact DLPResponseRedactResult = "failed to redact"
)

func (e DLPResponseRedactResult) ToPointer() *DLPResponseRedactResult {
	return &e
}

func (e *DLPResponseRedactResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redacted":
		fallthrough
	case "not redacted":
		fallthrough
	case "failed to redact":
		*e = DLPResponseRedactResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DLPResponseRedactResult: %v", v)
	}
}

// DLPResponseRedact - Result of redaction process.
type DLPResponseRedact struct {
	// Result of the redaction process, possible values:
	//   * `redacted`
	//   * `not redacted`
	//   * `failed to redact`
	//
	Result *DLPResponseRedactResult `json:"result,omitempty"`
}

// DLPResponseSeverity - (NOTE: this field is deprecated): represents the severity of the data loss, possible values:
//   - `0` - Certainly is data loss
//   - `1` - Might be data loss
type DLPResponseSeverity int64

const (
	DLPResponseSeverityZero DLPResponseSeverity = 0
	DLPResponseSeverityOne  DLPResponseSeverity = 1
)

func (e DLPResponseSeverity) ToPointer() *DLPResponseSeverity {
	return &e
}

func (e *DLPResponseSeverity) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = DLPResponseSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DLPResponseSeverity: %v", v)
	}
}

// DLPResponseVerdict - The overall result for the scanned file. Possible values:
//   - `0` - Clean
//   - `1` - Found matched data
//   - `2` - Suspicious
//   - `3` - Failed
//   - `4` - Not scanned
type DLPResponseVerdict int64

const (
	DLPResponseVerdictZero  DLPResponseVerdict = 0
	DLPResponseVerdictOne   DLPResponseVerdict = 1
	DLPResponseVerdictTwo   DLPResponseVerdict = 2
	DLPResponseVerdictThree DLPResponseVerdict = 3
	DLPResponseVerdictFour  DLPResponseVerdict = 4
)

func (e DLPResponseVerdict) ToPointer() *DLPResponseVerdict {
	return &e
}

func (e *DLPResponseVerdict) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		*e = DLPResponseVerdict(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DLPResponseVerdict: %v", v)
	}
}

// DLPResponseWatermarkResult - Result of the watermarking process, possible values:
//   - `added`
//   - `not added`
//   - `failed to add`
type DLPResponseWatermarkResult string

const (
	DLPResponseWatermarkResultAdded       DLPResponseWatermarkResult = "added"
	DLPResponseWatermarkResultNotAdded    DLPResponseWatermarkResult = "not added"
	DLPResponseWatermarkResultFailedToAdd DLPResponseWatermarkResult = "failed to add"
)

func (e DLPResponseWatermarkResult) ToPointer() *DLPResponseWatermarkResult {
	return &e
}

func (e *DLPResponseWatermarkResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "added":
		fallthrough
	case "not added":
		fallthrough
	case "failed to add":
		*e = DLPResponseWatermarkResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DLPResponseWatermarkResult: %v", v)
	}
}

// DLPResponseWatermark - Result of watermarking process.
type DLPResponseWatermark struct {
	// Result of the watermarking process, possible values:
	//   * `added`
	//   * `not added`
	//   * `failed to add`
	//
	Result *DLPResponseWatermarkResult `json:"result,omitempty"`
}

// DLPResponse - Full report from Proactive DLP
type DLPResponse struct {
	// Describes how certain the hit is, possible values:
	//   * `Very Low`
	//   * `Low`
	//   * `Medium`
	//   * `High`
	//   * `Very High`
	//
	Certainty *DLPResponseCertainty `json:"certainty,omitempty"`
	// A  list of error objects (empty if no errors happened), each error object contains following keys:
	//   * `scan`: scan related error description
	//   * `redact`: redaction related error description
	//   * `watermark`: watermark related error description
	//   * `metadata_removal`: metadata removal related error description
	//
	Errors *DLPResponseErrors `json:"errors,omitempty"`
	// Output processed file name (pre-configured on engine settings under Core's worflow rule)
	Filename *string `json:"filename,omitempty"`
	// Detailed results that contains as key the type of matched rule:
	//   * ccn (credit card number),
	//   * ssn (social security number),
	//   * regex_<index> (regular expression with an index in order to differentiate the RegEx rules if there are more.)
	//
	Hits *DLPResponseHits `json:"hits,omitempty"`
	// Result of metadata removal.
	MetadataRemoval *DLPResponseMetadataRemoval `json:"metadata_removal,omitempty"`
	// Result of redaction process.
	Redact *DLPResponseRedact `json:"redact,omitempty"`
	// (NOTE: this field is deprecated): represents the severity of the data loss, possible values:
	//   * `0` - Certainly is data loss
	//   * `1` - Might be data loss
	//
	Severity *DLPResponseSeverity `json:"severity,omitempty"`
	// The overall result for the scanned file. Possible values:
	//   * `0` - Clean
	//   * `1` - Found matched data
	//   * `2` - Suspicious
	//   * `3` - Failed
	//   * `4` - Not scanned
	//
	Verdict *DLPResponseVerdict `json:"verdict,omitempty"`
	// Result of watermarking process.
	Watermark *DLPResponseWatermark `json:"watermark,omitempty"`
}
