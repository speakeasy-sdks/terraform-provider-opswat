// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ID - Feature ID.
type ID string

const (
	IDCallbackurl  ID = "callbackurl"
	IDDownloadfrom ID = "downloadfrom"
	IDLicense      ID = "license"
	IDMdcloud      ID = "mdcloud"
	IDUpdateengine ID = "updateengine"
	IDSanitizedurl ID = "sanitizedurl"
	IDSsologin     ID = "ssologin"
	IDYara         ID = "yara"
)

func (e ID) ToPointer() *ID {
	return &e
}

func (e *ID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "callbackurl":
		fallthrough
	case "downloadfrom":
		fallthrough
	case "license":
		fallthrough
	case "mdcloud":
		fallthrough
	case "updateengine":
		fallthrough
	case "sanitizedurl":
		fallthrough
	case "ssologin":
		fallthrough
	case "yara":
		*e = ID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ID: %v", v)
	}
}

// UseProxy - 0 - this feature does not use proxy. 1 - this feature use master proxy setting. 2 - this feature use a custom proxy.
type UseProxy int64

const (
	UseProxyZero UseProxy = 0
	UseProxyOne  UseProxy = 1
	UseProxyTwo  UseProxy = 2
)

func (e UseProxy) ToPointer() *UseProxy {
	return &e
}

func (e *UseProxy) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		*e = UseProxy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UseProxy: %v", v)
	}
}

type FeatureProxy struct {
	Exclusion *string `json:"exclusion,omitempty"`
	// Feature ID.
	ID     *ID     `json:"id,omitempty"`
	Port   *string `json:"port,omitempty"`
	Server *string `json:"server,omitempty"`
	// 0 - this feature does not use proxy. 1 - this feature use master proxy setting. 2 - this feature use a custom proxy.
	UseProxy *UseProxy `json:"use_proxy,omitempty"`
	Username *string   `json:"username,omitempty"`
}

func (o *FeatureProxy) GetExclusion() *string {
	if o == nil {
		return nil
	}
	return o.Exclusion
}

func (o *FeatureProxy) GetID() *ID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FeatureProxy) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *FeatureProxy) GetServer() *string {
	if o == nil {
		return nil
	}
	return o.Server
}

func (o *FeatureProxy) GetUseProxy() *UseProxy {
	if o == nil {
		return nil
	}
	return o.UseProxy
}

func (o *FeatureProxy) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type ProxyList struct {
	Enabled   *bool   `json:"enabled,omitempty"`
	Exclusion *string `json:"exclusion,omitempty"`
	// Decide which feature to use or not use proxy.
	FeatureProxy []FeatureProxy `json:"feature_proxy,omitempty"`
	Port         *string        `json:"port,omitempty"`
	Server       *string        `json:"server,omitempty"`
	Username     *string        `json:"username,omitempty"`
}

func (o *ProxyList) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *ProxyList) GetExclusion() *string {
	if o == nil {
		return nil
	}
	return o.Exclusion
}

func (o *ProxyList) GetFeatureProxy() []FeatureProxy {
	if o == nil {
		return nil
	}
	return o.FeatureProxy
}

func (o *ProxyList) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *ProxyList) GetServer() *string {
	if o == nil {
		return nil
	}
	return o.Server
}

func (o *ProxyList) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}
