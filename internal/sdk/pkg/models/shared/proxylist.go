// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProxyListFeatureProxyID - Feature ID.
type ProxyListFeatureProxyID string

const (
	ProxyListFeatureProxyIDCallbackurl  ProxyListFeatureProxyID = "callbackurl"
	ProxyListFeatureProxyIDDownloadfrom ProxyListFeatureProxyID = "downloadfrom"
	ProxyListFeatureProxyIDLicense      ProxyListFeatureProxyID = "license"
	ProxyListFeatureProxyIDMdcloud      ProxyListFeatureProxyID = "mdcloud"
	ProxyListFeatureProxyIDUpdateengine ProxyListFeatureProxyID = "updateengine"
	ProxyListFeatureProxyIDSanitizedurl ProxyListFeatureProxyID = "sanitizedurl"
	ProxyListFeatureProxyIDSsologin     ProxyListFeatureProxyID = "ssologin"
	ProxyListFeatureProxyIDYara         ProxyListFeatureProxyID = "yara"
)

func (e ProxyListFeatureProxyID) ToPointer() *ProxyListFeatureProxyID {
	return &e
}

func (e *ProxyListFeatureProxyID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "callbackurl":
		fallthrough
	case "downloadfrom":
		fallthrough
	case "license":
		fallthrough
	case "mdcloud":
		fallthrough
	case "updateengine":
		fallthrough
	case "sanitizedurl":
		fallthrough
	case "ssologin":
		fallthrough
	case "yara":
		*e = ProxyListFeatureProxyID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyListFeatureProxyID: %v", v)
	}
}

// ProxyListFeatureProxyUseProxy - 0 - this feature does not use proxy. 1 - this feature use master proxy setting. 2 - this feature use a custom proxy.
type ProxyListFeatureProxyUseProxy int64

const (
	ProxyListFeatureProxyUseProxyZero ProxyListFeatureProxyUseProxy = 0
	ProxyListFeatureProxyUseProxyOne  ProxyListFeatureProxyUseProxy = 1
	ProxyListFeatureProxyUseProxyTwo  ProxyListFeatureProxyUseProxy = 2
)

func (e ProxyListFeatureProxyUseProxy) ToPointer() *ProxyListFeatureProxyUseProxy {
	return &e
}

func (e *ProxyListFeatureProxyUseProxy) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		*e = ProxyListFeatureProxyUseProxy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyListFeatureProxyUseProxy: %v", v)
	}
}

type ProxyListFeatureProxy struct {
	Exclusion *string `json:"exclusion,omitempty"`
	// Feature ID.
	ID     *ProxyListFeatureProxyID `json:"id,omitempty"`
	Port   *string                  `json:"port,omitempty"`
	Server *string                  `json:"server,omitempty"`
	// 0 - this feature does not use proxy. 1 - this feature use master proxy setting. 2 - this feature use a custom proxy.
	UseProxy *ProxyListFeatureProxyUseProxy `json:"use_proxy,omitempty"`
	Username *string                        `json:"username,omitempty"`
}

func (o *ProxyListFeatureProxy) GetExclusion() *string {
	if o == nil {
		return nil
	}
	return o.Exclusion
}

func (o *ProxyListFeatureProxy) GetID() *ProxyListFeatureProxyID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ProxyListFeatureProxy) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *ProxyListFeatureProxy) GetServer() *string {
	if o == nil {
		return nil
	}
	return o.Server
}

func (o *ProxyListFeatureProxy) GetUseProxy() *ProxyListFeatureProxyUseProxy {
	if o == nil {
		return nil
	}
	return o.UseProxy
}

func (o *ProxyListFeatureProxy) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type ProxyList struct {
	Enabled   *bool   `json:"enabled,omitempty"`
	Exclusion *string `json:"exclusion,omitempty"`
	// Decide which feature to use or not use proxy.
	FeatureProxy []ProxyListFeatureProxy `json:"feature_proxy,omitempty"`
	Port         *string                 `json:"port,omitempty"`
	Server       *string                 `json:"server,omitempty"`
	Username     *string                 `json:"username,omitempty"`
}

func (o *ProxyList) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *ProxyList) GetExclusion() *string {
	if o == nil {
		return nil
	}
	return o.Exclusion
}

func (o *ProxyList) GetFeatureProxy() []ProxyListFeatureProxy {
	if o == nil {
		return nil
	}
	return o.FeatureProxy
}

func (o *ProxyList) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *ProxyList) GetServer() *string {
	if o == nil {
		return nil
	}
	return o.Server
}

func (o *ProxyList) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}
