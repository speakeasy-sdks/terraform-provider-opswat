// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// State - Defining if this source is being used or not
type State string

const (
	StateDisabled State = "disabled"
	StateEnabled  State = "enabled"
)

func (e State) ToPointer() *State {
	return &e
}

func (e *State) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		*e = State(v)
		return nil
	default:
		return fmt.Errorf("invalid value for State: %v", v)
	}
}

// HTTPSources - Object defining the URL and if this source is being used.
type HTTPSources struct {
	// The location (URL) of the package.
	Source *string `json:"source,omitempty"`
	// Defining if this source is being used or not
	State *State `json:"state,omitempty"`
}

func (o *HTTPSources) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *HTTPSources) GetState() *State {
	if o == nil {
		return nil
	}
	return o.State
}

// YaraSourcesObjectState - Defining if this source is being used or not
type YaraSourcesObjectState string

const (
	YaraSourcesObjectStateDisabled YaraSourcesObjectState = "disabled"
	YaraSourcesObjectStateEnabled  YaraSourcesObjectState = "enabled"
)

func (e YaraSourcesObjectState) ToPointer() *YaraSourcesObjectState {
	return &e
}

func (e *YaraSourcesObjectState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		*e = YaraSourcesObjectState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YaraSourcesObjectState: %v", v)
	}
}

// LocalSources - Object defining the location of the files and if this source is being used.
type LocalSources struct {
	// The location (file path) of the files.
	Source *string `json:"source,omitempty"`
	// Defining if this source is being used or not
	State *YaraSourcesObjectState `json:"state,omitempty"`
}

func (o *LocalSources) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *LocalSources) GetState() *YaraSourcesObjectState {
	if o == nil {
		return nil
	}
	return o.State
}

// YaraSourcesObject - Object describing the yara sources.
type YaraSourcesObject struct {
	// A list of all remote sources.
	HTTPSources []HTTPSources `json:"http_sources,omitempty"`
	// A list of all locals sources
	LocalSources []LocalSources `json:"local_sources,omitempty"`
}

func (o *YaraSourcesObject) GetHTTPSources() []HTTPSources {
	if o == nil {
		return nil
	}
	return o.HTTPSources
}

func (o *YaraSourcesObject) GetLocalSources() []LocalSources {
	if o == nil {
		return nil
	}
	return o.LocalSources
}
