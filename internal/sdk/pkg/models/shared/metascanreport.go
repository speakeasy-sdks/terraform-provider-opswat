// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MetascanReportScanAllResultA - Processing result and its index
// * `No Threat Detected`: 0
// * `Infected`: 1
// * `Suspicious`: 2
// * `Failed`: 3
// * `Whitelisted`: 7
// * `Blacklisted`: 8
// * `Exceeded Archive Depth`: 9
// * `Not Scanned`: 10
// * `Encrypted Archive`: 12
// * `Exceeded Archive Size`: 13
// * `Exceeded Archive File Number`: 14
// * `Password Protected Document`: 15
// * `Exceeded Archive Timeout`: 16
// * `Mismatch`: 17
// * `Potentially Vulnerable File`: 18
// * `Cancelled`: 19
// * `Sensitive Data Found`: 20
// * `Yara Rule Matched`: 21
// * `Potentially Unwanted`: 22
// * `Unsupported File Type`: 23
// * `In Progress`: 255
type MetascanReportScanAllResultA string

const (
	MetascanReportScanAllResultANoThreatDetected          MetascanReportScanAllResultA = "No Threat Detected"
	MetascanReportScanAllResultAInfected                  MetascanReportScanAllResultA = "Infected"
	MetascanReportScanAllResultASuspicious                MetascanReportScanAllResultA = "Suspicious"
	MetascanReportScanAllResultAFailed                    MetascanReportScanAllResultA = "Failed"
	MetascanReportScanAllResultAWhitelisted               MetascanReportScanAllResultA = "Whitelisted"
	MetascanReportScanAllResultABlacklisted               MetascanReportScanAllResultA = "Blacklisted"
	MetascanReportScanAllResultAExceededArchiveDepth      MetascanReportScanAllResultA = "Exceeded Archive Depth"
	MetascanReportScanAllResultANotScanned                MetascanReportScanAllResultA = "Not Scanned"
	MetascanReportScanAllResultAEncryptedArchive          MetascanReportScanAllResultA = "Encrypted Archive"
	MetascanReportScanAllResultAExceededArchiveSize       MetascanReportScanAllResultA = "Exceeded Archive Size"
	MetascanReportScanAllResultAExceededArchiveFileNumber MetascanReportScanAllResultA = "Exceeded Archive File Number"
	MetascanReportScanAllResultAPasswordProtectedDocument MetascanReportScanAllResultA = "Password Protected Document"
	MetascanReportScanAllResultAExceededArchiveTimeout    MetascanReportScanAllResultA = "Exceeded Archive Timeout"
	MetascanReportScanAllResultAMismatch                  MetascanReportScanAllResultA = "Mismatch"
	MetascanReportScanAllResultAPotentiallyVulnerableFile MetascanReportScanAllResultA = "Potentially Vulnerable File"
	MetascanReportScanAllResultACancelled                 MetascanReportScanAllResultA = "Cancelled"
	MetascanReportScanAllResultASensitiveDataFound        MetascanReportScanAllResultA = "Sensitive Data Found"
	MetascanReportScanAllResultAYaraRuleMatched           MetascanReportScanAllResultA = "Yara Rule Matched"
	MetascanReportScanAllResultAPotentiallyUnwanted       MetascanReportScanAllResultA = "Potentially Unwanted"
	MetascanReportScanAllResultAUnsupportedFileType       MetascanReportScanAllResultA = "Unsupported File Type"
	MetascanReportScanAllResultAInProgress                MetascanReportScanAllResultA = "In Progress"
)

func (e MetascanReportScanAllResultA) ToPointer() *MetascanReportScanAllResultA {
	return &e
}

func (e *MetascanReportScanAllResultA) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No Threat Detected":
		fallthrough
	case "Infected":
		fallthrough
	case "Suspicious":
		fallthrough
	case "Failed":
		fallthrough
	case "Whitelisted":
		fallthrough
	case "Blacklisted":
		fallthrough
	case "Exceeded Archive Depth":
		fallthrough
	case "Not Scanned":
		fallthrough
	case "Encrypted Archive":
		fallthrough
	case "Exceeded Archive Size":
		fallthrough
	case "Exceeded Archive File Number":
		fallthrough
	case "Password Protected Document":
		fallthrough
	case "Exceeded Archive Timeout":
		fallthrough
	case "Mismatch":
		fallthrough
	case "Potentially Vulnerable File":
		fallthrough
	case "Cancelled":
		fallthrough
	case "Sensitive Data Found":
		fallthrough
	case "Yara Rule Matched":
		fallthrough
	case "Potentially Unwanted":
		fallthrough
	case "Unsupported File Type":
		fallthrough
	case "In Progress":
		*e = MetascanReportScanAllResultA(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MetascanReportScanAllResultA: %v", v)
	}
}

// MetascanReportScanAllResultI - Scan result as index in the Processing Results table above
type MetascanReportScanAllResultI int64

const (
	MetascanReportScanAllResultIZero                   MetascanReportScanAllResultI = 0
	MetascanReportScanAllResultIOne                    MetascanReportScanAllResultI = 1
	MetascanReportScanAllResultITwo                    MetascanReportScanAllResultI = 2
	MetascanReportScanAllResultIThree                  MetascanReportScanAllResultI = 3
	MetascanReportScanAllResultISeven                  MetascanReportScanAllResultI = 7
	MetascanReportScanAllResultIEight                  MetascanReportScanAllResultI = 8
	MetascanReportScanAllResultINine                   MetascanReportScanAllResultI = 9
	MetascanReportScanAllResultITen                    MetascanReportScanAllResultI = 10
	MetascanReportScanAllResultITwelve                 MetascanReportScanAllResultI = 12
	MetascanReportScanAllResultIThirteen               MetascanReportScanAllResultI = 13
	MetascanReportScanAllResultIFourteen               MetascanReportScanAllResultI = 14
	MetascanReportScanAllResultIFifteen                MetascanReportScanAllResultI = 15
	MetascanReportScanAllResultISixteen                MetascanReportScanAllResultI = 16
	MetascanReportScanAllResultISeventeen              MetascanReportScanAllResultI = 17
	MetascanReportScanAllResultIEighteen               MetascanReportScanAllResultI = 18
	MetascanReportScanAllResultINineteen               MetascanReportScanAllResultI = 19
	MetascanReportScanAllResultITwenty                 MetascanReportScanAllResultI = 20
	MetascanReportScanAllResultITwentyOne              MetascanReportScanAllResultI = 21
	MetascanReportScanAllResultITwentyTwo              MetascanReportScanAllResultI = 22
	MetascanReportScanAllResultITwentyThree            MetascanReportScanAllResultI = 23
	MetascanReportScanAllResultITwoHundredAndFiftyFive MetascanReportScanAllResultI = 255
)

func (e MetascanReportScanAllResultI) ToPointer() *MetascanReportScanAllResultI {
	return &e
}

func (e *MetascanReportScanAllResultI) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 7:
		fallthrough
	case 8:
		fallthrough
	case 9:
		fallthrough
	case 10:
		fallthrough
	case 12:
		fallthrough
	case 13:
		fallthrough
	case 14:
		fallthrough
	case 15:
		fallthrough
	case 16:
		fallthrough
	case 17:
		fallthrough
	case 18:
		fallthrough
	case 19:
		fallthrough
	case 20:
		fallthrough
	case 21:
		fallthrough
	case 22:
		fallthrough
	case 23:
		fallthrough
	case 255:
		*e = MetascanReportScanAllResultI(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MetascanReportScanAllResultI: %v", v)
	}
}

// MetascanReportScanDetails - Scan results for each antivirus engine. The key is the name of the antivirus engine and the value is the result of the antivirus engine
type MetascanReportScanDetails struct {
	// Scan report per each engine.
	ClamAV *AVEngineScanReport `json:"ClamAV,omitempty"`
}

func (o *MetascanReportScanDetails) GetClamAV() *AVEngineScanReport {
	if o == nil {
		return nil
	}
	return o.ClamAV
}

// MetascanReport - Result of the scanning process.
type MetascanReport struct {
	// Data ID of the requested file
	DataID *string `json:"data_id,omitempty"`
	// Track analysis progress until reaches 100.
	ProgressPercentage *int64 `json:"progress_percentage,omitempty"`
	// The overall scan result as string
	ScanAllResultA *MetascanReportScanAllResultA `json:"scan_all_result_a,omitempty"`
	// The overall scan result as index in the Processing Results table.
	ScanAllResultI *MetascanReportScanAllResultI `json:"scan_all_result_i,omitempty"`
	// Scan results for each antivirus engine. The key is the name of the antivirus engine and the value is the result of the antivirus engine
	ScanDetails *MetascanReportScanDetails `json:"scan_details,omitempty"`
	// Timestamp when the scanning process starts.
	StartTime *string `json:"start_time,omitempty"`
	// Total number of scanning engines used as part of this analysis.
	TotalAvs *int64 `json:"total_avs,omitempty"`
	// Total time elapsed during scan (in milliseconds).
	TotalTime *int64 `json:"total_time,omitempty"`
}

func (o *MetascanReport) GetDataID() *string {
	if o == nil {
		return nil
	}
	return o.DataID
}

func (o *MetascanReport) GetProgressPercentage() *int64 {
	if o == nil {
		return nil
	}
	return o.ProgressPercentage
}

func (o *MetascanReport) GetScanAllResultA() *MetascanReportScanAllResultA {
	if o == nil {
		return nil
	}
	return o.ScanAllResultA
}

func (o *MetascanReport) GetScanAllResultI() *MetascanReportScanAllResultI {
	if o == nil {
		return nil
	}
	return o.ScanAllResultI
}

func (o *MetascanReport) GetScanDetails() *MetascanReportScanDetails {
	if o == nil {
		return nil
	}
	return o.ScanDetails
}

func (o *MetascanReport) GetStartTime() *string {
	if o == nil {
		return nil
	}
	return o.StartTime
}

func (o *MetascanReport) GetTotalAvs() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalAvs
}

func (o *MetascanReport) GetTotalTime() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalTime
}
