// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ScanAllResultA - The overall scan result as string
type ScanAllResultA string

const (
	ScanAllResultANoThreatDetected          ScanAllResultA = "No Threat Detected"
	ScanAllResultAInfected                  ScanAllResultA = "Infected"
	ScanAllResultASuspicious                ScanAllResultA = "Suspicious"
	ScanAllResultAFailed                    ScanAllResultA = "Failed"
	ScanAllResultAWhitelisted               ScanAllResultA = "Whitelisted"
	ScanAllResultABlacklisted               ScanAllResultA = "Blacklisted"
	ScanAllResultAExceededArchiveDepth      ScanAllResultA = "Exceeded Archive Depth"
	ScanAllResultANotScanned                ScanAllResultA = "Not Scanned"
	ScanAllResultAEncryptedArchive          ScanAllResultA = "Encrypted Archive"
	ScanAllResultAExceededArchiveSize       ScanAllResultA = "Exceeded Archive Size"
	ScanAllResultAExceededArchiveFileNumber ScanAllResultA = "Exceeded Archive File Number"
	ScanAllResultAPasswordProtectedDocument ScanAllResultA = "Password Protected Document"
	ScanAllResultAExceededArchiveTimeout    ScanAllResultA = "Exceeded Archive Timeout"
	ScanAllResultAMismatch                  ScanAllResultA = "Mismatch"
	ScanAllResultAPotentiallyVulnerableFile ScanAllResultA = "Potentially Vulnerable File"
	ScanAllResultACancelled                 ScanAllResultA = "Cancelled"
	ScanAllResultASensitiveDataFound        ScanAllResultA = "Sensitive Data Found"
	ScanAllResultAYaraRuleMatched           ScanAllResultA = "Yara Rule Matched"
	ScanAllResultAPotentiallyUnwanted       ScanAllResultA = "Potentially Unwanted"
	ScanAllResultAUnsupportedFileType       ScanAllResultA = "Unsupported File Type"
	ScanAllResultAInProgress                ScanAllResultA = "In Progress"
)

func (e ScanAllResultA) ToPointer() *ScanAllResultA {
	return &e
}

func (e *ScanAllResultA) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No Threat Detected":
		fallthrough
	case "Infected":
		fallthrough
	case "Suspicious":
		fallthrough
	case "Failed":
		fallthrough
	case "Whitelisted":
		fallthrough
	case "Blacklisted":
		fallthrough
	case "Exceeded Archive Depth":
		fallthrough
	case "Not Scanned":
		fallthrough
	case "Encrypted Archive":
		fallthrough
	case "Exceeded Archive Size":
		fallthrough
	case "Exceeded Archive File Number":
		fallthrough
	case "Password Protected Document":
		fallthrough
	case "Exceeded Archive Timeout":
		fallthrough
	case "Mismatch":
		fallthrough
	case "Potentially Vulnerable File":
		fallthrough
	case "Cancelled":
		fallthrough
	case "Sensitive Data Found":
		fallthrough
	case "Yara Rule Matched":
		fallthrough
	case "Potentially Unwanted":
		fallthrough
	case "Unsupported File Type":
		fallthrough
	case "In Progress":
		*e = ScanAllResultA(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScanAllResultA: %v", v)
	}
}

// ScanAllResultI - The overall scan result as index in the Processing Results table.
type ScanAllResultI int64

const (
	ScanAllResultIZero                   ScanAllResultI = 0
	ScanAllResultIOne                    ScanAllResultI = 1
	ScanAllResultITwo                    ScanAllResultI = 2
	ScanAllResultIThree                  ScanAllResultI = 3
	ScanAllResultISeven                  ScanAllResultI = 7
	ScanAllResultIEight                  ScanAllResultI = 8
	ScanAllResultINine                   ScanAllResultI = 9
	ScanAllResultITen                    ScanAllResultI = 10
	ScanAllResultITwelve                 ScanAllResultI = 12
	ScanAllResultIThirteen               ScanAllResultI = 13
	ScanAllResultIFourteen               ScanAllResultI = 14
	ScanAllResultIFifteen                ScanAllResultI = 15
	ScanAllResultISixteen                ScanAllResultI = 16
	ScanAllResultISeventeen              ScanAllResultI = 17
	ScanAllResultIEighteen               ScanAllResultI = 18
	ScanAllResultINineteen               ScanAllResultI = 19
	ScanAllResultITwenty                 ScanAllResultI = 20
	ScanAllResultITwentyOne              ScanAllResultI = 21
	ScanAllResultITwentyTwo              ScanAllResultI = 22
	ScanAllResultITwentyThree            ScanAllResultI = 23
	ScanAllResultITwoHundredAndFiftyFive ScanAllResultI = 255
)

func (e ScanAllResultI) ToPointer() *ScanAllResultI {
	return &e
}

func (e *ScanAllResultI) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 7:
		fallthrough
	case 8:
		fallthrough
	case 9:
		fallthrough
	case 10:
		fallthrough
	case 12:
		fallthrough
	case 13:
		fallthrough
	case 14:
		fallthrough
	case 15:
		fallthrough
	case 16:
		fallthrough
	case 17:
		fallthrough
	case 18:
		fallthrough
	case 19:
		fallthrough
	case 20:
		fallthrough
	case 21:
		fallthrough
	case 22:
		fallthrough
	case 23:
		fallthrough
	case 255:
		*e = ScanAllResultI(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScanAllResultI: %v", v)
	}
}

// ScanDetails - Scan results for each antivirus engine. The key is the name of the antivirus engine and the value is the result of the antivirus engine
type ScanDetails struct {
	// Scan report per each engine.
	ClamAV *AVEngineScanReport `json:"ClamAV,omitempty"`
}

func (o *ScanDetails) GetClamAV() *AVEngineScanReport {
	if o == nil {
		return nil
	}
	return o.ClamAV
}

// MetascanReport - Result of the scanning process.
type MetascanReport struct {
	// Data ID of the requested file
	DataID *string `json:"data_id,omitempty"`
	// Track analysis progress until reaches 100.
	ProgressPercentage *int64 `json:"progress_percentage,omitempty"`
	// The overall scan result as string
	ScanAllResultA *ScanAllResultA `json:"scan_all_result_a,omitempty"`
	// The overall scan result as index in the Processing Results table.
	ScanAllResultI *ScanAllResultI `json:"scan_all_result_i,omitempty"`
	// Scan results for each antivirus engine. The key is the name of the antivirus engine and the value is the result of the antivirus engine
	ScanDetails *ScanDetails `json:"scan_details,omitempty"`
	// Timestamp when the scanning process starts.
	StartTime *string `json:"start_time,omitempty"`
	// Total number of scanning engines used as part of this analysis.
	TotalAvs *int64 `json:"total_avs,omitempty"`
	// Total time elapsed during scan (in milliseconds).
	TotalTime *int64 `json:"total_time,omitempty"`
}

func (o *MetascanReport) GetDataID() *string {
	if o == nil {
		return nil
	}
	return o.DataID
}

func (o *MetascanReport) GetProgressPercentage() *int64 {
	if o == nil {
		return nil
	}
	return o.ProgressPercentage
}

func (o *MetascanReport) GetScanAllResultA() *ScanAllResultA {
	if o == nil {
		return nil
	}
	return o.ScanAllResultA
}

func (o *MetascanReport) GetScanAllResultI() *ScanAllResultI {
	if o == nil {
		return nil
	}
	return o.ScanAllResultI
}

func (o *MetascanReport) GetScanDetails() *ScanDetails {
	if o == nil {
		return nil
	}
	return o.ScanDetails
}

func (o *MetascanReport) GetStartTime() *string {
	if o == nil {
		return nil
	}
	return o.StartTime
}

func (o *MetascanReport) GetTotalAvs() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalAvs
}

func (o *MetascanReport) GetTotalTime() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalTime
}
