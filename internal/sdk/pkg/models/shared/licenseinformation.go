// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// LicenseInformation - Information about the licensed product (product type, number of activations, deploymentId, expiration date and days left)
type LicenseInformation struct {
	// Number of days left before expiration
	DaysLeft *int64 `json:"days_left,omitempty"`
	// Unique identifier which is maps the current deployment to the activation
	Deployment *string `json:"deployment,omitempty"`
	// Expiration date in MM/DD/YYYY format.
	Expiration *string `json:"expiration,omitempty"`
	// List of engine/module identifiers that have been licensed
	LicensedEngines []string `json:"licensed_engines,omitempty"`
	// Total number of deployed MetaDefender Nodes attached to this MetaDefender Core instance.
	MaxNodeCount *string `json:"max_node_count,omitempty"`
	// Track online/offline activation mode
	OnlineActivated *bool `json:"online_activated,omitempty"`
	// Official MetaDefender base SKU licensed.
	ProductID *string `json:"product_id,omitempty"`
	// Official MetaDefender base product name licensed.
	ProductName *string `json:"product_name,omitempty"`
}

func (o *LicenseInformation) GetDaysLeft() *int64 {
	if o == nil {
		return nil
	}
	return o.DaysLeft
}

func (o *LicenseInformation) GetDeployment() *string {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *LicenseInformation) GetExpiration() *string {
	if o == nil {
		return nil
	}
	return o.Expiration
}

func (o *LicenseInformation) GetLicensedEngines() []string {
	if o == nil {
		return nil
	}
	return o.LicensedEngines
}

func (o *LicenseInformation) GetMaxNodeCount() *string {
	if o == nil {
		return nil
	}
	return o.MaxNodeCount
}

func (o *LicenseInformation) GetOnlineActivated() *bool {
	if o == nil {
		return nil
	}
	return o.OnlineActivated
}

func (o *LicenseInformation) GetProductID() *string {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *LicenseInformation) GetProductName() *string {
	if o == nil {
		return nil
	}
	return o.ProductName
}
