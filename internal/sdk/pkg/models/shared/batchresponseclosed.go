// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BatchResponseClosedBatchFilesFilesInBatchProcessInfo - The analysis summary
type BatchResponseClosedBatchFilesFilesInBatchProcessInfo struct {
	// Provides the reason why the file is blocked (if so).
	BlockedReason *string `json:"blocked_reason,omitempty"`
	// Percentage of processing completed (from 1-100).
	ProgressPercentage *int64 `json:"progress_percentage,omitempty"`
	// The final result of processing the file (Allowed / Blocked / Processing).
	Result *string `json:"result,omitempty"`
	// Aggregated list of potential issues.
	Verdicts []string `json:"verdicts,omitempty"`
}

func (o *BatchResponseClosedBatchFilesFilesInBatchProcessInfo) GetBlockedReason() *string {
	if o == nil {
		return nil
	}
	return o.BlockedReason
}

func (o *BatchResponseClosedBatchFilesFilesInBatchProcessInfo) GetProgressPercentage() *int64 {
	if o == nil {
		return nil
	}
	return o.ProgressPercentage
}

func (o *BatchResponseClosedBatchFilesFilesInBatchProcessInfo) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *BatchResponseClosedBatchFilesFilesInBatchProcessInfo) GetVerdicts() []string {
	if o == nil {
		return nil
	}
	return o.Verdicts
}

// BatchResponseClosedBatchFilesFilesInBatchScanAllResultA - Processing result and its index
// * `No Threat Detected`: 0
// * `Infected`: 1
// * `Suspicious`: 2
// * `Failed`: 3
// * `Whitelisted`: 7
// * `Blacklisted`: 8
// * `Exceeded Archive Depth`: 9
// * `Not Scanned`: 10
// * `Encrypted Archive`: 12
// * `Exceeded Archive Size`: 13
// * `Exceeded Archive File Number`: 14
// * `Password Protected Document`: 15
// * `Exceeded Archive Timeout`: 16
// * `Mismatch`: 17
// * `Potentially Vulnerable File`: 18
// * `Cancelled`: 19
// * `Sensitive Data Found`: 20
// * `Yara Rule Matched`: 21
// * `Potentially Unwanted`: 22
// * `Unsupported File Type`: 23
// * `In Progress`: 255
type BatchResponseClosedBatchFilesFilesInBatchScanAllResultA string

const (
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultANoThreatDetected          BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "No Threat Detected"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultAInfected                  BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Infected"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultASuspicious                BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Suspicious"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultAFailed                    BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Failed"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultAWhitelisted               BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Whitelisted"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultABlacklisted               BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Blacklisted"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultAExceededArchiveDepth      BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Exceeded Archive Depth"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultANotScanned                BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Not Scanned"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultAEncryptedArchive          BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Encrypted Archive"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultAExceededArchiveSize       BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Exceeded Archive Size"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultAExceededArchiveFileNumber BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Exceeded Archive File Number"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultAPasswordProtectedDocument BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Password Protected Document"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultAExceededArchiveTimeout    BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Exceeded Archive Timeout"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultAMismatch                  BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Mismatch"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultAPotentiallyVulnerableFile BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Potentially Vulnerable File"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultACancelled                 BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Cancelled"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultASensitiveDataFound        BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Sensitive Data Found"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultAYaraRuleMatched           BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Yara Rule Matched"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultAPotentiallyUnwanted       BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Potentially Unwanted"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultAUnsupportedFileType       BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "Unsupported File Type"
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultAInProgress                BatchResponseClosedBatchFilesFilesInBatchScanAllResultA = "In Progress"
)

func (e BatchResponseClosedBatchFilesFilesInBatchScanAllResultA) ToPointer() *BatchResponseClosedBatchFilesFilesInBatchScanAllResultA {
	return &e
}

func (e *BatchResponseClosedBatchFilesFilesInBatchScanAllResultA) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No Threat Detected":
		fallthrough
	case "Infected":
		fallthrough
	case "Suspicious":
		fallthrough
	case "Failed":
		fallthrough
	case "Whitelisted":
		fallthrough
	case "Blacklisted":
		fallthrough
	case "Exceeded Archive Depth":
		fallthrough
	case "Not Scanned":
		fallthrough
	case "Encrypted Archive":
		fallthrough
	case "Exceeded Archive Size":
		fallthrough
	case "Exceeded Archive File Number":
		fallthrough
	case "Password Protected Document":
		fallthrough
	case "Exceeded Archive Timeout":
		fallthrough
	case "Mismatch":
		fallthrough
	case "Potentially Vulnerable File":
		fallthrough
	case "Cancelled":
		fallthrough
	case "Sensitive Data Found":
		fallthrough
	case "Yara Rule Matched":
		fallthrough
	case "Potentially Unwanted":
		fallthrough
	case "Unsupported File Type":
		fallthrough
	case "In Progress":
		*e = BatchResponseClosedBatchFilesFilesInBatchScanAllResultA(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseClosedBatchFilesFilesInBatchScanAllResultA: %v", v)
	}
}

// BatchResponseClosedBatchFilesFilesInBatchScanAllResultI - Scan result as index in the Processing Results table above
type BatchResponseClosedBatchFilesFilesInBatchScanAllResultI int64

const (
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultIZero                   BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 0
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultIOne                    BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 1
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultITwo                    BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 2
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultIThree                  BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 3
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultISeven                  BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 7
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultIEight                  BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 8
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultINine                   BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 9
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultITen                    BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 10
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultITwelve                 BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 12
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultIThirteen               BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 13
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultIFourteen               BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 14
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultIFifteen                BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 15
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultISixteen                BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 16
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultISeventeen              BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 17
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultIEighteen               BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 18
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultINineteen               BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 19
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultITwenty                 BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 20
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultITwentyOne              BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 21
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultITwentyTwo              BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 22
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultITwentyThree            BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 23
	BatchResponseClosedBatchFilesFilesInBatchScanAllResultITwoHundredAndFiftyFive BatchResponseClosedBatchFilesFilesInBatchScanAllResultI = 255
)

func (e BatchResponseClosedBatchFilesFilesInBatchScanAllResultI) ToPointer() *BatchResponseClosedBatchFilesFilesInBatchScanAllResultI {
	return &e
}

func (e *BatchResponseClosedBatchFilesFilesInBatchScanAllResultI) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 7:
		fallthrough
	case 8:
		fallthrough
	case 9:
		fallthrough
	case 10:
		fallthrough
	case 12:
		fallthrough
	case 13:
		fallthrough
	case 14:
		fallthrough
	case 15:
		fallthrough
	case 16:
		fallthrough
	case 17:
		fallthrough
	case 18:
		fallthrough
	case 19:
		fallthrough
	case 20:
		fallthrough
	case 21:
		fallthrough
	case 22:
		fallthrough
	case 23:
		fallthrough
	case 255:
		*e = BatchResponseClosedBatchFilesFilesInBatchScanAllResultI(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseClosedBatchFilesFilesInBatchScanAllResultI: %v", v)
	}
}

type BatchResponseClosedBatchFilesFilesInBatch struct {
	// Unique identifer for the file.
	DataID *string `json:"data_id,omitempty"`
	// Total number of engines that detected this file.
	DetectedBy *int64 `json:"detected_by,omitempty"`
	// The filename reported via `filename` header.
	DisplayName *string `json:"display_name,omitempty"`
	// Total file size in bytes.
	FileSize *int64 `json:"file_size,omitempty"`
	// The filetype using mimetype.
	FileType *string `json:"file_type,omitempty"`
	// The filetype in human readable format.
	FileTypeDescription *string `json:"file_type_description,omitempty"`
	// The analysis summary
	ProcessInfo *BatchResponseClosedBatchFilesFilesInBatchProcessInfo `json:"process_info,omitempty"`
	// Track analysis progress until reaches 100.
	ProgressPercentage *int64 `json:"progress_percentage,omitempty"`
	// The overall scan result as string
	ScanAllResultA *BatchResponseClosedBatchFilesFilesInBatchScanAllResultA `json:"scan_all_result_a,omitempty"`
	// The overall scan result as index in the Processing Results table.
	ScanAllResultI *BatchResponseClosedBatchFilesFilesInBatchScanAllResultI `json:"scan_all_result_i,omitempty"`
	// The total number of engines used to analyze this file.
	ScannedWith *int64 `json:"scanned_with,omitempty"`
}

func (o *BatchResponseClosedBatchFilesFilesInBatch) GetDataID() *string {
	if o == nil {
		return nil
	}
	return o.DataID
}

func (o *BatchResponseClosedBatchFilesFilesInBatch) GetDetectedBy() *int64 {
	if o == nil {
		return nil
	}
	return o.DetectedBy
}

func (o *BatchResponseClosedBatchFilesFilesInBatch) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *BatchResponseClosedBatchFilesFilesInBatch) GetFileSize() *int64 {
	if o == nil {
		return nil
	}
	return o.FileSize
}

func (o *BatchResponseClosedBatchFilesFilesInBatch) GetFileType() *string {
	if o == nil {
		return nil
	}
	return o.FileType
}

func (o *BatchResponseClosedBatchFilesFilesInBatch) GetFileTypeDescription() *string {
	if o == nil {
		return nil
	}
	return o.FileTypeDescription
}

func (o *BatchResponseClosedBatchFilesFilesInBatch) GetProcessInfo() *BatchResponseClosedBatchFilesFilesInBatchProcessInfo {
	if o == nil {
		return nil
	}
	return o.ProcessInfo
}

func (o *BatchResponseClosedBatchFilesFilesInBatch) GetProgressPercentage() *int64 {
	if o == nil {
		return nil
	}
	return o.ProgressPercentage
}

func (o *BatchResponseClosedBatchFilesFilesInBatch) GetScanAllResultA() *BatchResponseClosedBatchFilesFilesInBatchScanAllResultA {
	if o == nil {
		return nil
	}
	return o.ScanAllResultA
}

func (o *BatchResponseClosedBatchFilesFilesInBatch) GetScanAllResultI() *BatchResponseClosedBatchFilesFilesInBatchScanAllResultI {
	if o == nil {
		return nil
	}
	return o.ScanAllResultI
}

func (o *BatchResponseClosedBatchFilesFilesInBatch) GetScannedWith() *int64 {
	if o == nil {
		return nil
	}
	return o.ScannedWith
}

// BatchResponseClosedBatchFiles - Information about the files included in this batch.
type BatchResponseClosedBatchFiles struct {
	// How many files/entries in the batch.
	BatchCount *int64 `json:"batch_count,omitempty"`
	// The list of files in this batch.
	FilesInBatch []BatchResponseClosedBatchFilesFilesInBatch `json:"files_in_batch,omitempty"`
	// The starting index in the batch. Used for pagination.
	FirstIndex *int64 `json:"first_index,omitempty"`
	// The number of entries per page.
	PageSize *int64 `json:"page_size,omitempty"`
}

func (o *BatchResponseClosedBatchFiles) GetBatchCount() *int64 {
	if o == nil {
		return nil
	}
	return o.BatchCount
}

func (o *BatchResponseClosedBatchFiles) GetFilesInBatch() []BatchResponseClosedBatchFilesFilesInBatch {
	if o == nil {
		return nil
	}
	return o.FilesInBatch
}

func (o *BatchResponseClosedBatchFiles) GetFirstIndex() *int64 {
	if o == nil {
		return nil
	}
	return o.FirstIndex
}

func (o *BatchResponseClosedBatchFiles) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

// BatchResponseClosedProcessInfo - Overall batch process result
type BatchResponseClosedProcessInfo struct {
	// Provides the reason why the file is blocked (if so).
	BlockedReason *string `json:"blocked_reason,omitempty"`
	// Indicates if the input file's detected type was configured to skip scanning.
	FileTypeSkippedScan *bool `json:"file_type_skipped_scan,omitempty"`
	// The used rule name.
	Profile *string `json:"profile,omitempty"`
	// The final result of processing the file (Allowed / Blocked / Processing).
	Result *string `json:"result,omitempty"`
	// Identifier for the REST Client that calls the API.
	UserAgent *string `json:"user_agent,omitempty"`
	// User identifier who submitted scan request earlier.
	Username *string `json:"username,omitempty"`
}

func (o *BatchResponseClosedProcessInfo) GetBlockedReason() *string {
	if o == nil {
		return nil
	}
	return o.BlockedReason
}

func (o *BatchResponseClosedProcessInfo) GetFileTypeSkippedScan() *bool {
	if o == nil {
		return nil
	}
	return o.FileTypeSkippedScan
}

func (o *BatchResponseClosedProcessInfo) GetProfile() *string {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *BatchResponseClosedProcessInfo) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *BatchResponseClosedProcessInfo) GetUserAgent() *string {
	if o == nil {
		return nil
	}
	return o.UserAgent
}

func (o *BatchResponseClosedProcessInfo) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// BatchResponseClosedScanResultsScanAllResultA - Processing result and its index
// * `No Threat Detected`: 0
// * `Infected`: 1
// * `Suspicious`: 2
// * `Failed`: 3
// * `Whitelisted`: 7
// * `Blacklisted`: 8
// * `Exceeded Archive Depth`: 9
// * `Not Scanned`: 10
// * `Encrypted Archive`: 12
// * `Exceeded Archive Size`: 13
// * `Exceeded Archive File Number`: 14
// * `Password Protected Document`: 15
// * `Exceeded Archive Timeout`: 16
// * `Mismatch`: 17
// * `Potentially Vulnerable File`: 18
// * `Cancelled`: 19
// * `Sensitive Data Found`: 20
// * `Yara Rule Matched`: 21
// * `Potentially Unwanted`: 22
// * `Unsupported File Type`: 23
// * `In Progress`: 255
type BatchResponseClosedScanResultsScanAllResultA string

const (
	BatchResponseClosedScanResultsScanAllResultANoThreatDetected          BatchResponseClosedScanResultsScanAllResultA = "No Threat Detected"
	BatchResponseClosedScanResultsScanAllResultAInfected                  BatchResponseClosedScanResultsScanAllResultA = "Infected"
	BatchResponseClosedScanResultsScanAllResultASuspicious                BatchResponseClosedScanResultsScanAllResultA = "Suspicious"
	BatchResponseClosedScanResultsScanAllResultAFailed                    BatchResponseClosedScanResultsScanAllResultA = "Failed"
	BatchResponseClosedScanResultsScanAllResultAWhitelisted               BatchResponseClosedScanResultsScanAllResultA = "Whitelisted"
	BatchResponseClosedScanResultsScanAllResultABlacklisted               BatchResponseClosedScanResultsScanAllResultA = "Blacklisted"
	BatchResponseClosedScanResultsScanAllResultAExceededArchiveDepth      BatchResponseClosedScanResultsScanAllResultA = "Exceeded Archive Depth"
	BatchResponseClosedScanResultsScanAllResultANotScanned                BatchResponseClosedScanResultsScanAllResultA = "Not Scanned"
	BatchResponseClosedScanResultsScanAllResultAEncryptedArchive          BatchResponseClosedScanResultsScanAllResultA = "Encrypted Archive"
	BatchResponseClosedScanResultsScanAllResultAExceededArchiveSize       BatchResponseClosedScanResultsScanAllResultA = "Exceeded Archive Size"
	BatchResponseClosedScanResultsScanAllResultAExceededArchiveFileNumber BatchResponseClosedScanResultsScanAllResultA = "Exceeded Archive File Number"
	BatchResponseClosedScanResultsScanAllResultAPasswordProtectedDocument BatchResponseClosedScanResultsScanAllResultA = "Password Protected Document"
	BatchResponseClosedScanResultsScanAllResultAExceededArchiveTimeout    BatchResponseClosedScanResultsScanAllResultA = "Exceeded Archive Timeout"
	BatchResponseClosedScanResultsScanAllResultAMismatch                  BatchResponseClosedScanResultsScanAllResultA = "Mismatch"
	BatchResponseClosedScanResultsScanAllResultAPotentiallyVulnerableFile BatchResponseClosedScanResultsScanAllResultA = "Potentially Vulnerable File"
	BatchResponseClosedScanResultsScanAllResultACancelled                 BatchResponseClosedScanResultsScanAllResultA = "Cancelled"
	BatchResponseClosedScanResultsScanAllResultASensitiveDataFound        BatchResponseClosedScanResultsScanAllResultA = "Sensitive Data Found"
	BatchResponseClosedScanResultsScanAllResultAYaraRuleMatched           BatchResponseClosedScanResultsScanAllResultA = "Yara Rule Matched"
	BatchResponseClosedScanResultsScanAllResultAPotentiallyUnwanted       BatchResponseClosedScanResultsScanAllResultA = "Potentially Unwanted"
	BatchResponseClosedScanResultsScanAllResultAUnsupportedFileType       BatchResponseClosedScanResultsScanAllResultA = "Unsupported File Type"
	BatchResponseClosedScanResultsScanAllResultAInProgress                BatchResponseClosedScanResultsScanAllResultA = "In Progress"
)

func (e BatchResponseClosedScanResultsScanAllResultA) ToPointer() *BatchResponseClosedScanResultsScanAllResultA {
	return &e
}

func (e *BatchResponseClosedScanResultsScanAllResultA) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No Threat Detected":
		fallthrough
	case "Infected":
		fallthrough
	case "Suspicious":
		fallthrough
	case "Failed":
		fallthrough
	case "Whitelisted":
		fallthrough
	case "Blacklisted":
		fallthrough
	case "Exceeded Archive Depth":
		fallthrough
	case "Not Scanned":
		fallthrough
	case "Encrypted Archive":
		fallthrough
	case "Exceeded Archive Size":
		fallthrough
	case "Exceeded Archive File Number":
		fallthrough
	case "Password Protected Document":
		fallthrough
	case "Exceeded Archive Timeout":
		fallthrough
	case "Mismatch":
		fallthrough
	case "Potentially Vulnerable File":
		fallthrough
	case "Cancelled":
		fallthrough
	case "Sensitive Data Found":
		fallthrough
	case "Yara Rule Matched":
		fallthrough
	case "Potentially Unwanted":
		fallthrough
	case "Unsupported File Type":
		fallthrough
	case "In Progress":
		*e = BatchResponseClosedScanResultsScanAllResultA(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseClosedScanResultsScanAllResultA: %v", v)
	}
}

// BatchResponseClosedScanResultsScanAllResultI - Scan result as index in the Processing Results table above
type BatchResponseClosedScanResultsScanAllResultI int64

const (
	BatchResponseClosedScanResultsScanAllResultIZero                   BatchResponseClosedScanResultsScanAllResultI = 0
	BatchResponseClosedScanResultsScanAllResultIOne                    BatchResponseClosedScanResultsScanAllResultI = 1
	BatchResponseClosedScanResultsScanAllResultITwo                    BatchResponseClosedScanResultsScanAllResultI = 2
	BatchResponseClosedScanResultsScanAllResultIThree                  BatchResponseClosedScanResultsScanAllResultI = 3
	BatchResponseClosedScanResultsScanAllResultISeven                  BatchResponseClosedScanResultsScanAllResultI = 7
	BatchResponseClosedScanResultsScanAllResultIEight                  BatchResponseClosedScanResultsScanAllResultI = 8
	BatchResponseClosedScanResultsScanAllResultINine                   BatchResponseClosedScanResultsScanAllResultI = 9
	BatchResponseClosedScanResultsScanAllResultITen                    BatchResponseClosedScanResultsScanAllResultI = 10
	BatchResponseClosedScanResultsScanAllResultITwelve                 BatchResponseClosedScanResultsScanAllResultI = 12
	BatchResponseClosedScanResultsScanAllResultIThirteen               BatchResponseClosedScanResultsScanAllResultI = 13
	BatchResponseClosedScanResultsScanAllResultIFourteen               BatchResponseClosedScanResultsScanAllResultI = 14
	BatchResponseClosedScanResultsScanAllResultIFifteen                BatchResponseClosedScanResultsScanAllResultI = 15
	BatchResponseClosedScanResultsScanAllResultISixteen                BatchResponseClosedScanResultsScanAllResultI = 16
	BatchResponseClosedScanResultsScanAllResultISeventeen              BatchResponseClosedScanResultsScanAllResultI = 17
	BatchResponseClosedScanResultsScanAllResultIEighteen               BatchResponseClosedScanResultsScanAllResultI = 18
	BatchResponseClosedScanResultsScanAllResultINineteen               BatchResponseClosedScanResultsScanAllResultI = 19
	BatchResponseClosedScanResultsScanAllResultITwenty                 BatchResponseClosedScanResultsScanAllResultI = 20
	BatchResponseClosedScanResultsScanAllResultITwentyOne              BatchResponseClosedScanResultsScanAllResultI = 21
	BatchResponseClosedScanResultsScanAllResultITwentyTwo              BatchResponseClosedScanResultsScanAllResultI = 22
	BatchResponseClosedScanResultsScanAllResultITwentyThree            BatchResponseClosedScanResultsScanAllResultI = 23
	BatchResponseClosedScanResultsScanAllResultITwoHundredAndFiftyFive BatchResponseClosedScanResultsScanAllResultI = 255
)

func (e BatchResponseClosedScanResultsScanAllResultI) ToPointer() *BatchResponseClosedScanResultsScanAllResultI {
	return &e
}

func (e *BatchResponseClosedScanResultsScanAllResultI) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 7:
		fallthrough
	case 8:
		fallthrough
	case 9:
		fallthrough
	case 10:
		fallthrough
	case 12:
		fallthrough
	case 13:
		fallthrough
	case 14:
		fallthrough
	case 15:
		fallthrough
	case 16:
		fallthrough
	case 17:
		fallthrough
	case 18:
		fallthrough
	case 19:
		fallthrough
	case 20:
		fallthrough
	case 21:
		fallthrough
	case 22:
		fallthrough
	case 23:
		fallthrough
	case 255:
		*e = BatchResponseClosedScanResultsScanAllResultI(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseClosedScanResultsScanAllResultI: %v", v)
	}
}

// BatchResponseClosedScanResults - Metascan analysis result.
type BatchResponseClosedScanResults struct {
	// The batch unique identifer
	BatchID *string `json:"batch_id,omitempty"`
	// The overall scan result as string
	ScanAllResultA *BatchResponseClosedScanResultsScanAllResultA `json:"scan_all_result_a,omitempty"`
	// The overall scan result as index in the Processing Results table.
	ScanAllResultI *BatchResponseClosedScanResultsScanAllResultI `json:"scan_all_result_i,omitempty"`
	// Timestamp when the scanning process starts.
	StartTime *string `json:"start_time,omitempty"`
	// Total number of scanning engines used as part of this analysis. Not like files, batch is not processed by engine, so this value is always 0.
	TotalAvs *int64 `json:"total_avs,omitempty"`
	// Total time elapsed during scan (in milliseconds).
	TotalTime *int64 `json:"total_time,omitempty"`
}

func (o *BatchResponseClosedScanResults) GetBatchID() *string {
	if o == nil {
		return nil
	}
	return o.BatchID
}

func (o *BatchResponseClosedScanResults) GetScanAllResultA() *BatchResponseClosedScanResultsScanAllResultA {
	if o == nil {
		return nil
	}
	return o.ScanAllResultA
}

func (o *BatchResponseClosedScanResults) GetScanAllResultI() *BatchResponseClosedScanResultsScanAllResultI {
	if o == nil {
		return nil
	}
	return o.ScanAllResultI
}

func (o *BatchResponseClosedScanResults) GetStartTime() *string {
	if o == nil {
		return nil
	}
	return o.StartTime
}

func (o *BatchResponseClosedScanResults) GetTotalAvs() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalAvs
}

func (o *BatchResponseClosedScanResults) GetTotalTime() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalTime
}

// BatchResponseClosed - The response for a Batch status request.
type BatchResponseClosed struct {
	// Information about the files included in this batch.
	BatchFiles *BatchResponseClosedBatchFiles `json:"batch_files,omitempty"`
	// The batch unique identifer
	BatchID *string `json:"batch_id,omitempty"`
	// The batch status (open/close).
	IsClosed *bool `json:"is_closed,omitempty"`
	// Overall batch process result
	ProcessInfo *BatchResponseClosedProcessInfo `json:"process_info,omitempty"`
	// Metascan analysis result.
	ScanResults *BatchResponseClosedScanResults `json:"scan_results,omitempty"`
	// Metadata submitted at batch creation.
	UserData *string `json:"user_data,omitempty"`
}

func (o *BatchResponseClosed) GetBatchFiles() *BatchResponseClosedBatchFiles {
	if o == nil {
		return nil
	}
	return o.BatchFiles
}

func (o *BatchResponseClosed) GetBatchID() *string {
	if o == nil {
		return nil
	}
	return o.BatchID
}

func (o *BatchResponseClosed) GetIsClosed() *bool {
	if o == nil {
		return nil
	}
	return o.IsClosed
}

func (o *BatchResponseClosed) GetProcessInfo() *BatchResponseClosedProcessInfo {
	if o == nil {
		return nil
	}
	return o.ProcessInfo
}

func (o *BatchResponseClosed) GetScanResults() *BatchResponseClosedScanResults {
	if o == nil {
		return nil
	}
	return o.ScanResults
}

func (o *BatchResponseClosed) GetUserData() *string {
	if o == nil {
		return nil
	}
	return o.UserData
}
