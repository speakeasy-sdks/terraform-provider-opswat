// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BatchResponseClosedSchemasProcessInfo - The analysis summary
type BatchResponseClosedSchemasProcessInfo struct {
	// Provides the reason why the file is blocked (if so).
	BlockedReason *string `json:"blocked_reason,omitempty"`
	// Percentage of processing completed (from 1-100).
	ProgressPercentage *int64 `json:"progress_percentage,omitempty"`
	// The final result of processing the file (Allowed / Blocked / Processing).
	Result *string `json:"result,omitempty"`
	// Aggregated list of potential issues.
	Verdicts []string `json:"verdicts,omitempty"`
}

func (o *BatchResponseClosedSchemasProcessInfo) GetBlockedReason() *string {
	if o == nil {
		return nil
	}
	return o.BlockedReason
}

func (o *BatchResponseClosedSchemasProcessInfo) GetProgressPercentage() *int64 {
	if o == nil {
		return nil
	}
	return o.ProgressPercentage
}

func (o *BatchResponseClosedSchemasProcessInfo) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *BatchResponseClosedSchemasProcessInfo) GetVerdicts() []string {
	if o == nil {
		return nil
	}
	return o.Verdicts
}

// BatchResponseClosedSchemasScanAllResultA - Processing result and its index
// * `No Threat Detected`: 0
// * `Infected`: 1
// * `Suspicious`: 2
// * `Failed`: 3
// * `Whitelisted`: 7
// * `Blacklisted`: 8
// * `Exceeded Archive Depth`: 9
// * `Not Scanned`: 10
// * `Encrypted Archive`: 12
// * `Exceeded Archive Size`: 13
// * `Exceeded Archive File Number`: 14
// * `Password Protected Document`: 15
// * `Exceeded Archive Timeout`: 16
// * `Mismatch`: 17
// * `Potentially Vulnerable File`: 18
// * `Cancelled`: 19
// * `Sensitive Data Found`: 20
// * `Yara Rule Matched`: 21
// * `Potentially Unwanted`: 22
// * `Unsupported File Type`: 23
// * `In Progress`: 255
type BatchResponseClosedSchemasScanAllResultA string

const (
	BatchResponseClosedSchemasScanAllResultANoThreatDetected          BatchResponseClosedSchemasScanAllResultA = "No Threat Detected"
	BatchResponseClosedSchemasScanAllResultAInfected                  BatchResponseClosedSchemasScanAllResultA = "Infected"
	BatchResponseClosedSchemasScanAllResultASuspicious                BatchResponseClosedSchemasScanAllResultA = "Suspicious"
	BatchResponseClosedSchemasScanAllResultAFailed                    BatchResponseClosedSchemasScanAllResultA = "Failed"
	BatchResponseClosedSchemasScanAllResultAWhitelisted               BatchResponseClosedSchemasScanAllResultA = "Whitelisted"
	BatchResponseClosedSchemasScanAllResultABlacklisted               BatchResponseClosedSchemasScanAllResultA = "Blacklisted"
	BatchResponseClosedSchemasScanAllResultAExceededArchiveDepth      BatchResponseClosedSchemasScanAllResultA = "Exceeded Archive Depth"
	BatchResponseClosedSchemasScanAllResultANotScanned                BatchResponseClosedSchemasScanAllResultA = "Not Scanned"
	BatchResponseClosedSchemasScanAllResultAEncryptedArchive          BatchResponseClosedSchemasScanAllResultA = "Encrypted Archive"
	BatchResponseClosedSchemasScanAllResultAExceededArchiveSize       BatchResponseClosedSchemasScanAllResultA = "Exceeded Archive Size"
	BatchResponseClosedSchemasScanAllResultAExceededArchiveFileNumber BatchResponseClosedSchemasScanAllResultA = "Exceeded Archive File Number"
	BatchResponseClosedSchemasScanAllResultAPasswordProtectedDocument BatchResponseClosedSchemasScanAllResultA = "Password Protected Document"
	BatchResponseClosedSchemasScanAllResultAExceededArchiveTimeout    BatchResponseClosedSchemasScanAllResultA = "Exceeded Archive Timeout"
	BatchResponseClosedSchemasScanAllResultAMismatch                  BatchResponseClosedSchemasScanAllResultA = "Mismatch"
	BatchResponseClosedSchemasScanAllResultAPotentiallyVulnerableFile BatchResponseClosedSchemasScanAllResultA = "Potentially Vulnerable File"
	BatchResponseClosedSchemasScanAllResultACancelled                 BatchResponseClosedSchemasScanAllResultA = "Cancelled"
	BatchResponseClosedSchemasScanAllResultASensitiveDataFound        BatchResponseClosedSchemasScanAllResultA = "Sensitive Data Found"
	BatchResponseClosedSchemasScanAllResultAYaraRuleMatched           BatchResponseClosedSchemasScanAllResultA = "Yara Rule Matched"
	BatchResponseClosedSchemasScanAllResultAPotentiallyUnwanted       BatchResponseClosedSchemasScanAllResultA = "Potentially Unwanted"
	BatchResponseClosedSchemasScanAllResultAUnsupportedFileType       BatchResponseClosedSchemasScanAllResultA = "Unsupported File Type"
	BatchResponseClosedSchemasScanAllResultAInProgress                BatchResponseClosedSchemasScanAllResultA = "In Progress"
)

func (e BatchResponseClosedSchemasScanAllResultA) ToPointer() *BatchResponseClosedSchemasScanAllResultA {
	return &e
}

func (e *BatchResponseClosedSchemasScanAllResultA) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No Threat Detected":
		fallthrough
	case "Infected":
		fallthrough
	case "Suspicious":
		fallthrough
	case "Failed":
		fallthrough
	case "Whitelisted":
		fallthrough
	case "Blacklisted":
		fallthrough
	case "Exceeded Archive Depth":
		fallthrough
	case "Not Scanned":
		fallthrough
	case "Encrypted Archive":
		fallthrough
	case "Exceeded Archive Size":
		fallthrough
	case "Exceeded Archive File Number":
		fallthrough
	case "Password Protected Document":
		fallthrough
	case "Exceeded Archive Timeout":
		fallthrough
	case "Mismatch":
		fallthrough
	case "Potentially Vulnerable File":
		fallthrough
	case "Cancelled":
		fallthrough
	case "Sensitive Data Found":
		fallthrough
	case "Yara Rule Matched":
		fallthrough
	case "Potentially Unwanted":
		fallthrough
	case "Unsupported File Type":
		fallthrough
	case "In Progress":
		*e = BatchResponseClosedSchemasScanAllResultA(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseClosedSchemasScanAllResultA: %v", v)
	}
}

// BatchResponseClosedSchemasScanAllResultI - Scan result as index in the Processing Results table above
type BatchResponseClosedSchemasScanAllResultI int64

const (
	BatchResponseClosedSchemasScanAllResultIZero                   BatchResponseClosedSchemasScanAllResultI = 0
	BatchResponseClosedSchemasScanAllResultIOne                    BatchResponseClosedSchemasScanAllResultI = 1
	BatchResponseClosedSchemasScanAllResultITwo                    BatchResponseClosedSchemasScanAllResultI = 2
	BatchResponseClosedSchemasScanAllResultIThree                  BatchResponseClosedSchemasScanAllResultI = 3
	BatchResponseClosedSchemasScanAllResultISeven                  BatchResponseClosedSchemasScanAllResultI = 7
	BatchResponseClosedSchemasScanAllResultIEight                  BatchResponseClosedSchemasScanAllResultI = 8
	BatchResponseClosedSchemasScanAllResultINine                   BatchResponseClosedSchemasScanAllResultI = 9
	BatchResponseClosedSchemasScanAllResultITen                    BatchResponseClosedSchemasScanAllResultI = 10
	BatchResponseClosedSchemasScanAllResultITwelve                 BatchResponseClosedSchemasScanAllResultI = 12
	BatchResponseClosedSchemasScanAllResultIThirteen               BatchResponseClosedSchemasScanAllResultI = 13
	BatchResponseClosedSchemasScanAllResultIFourteen               BatchResponseClosedSchemasScanAllResultI = 14
	BatchResponseClosedSchemasScanAllResultIFifteen                BatchResponseClosedSchemasScanAllResultI = 15
	BatchResponseClosedSchemasScanAllResultISixteen                BatchResponseClosedSchemasScanAllResultI = 16
	BatchResponseClosedSchemasScanAllResultISeventeen              BatchResponseClosedSchemasScanAllResultI = 17
	BatchResponseClosedSchemasScanAllResultIEighteen               BatchResponseClosedSchemasScanAllResultI = 18
	BatchResponseClosedSchemasScanAllResultINineteen               BatchResponseClosedSchemasScanAllResultI = 19
	BatchResponseClosedSchemasScanAllResultITwenty                 BatchResponseClosedSchemasScanAllResultI = 20
	BatchResponseClosedSchemasScanAllResultITwentyOne              BatchResponseClosedSchemasScanAllResultI = 21
	BatchResponseClosedSchemasScanAllResultITwentyTwo              BatchResponseClosedSchemasScanAllResultI = 22
	BatchResponseClosedSchemasScanAllResultITwentyThree            BatchResponseClosedSchemasScanAllResultI = 23
	BatchResponseClosedSchemasScanAllResultITwoHundredAndFiftyFive BatchResponseClosedSchemasScanAllResultI = 255
)

func (e BatchResponseClosedSchemasScanAllResultI) ToPointer() *BatchResponseClosedSchemasScanAllResultI {
	return &e
}

func (e *BatchResponseClosedSchemasScanAllResultI) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 7:
		fallthrough
	case 8:
		fallthrough
	case 9:
		fallthrough
	case 10:
		fallthrough
	case 12:
		fallthrough
	case 13:
		fallthrough
	case 14:
		fallthrough
	case 15:
		fallthrough
	case 16:
		fallthrough
	case 17:
		fallthrough
	case 18:
		fallthrough
	case 19:
		fallthrough
	case 20:
		fallthrough
	case 21:
		fallthrough
	case 22:
		fallthrough
	case 23:
		fallthrough
	case 255:
		*e = BatchResponseClosedSchemasScanAllResultI(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseClosedSchemasScanAllResultI: %v", v)
	}
}

type FilesInBatch struct {
	// Unique identifer for the file.
	DataID *string `json:"data_id,omitempty"`
	// Total number of engines that detected this file.
	DetectedBy *int64 `json:"detected_by,omitempty"`
	// The filename reported via `filename` header.
	DisplayName *string `json:"display_name,omitempty"`
	// Total file size in bytes.
	FileSize *int64 `json:"file_size,omitempty"`
	// The filetype using mimetype.
	FileType *string `json:"file_type,omitempty"`
	// The filetype in human readable format.
	FileTypeDescription *string `json:"file_type_description,omitempty"`
	// The analysis summary
	ProcessInfo *BatchResponseClosedSchemasProcessInfo `json:"process_info,omitempty"`
	// Track analysis progress until reaches 100.
	ProgressPercentage *int64 `json:"progress_percentage,omitempty"`
	// The overall scan result as string
	ScanAllResultA *BatchResponseClosedSchemasScanAllResultA `json:"scan_all_result_a,omitempty"`
	// The overall scan result as index in the Processing Results table.
	ScanAllResultI *BatchResponseClosedSchemasScanAllResultI `json:"scan_all_result_i,omitempty"`
	// The total number of engines used to analyze this file.
	ScannedWith *int64 `json:"scanned_with,omitempty"`
}

func (o *FilesInBatch) GetDataID() *string {
	if o == nil {
		return nil
	}
	return o.DataID
}

func (o *FilesInBatch) GetDetectedBy() *int64 {
	if o == nil {
		return nil
	}
	return o.DetectedBy
}

func (o *FilesInBatch) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *FilesInBatch) GetFileSize() *int64 {
	if o == nil {
		return nil
	}
	return o.FileSize
}

func (o *FilesInBatch) GetFileType() *string {
	if o == nil {
		return nil
	}
	return o.FileType
}

func (o *FilesInBatch) GetFileTypeDescription() *string {
	if o == nil {
		return nil
	}
	return o.FileTypeDescription
}

func (o *FilesInBatch) GetProcessInfo() *BatchResponseClosedSchemasProcessInfo {
	if o == nil {
		return nil
	}
	return o.ProcessInfo
}

func (o *FilesInBatch) GetProgressPercentage() *int64 {
	if o == nil {
		return nil
	}
	return o.ProgressPercentage
}

func (o *FilesInBatch) GetScanAllResultA() *BatchResponseClosedSchemasScanAllResultA {
	if o == nil {
		return nil
	}
	return o.ScanAllResultA
}

func (o *FilesInBatch) GetScanAllResultI() *BatchResponseClosedSchemasScanAllResultI {
	if o == nil {
		return nil
	}
	return o.ScanAllResultI
}

func (o *FilesInBatch) GetScannedWith() *int64 {
	if o == nil {
		return nil
	}
	return o.ScannedWith
}

// BatchFiles - Information about the files included in this batch.
type BatchFiles struct {
	// How many files/entries in the batch.
	BatchCount *int64 `json:"batch_count,omitempty"`
	// The list of files in this batch.
	FilesInBatch []FilesInBatch `json:"files_in_batch,omitempty"`
	// The starting index in the batch. Used for pagination.
	FirstIndex *int64 `json:"first_index,omitempty"`
	// The number of entries per page.
	PageSize *int64 `json:"page_size,omitempty"`
}

func (o *BatchFiles) GetBatchCount() *int64 {
	if o == nil {
		return nil
	}
	return o.BatchCount
}

func (o *BatchFiles) GetFilesInBatch() []FilesInBatch {
	if o == nil {
		return nil
	}
	return o.FilesInBatch
}

func (o *BatchFiles) GetFirstIndex() *int64 {
	if o == nil {
		return nil
	}
	return o.FirstIndex
}

func (o *BatchFiles) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

// BatchResponseClosedProcessInfo - Overall batch process result
type BatchResponseClosedProcessInfo struct {
	// Provides the reason why the file is blocked (if so).
	BlockedReason *string `json:"blocked_reason,omitempty"`
	// Indicates if the input file's detected type was configured to skip scanning.
	FileTypeSkippedScan *bool `json:"file_type_skipped_scan,omitempty"`
	// The used rule name.
	Profile *string `json:"profile,omitempty"`
	// The final result of processing the file (Allowed / Blocked / Processing).
	Result *string `json:"result,omitempty"`
	// Identifier for the REST Client that calls the API.
	UserAgent *string `json:"user_agent,omitempty"`
	// User identifier who submitted scan request earlier.
	Username *string `json:"username,omitempty"`
}

func (o *BatchResponseClosedProcessInfo) GetBlockedReason() *string {
	if o == nil {
		return nil
	}
	return o.BlockedReason
}

func (o *BatchResponseClosedProcessInfo) GetFileTypeSkippedScan() *bool {
	if o == nil {
		return nil
	}
	return o.FileTypeSkippedScan
}

func (o *BatchResponseClosedProcessInfo) GetProfile() *string {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *BatchResponseClosedProcessInfo) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *BatchResponseClosedProcessInfo) GetUserAgent() *string {
	if o == nil {
		return nil
	}
	return o.UserAgent
}

func (o *BatchResponseClosedProcessInfo) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// BatchResponseClosedScanAllResultA - Processing result and its index
// * `No Threat Detected`: 0
// * `Infected`: 1
// * `Suspicious`: 2
// * `Failed`: 3
// * `Whitelisted`: 7
// * `Blacklisted`: 8
// * `Exceeded Archive Depth`: 9
// * `Not Scanned`: 10
// * `Encrypted Archive`: 12
// * `Exceeded Archive Size`: 13
// * `Exceeded Archive File Number`: 14
// * `Password Protected Document`: 15
// * `Exceeded Archive Timeout`: 16
// * `Mismatch`: 17
// * `Potentially Vulnerable File`: 18
// * `Cancelled`: 19
// * `Sensitive Data Found`: 20
// * `Yara Rule Matched`: 21
// * `Potentially Unwanted`: 22
// * `Unsupported File Type`: 23
// * `In Progress`: 255
type BatchResponseClosedScanAllResultA string

const (
	BatchResponseClosedScanAllResultANoThreatDetected          BatchResponseClosedScanAllResultA = "No Threat Detected"
	BatchResponseClosedScanAllResultAInfected                  BatchResponseClosedScanAllResultA = "Infected"
	BatchResponseClosedScanAllResultASuspicious                BatchResponseClosedScanAllResultA = "Suspicious"
	BatchResponseClosedScanAllResultAFailed                    BatchResponseClosedScanAllResultA = "Failed"
	BatchResponseClosedScanAllResultAWhitelisted               BatchResponseClosedScanAllResultA = "Whitelisted"
	BatchResponseClosedScanAllResultABlacklisted               BatchResponseClosedScanAllResultA = "Blacklisted"
	BatchResponseClosedScanAllResultAExceededArchiveDepth      BatchResponseClosedScanAllResultA = "Exceeded Archive Depth"
	BatchResponseClosedScanAllResultANotScanned                BatchResponseClosedScanAllResultA = "Not Scanned"
	BatchResponseClosedScanAllResultAEncryptedArchive          BatchResponseClosedScanAllResultA = "Encrypted Archive"
	BatchResponseClosedScanAllResultAExceededArchiveSize       BatchResponseClosedScanAllResultA = "Exceeded Archive Size"
	BatchResponseClosedScanAllResultAExceededArchiveFileNumber BatchResponseClosedScanAllResultA = "Exceeded Archive File Number"
	BatchResponseClosedScanAllResultAPasswordProtectedDocument BatchResponseClosedScanAllResultA = "Password Protected Document"
	BatchResponseClosedScanAllResultAExceededArchiveTimeout    BatchResponseClosedScanAllResultA = "Exceeded Archive Timeout"
	BatchResponseClosedScanAllResultAMismatch                  BatchResponseClosedScanAllResultA = "Mismatch"
	BatchResponseClosedScanAllResultAPotentiallyVulnerableFile BatchResponseClosedScanAllResultA = "Potentially Vulnerable File"
	BatchResponseClosedScanAllResultACancelled                 BatchResponseClosedScanAllResultA = "Cancelled"
	BatchResponseClosedScanAllResultASensitiveDataFound        BatchResponseClosedScanAllResultA = "Sensitive Data Found"
	BatchResponseClosedScanAllResultAYaraRuleMatched           BatchResponseClosedScanAllResultA = "Yara Rule Matched"
	BatchResponseClosedScanAllResultAPotentiallyUnwanted       BatchResponseClosedScanAllResultA = "Potentially Unwanted"
	BatchResponseClosedScanAllResultAUnsupportedFileType       BatchResponseClosedScanAllResultA = "Unsupported File Type"
	BatchResponseClosedScanAllResultAInProgress                BatchResponseClosedScanAllResultA = "In Progress"
)

func (e BatchResponseClosedScanAllResultA) ToPointer() *BatchResponseClosedScanAllResultA {
	return &e
}

func (e *BatchResponseClosedScanAllResultA) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No Threat Detected":
		fallthrough
	case "Infected":
		fallthrough
	case "Suspicious":
		fallthrough
	case "Failed":
		fallthrough
	case "Whitelisted":
		fallthrough
	case "Blacklisted":
		fallthrough
	case "Exceeded Archive Depth":
		fallthrough
	case "Not Scanned":
		fallthrough
	case "Encrypted Archive":
		fallthrough
	case "Exceeded Archive Size":
		fallthrough
	case "Exceeded Archive File Number":
		fallthrough
	case "Password Protected Document":
		fallthrough
	case "Exceeded Archive Timeout":
		fallthrough
	case "Mismatch":
		fallthrough
	case "Potentially Vulnerable File":
		fallthrough
	case "Cancelled":
		fallthrough
	case "Sensitive Data Found":
		fallthrough
	case "Yara Rule Matched":
		fallthrough
	case "Potentially Unwanted":
		fallthrough
	case "Unsupported File Type":
		fallthrough
	case "In Progress":
		*e = BatchResponseClosedScanAllResultA(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseClosedScanAllResultA: %v", v)
	}
}

// BatchResponseClosedScanAllResultI - Scan result as index in the Processing Results table above
type BatchResponseClosedScanAllResultI int64

const (
	BatchResponseClosedScanAllResultIZero                   BatchResponseClosedScanAllResultI = 0
	BatchResponseClosedScanAllResultIOne                    BatchResponseClosedScanAllResultI = 1
	BatchResponseClosedScanAllResultITwo                    BatchResponseClosedScanAllResultI = 2
	BatchResponseClosedScanAllResultIThree                  BatchResponseClosedScanAllResultI = 3
	BatchResponseClosedScanAllResultISeven                  BatchResponseClosedScanAllResultI = 7
	BatchResponseClosedScanAllResultIEight                  BatchResponseClosedScanAllResultI = 8
	BatchResponseClosedScanAllResultINine                   BatchResponseClosedScanAllResultI = 9
	BatchResponseClosedScanAllResultITen                    BatchResponseClosedScanAllResultI = 10
	BatchResponseClosedScanAllResultITwelve                 BatchResponseClosedScanAllResultI = 12
	BatchResponseClosedScanAllResultIThirteen               BatchResponseClosedScanAllResultI = 13
	BatchResponseClosedScanAllResultIFourteen               BatchResponseClosedScanAllResultI = 14
	BatchResponseClosedScanAllResultIFifteen                BatchResponseClosedScanAllResultI = 15
	BatchResponseClosedScanAllResultISixteen                BatchResponseClosedScanAllResultI = 16
	BatchResponseClosedScanAllResultISeventeen              BatchResponseClosedScanAllResultI = 17
	BatchResponseClosedScanAllResultIEighteen               BatchResponseClosedScanAllResultI = 18
	BatchResponseClosedScanAllResultINineteen               BatchResponseClosedScanAllResultI = 19
	BatchResponseClosedScanAllResultITwenty                 BatchResponseClosedScanAllResultI = 20
	BatchResponseClosedScanAllResultITwentyOne              BatchResponseClosedScanAllResultI = 21
	BatchResponseClosedScanAllResultITwentyTwo              BatchResponseClosedScanAllResultI = 22
	BatchResponseClosedScanAllResultITwentyThree            BatchResponseClosedScanAllResultI = 23
	BatchResponseClosedScanAllResultITwoHundredAndFiftyFive BatchResponseClosedScanAllResultI = 255
)

func (e BatchResponseClosedScanAllResultI) ToPointer() *BatchResponseClosedScanAllResultI {
	return &e
}

func (e *BatchResponseClosedScanAllResultI) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 7:
		fallthrough
	case 8:
		fallthrough
	case 9:
		fallthrough
	case 10:
		fallthrough
	case 12:
		fallthrough
	case 13:
		fallthrough
	case 14:
		fallthrough
	case 15:
		fallthrough
	case 16:
		fallthrough
	case 17:
		fallthrough
	case 18:
		fallthrough
	case 19:
		fallthrough
	case 20:
		fallthrough
	case 21:
		fallthrough
	case 22:
		fallthrough
	case 23:
		fallthrough
	case 255:
		*e = BatchResponseClosedScanAllResultI(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseClosedScanAllResultI: %v", v)
	}
}

// ScanResults - Metascan analysis result.
type ScanResults struct {
	// The batch unique identifer
	BatchID *string `json:"batch_id,omitempty"`
	// The overall scan result as string
	ScanAllResultA *BatchResponseClosedScanAllResultA `json:"scan_all_result_a,omitempty"`
	// The overall scan result as index in the Processing Results table.
	ScanAllResultI *BatchResponseClosedScanAllResultI `json:"scan_all_result_i,omitempty"`
	// Timestamp when the scanning process starts.
	StartTime *string `json:"start_time,omitempty"`
	// Total number of scanning engines used as part of this analysis. Not like files, batch is not processed by engine, so this value is always 0.
	TotalAvs *int64 `json:"total_avs,omitempty"`
	// Total time elapsed during scan (in milliseconds).
	TotalTime *int64 `json:"total_time,omitempty"`
}

func (o *ScanResults) GetBatchID() *string {
	if o == nil {
		return nil
	}
	return o.BatchID
}

func (o *ScanResults) GetScanAllResultA() *BatchResponseClosedScanAllResultA {
	if o == nil {
		return nil
	}
	return o.ScanAllResultA
}

func (o *ScanResults) GetScanAllResultI() *BatchResponseClosedScanAllResultI {
	if o == nil {
		return nil
	}
	return o.ScanAllResultI
}

func (o *ScanResults) GetStartTime() *string {
	if o == nil {
		return nil
	}
	return o.StartTime
}

func (o *ScanResults) GetTotalAvs() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalAvs
}

func (o *ScanResults) GetTotalTime() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalTime
}

// BatchResponseClosed - The response for a Batch status request.
type BatchResponseClosed struct {
	// Information about the files included in this batch.
	BatchFiles *BatchFiles `json:"batch_files,omitempty"`
	// The batch unique identifer
	BatchID *string `json:"batch_id,omitempty"`
	// The batch status (open/close).
	IsClosed *bool `json:"is_closed,omitempty"`
	// Overall batch process result
	ProcessInfo *BatchResponseClosedProcessInfo `json:"process_info,omitempty"`
	// Metascan analysis result.
	ScanResults *ScanResults `json:"scan_results,omitempty"`
	// Metadata submitted at batch creation.
	UserData *string `json:"user_data,omitempty"`
}

func (o *BatchResponseClosed) GetBatchFiles() *BatchFiles {
	if o == nil {
		return nil
	}
	return o.BatchFiles
}

func (o *BatchResponseClosed) GetBatchID() *string {
	if o == nil {
		return nil
	}
	return o.BatchID
}

func (o *BatchResponseClosed) GetIsClosed() *bool {
	if o == nil {
		return nil
	}
	return o.IsClosed
}

func (o *BatchResponseClosed) GetProcessInfo() *BatchResponseClosedProcessInfo {
	if o == nil {
		return nil
	}
	return o.ProcessInfo
}

func (o *BatchResponseClosed) GetScanResults() *ScanResults {
	if o == nil {
		return nil
	}
	return o.ScanResults
}

func (o *BatchResponseClosed) GetUserData() *string {
	if o == nil {
		return nil
	}
	return o.UserData
}
