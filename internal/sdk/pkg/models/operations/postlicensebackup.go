// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type PostLicenseBackupRequest struct {
	// Only required when registering hot-backup instance in offline environment
	RequestBody *string `request:"mediaType=application/octet-stream"`
	// Activation key
	ActivationKey *string `header:"style=simple,explode=false,name=activation-key"`
	// Deployment ID of the main MetaDefender Core which is currently working, and you want to backup it.
	//
	ActiveDeploymentID *string `header:"style=simple,explode=false,name=active-deployment-id"`
	// Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.
	//
	Apikey string `header:"style=simple,explode=false,name=apikey"`
}

func (o *PostLicenseBackupRequest) GetRequestBody() *string {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *PostLicenseBackupRequest) GetActivationKey() *string {
	if o == nil {
		return nil
	}
	return o.ActivationKey
}

func (o *PostLicenseBackupRequest) GetActiveDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.ActiveDeploymentID
}

func (o *PostLicenseBackupRequest) GetApikey() string {
	if o == nil {
		return ""
	}
	return o.Apikey
}

// PostLicenseBackupAdminResponse500ResponseBody - Unexpected event on server
type PostLicenseBackupAdminResponse500ResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *PostLicenseBackupAdminResponse500ResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// PostLicenseBackupAdminResponseResponseBody - Invalid user information or Not Allowed
type PostLicenseBackupAdminResponseResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *PostLicenseBackupAdminResponseResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// PostLicenseBackupAdminResponseBody - Bad Request (e.g. invalid header, apikey is missing or invalid).
type PostLicenseBackupAdminResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *PostLicenseBackupAdminResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// PostLicenseBackupResponseBody - Request successfully
type PostLicenseBackupResponseBody struct {
	// Successful message
	Success *string `json:"success,omitempty"`
}

func (o *PostLicenseBackupResponseBody) GetSuccess() *string {
	if o == nil {
		return nil
	}
	return o.Success
}

type PostLicenseBackupResponse struct {
	// Request successfully
	TwoHundredApplicationJSONObject *PostLicenseBackupResponseBody
	// Bad Request (e.g. invalid header, apikey is missing or invalid).
	FourHundredApplicationJSONObject *PostLicenseBackupAdminResponseBody
	// Invalid user information or Not Allowed
	FourHundredAndThreeApplicationJSONObject *PostLicenseBackupAdminResponseResponseBody
	// Unexpected event on server
	FiveHundredApplicationJSONObject *PostLicenseBackupAdminResponse500ResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *PostLicenseBackupResponse) GetTwoHundredApplicationJSONObject() *PostLicenseBackupResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *PostLicenseBackupResponse) GetFourHundredApplicationJSONObject() *PostLicenseBackupAdminResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *PostLicenseBackupResponse) GetFourHundredAndThreeApplicationJSONObject() *PostLicenseBackupAdminResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *PostLicenseBackupResponse) GetFiveHundredApplicationJSONObject() *PostLicenseBackupAdminResponse500ResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredApplicationJSONObject
}

func (o *PostLicenseBackupResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PostLicenseBackupResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PostLicenseBackupResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
