// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Metadefender/internal/sdk/pkg/models/shared"
	"Metadefender/internal/sdk/pkg/utils"
	"errors"
	"net/http"
)

type ConfigPostProxyTestconnectionRequest struct {
	PostProxyRequest *shared.PostProxyRequest `request:"mediaType=application/json"`
	// Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.
	//
	Apikey string `header:"style=simple,explode=false,name=apikey"`
}

func (o *ConfigPostProxyTestconnectionRequest) GetPostProxyRequest() *shared.PostProxyRequest {
	if o == nil {
		return nil
	}
	return o.PostProxyRequest
}

func (o *ConfigPostProxyTestconnectionRequest) GetApikey() string {
	if o == nil {
		return ""
	}
	return o.Apikey
}

type ConfigPostProxyTestconnection400ApplicationJSONType string

const (
	ConfigPostProxyTestconnection400ApplicationJSONTypeMissingPort                 ConfigPostProxyTestconnection400ApplicationJSONType = "MissingPort"
	ConfigPostProxyTestconnection400ApplicationJSONTypeMissingServerAddress        ConfigPostProxyTestconnection400ApplicationJSONType = "MissingServerAddress"
	ConfigPostProxyTestconnection400ApplicationJSONTypeProxyRequiresAuthentication ConfigPostProxyTestconnection400ApplicationJSONType = "ProxyRequiresAuthentication"
)

type ConfigPostProxyTestconnection400ApplicationJSON struct {
	MissingPort                 *shared.MissingPort
	MissingServerAddress        *shared.MissingServerAddress
	ProxyRequiresAuthentication *shared.ProxyRequiresAuthentication

	Type ConfigPostProxyTestconnection400ApplicationJSONType
}

func CreateConfigPostProxyTestconnection400ApplicationJSONMissingPort(missingPort shared.MissingPort) ConfigPostProxyTestconnection400ApplicationJSON {
	typ := ConfigPostProxyTestconnection400ApplicationJSONTypeMissingPort

	return ConfigPostProxyTestconnection400ApplicationJSON{
		MissingPort: &missingPort,
		Type:        typ,
	}
}

func CreateConfigPostProxyTestconnection400ApplicationJSONMissingServerAddress(missingServerAddress shared.MissingServerAddress) ConfigPostProxyTestconnection400ApplicationJSON {
	typ := ConfigPostProxyTestconnection400ApplicationJSONTypeMissingServerAddress

	return ConfigPostProxyTestconnection400ApplicationJSON{
		MissingServerAddress: &missingServerAddress,
		Type:                 typ,
	}
}

func CreateConfigPostProxyTestconnection400ApplicationJSONProxyRequiresAuthentication(proxyRequiresAuthentication shared.ProxyRequiresAuthentication) ConfigPostProxyTestconnection400ApplicationJSON {
	typ := ConfigPostProxyTestconnection400ApplicationJSONTypeProxyRequiresAuthentication

	return ConfigPostProxyTestconnection400ApplicationJSON{
		ProxyRequiresAuthentication: &proxyRequiresAuthentication,
		Type:                        typ,
	}
}

func (u *ConfigPostProxyTestconnection400ApplicationJSON) UnmarshalJSON(data []byte) error {

	missingPort := new(shared.MissingPort)
	if err := utils.UnmarshalJSON(data, &missingPort, "", true, true); err == nil {
		u.MissingPort = missingPort
		u.Type = ConfigPostProxyTestconnection400ApplicationJSONTypeMissingPort
		return nil
	}

	missingServerAddress := new(shared.MissingServerAddress)
	if err := utils.UnmarshalJSON(data, &missingServerAddress, "", true, true); err == nil {
		u.MissingServerAddress = missingServerAddress
		u.Type = ConfigPostProxyTestconnection400ApplicationJSONTypeMissingServerAddress
		return nil
	}

	proxyRequiresAuthentication := new(shared.ProxyRequiresAuthentication)
	if err := utils.UnmarshalJSON(data, &proxyRequiresAuthentication, "", true, true); err == nil {
		u.ProxyRequiresAuthentication = proxyRequiresAuthentication
		u.Type = ConfigPostProxyTestconnection400ApplicationJSONTypeProxyRequiresAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ConfigPostProxyTestconnection400ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.MissingPort != nil {
		return utils.MarshalJSON(u.MissingPort, "", true)
	}

	if u.MissingServerAddress != nil {
		return utils.MarshalJSON(u.MissingServerAddress, "", true)
	}

	if u.ProxyRequiresAuthentication != nil {
		return utils.MarshalJSON(u.ProxyRequiresAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// ConfigPostProxyTestconnection200ApplicationJSON - Request processed successfully
type ConfigPostProxyTestconnection200ApplicationJSON struct {
	Result *string `json:"result,omitempty"`
}

func (o *ConfigPostProxyTestconnection200ApplicationJSON) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

type ConfigPostProxyTestconnectionResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Request processed successfully
	ConfigPostProxyTestconnection200ApplicationJSONObject *ConfigPostProxyTestconnection200ApplicationJSON
	// Bad Request (e.g. invalid header, apikey is missing or invalid).
	ConfigPostProxyTestconnection400ApplicationJSONOneOf *ConfigPostProxyTestconnection400ApplicationJSON
}

func (o *ConfigPostProxyTestconnectionResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ConfigPostProxyTestconnectionResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ConfigPostProxyTestconnectionResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ConfigPostProxyTestconnectionResponse) GetConfigPostProxyTestconnection200ApplicationJSONObject() *ConfigPostProxyTestconnection200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.ConfigPostProxyTestconnection200ApplicationJSONObject
}

func (o *ConfigPostProxyTestconnectionResponse) GetConfigPostProxyTestconnection400ApplicationJSONOneOf() *ConfigPostProxyTestconnection400ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.ConfigPostProxyTestconnection400ApplicationJSONOneOf
}
