// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// HeaderType - Unpin engine or database to applying automatic updates on it.
// (If it is not defined both engine and database will be unpinned.)
type HeaderType string

const (
	HeaderTypeEngine   HeaderType = "engine"
	HeaderTypeDatabase HeaderType = "database"
)

func (e HeaderType) ToPointer() *HeaderType {
	return &e
}

func (e *HeaderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "engine":
		fallthrough
	case "database":
		*e = HeaderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HeaderType: %v", v)
	}
}

type EngineUnpinRequest struct {
	// Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.
	//
	Apikey string `header:"style=simple,explode=false,name=apikey"`
	// The unique engine identifier
	EngineID string `pathParam:"style=simple,explode=false,name=engineId"`
	// Unpin engine or database to applying automatic updates on it.
	// (If it is not defined both engine and database will be unpinned.)
	Type *HeaderType `header:"style=simple,explode=false,name=type"`
}

func (o *EngineUnpinRequest) GetApikey() string {
	if o == nil {
		return ""
	}
	return o.Apikey
}

func (o *EngineUnpinRequest) GetEngineID() string {
	if o == nil {
		return ""
	}
	return o.EngineID
}

func (o *EngineUnpinRequest) GetType() *HeaderType {
	if o == nil {
		return nil
	}
	return o.Type
}

// EngineUnpinEnginesResponse500ResponseBody - Unexpected event on server
type EngineUnpinEnginesResponse500ResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *EngineUnpinEnginesResponse500ResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// EngineUnpinEnginesResponse405ResponseBody - The user has no rights for this operation.
type EngineUnpinEnginesResponse405ResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *EngineUnpinEnginesResponse405ResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// EngineUnpinEnginesResponseResponseBody - Invalid user information or Not Allowed
type EngineUnpinEnginesResponseResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *EngineUnpinEnginesResponseResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// EngineUnpinEnginesResponseBody - Bad Request (e.g. invalid header, apikey is missing or invalid).
type EngineUnpinEnginesResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *EngineUnpinEnginesResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

type EngineUnpinResult string

const (
	EngineUnpinResultEngineIsUnpinned                 EngineUnpinResult = "Engine is unpinned"
	EngineUnpinResultDatabaseIsUnpinned               EngineUnpinResult = "Database is unpinned"
	EngineUnpinResultBothEngineAndDatabaseAreUnpinned EngineUnpinResult = "Both engine and database are unpinned"
)

func (e EngineUnpinResult) ToPointer() *EngineUnpinResult {
	return &e
}

func (e *EngineUnpinResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Engine is unpinned":
		fallthrough
	case "Database is unpinned":
		fallthrough
	case "Both engine and database are unpinned":
		*e = EngineUnpinResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EngineUnpinResult: %v", v)
	}
}

// EngineUnpinResponseBody - Request processed successfully
type EngineUnpinResponseBody struct {
	Result *EngineUnpinResult `json:"result,omitempty"`
}

func (o *EngineUnpinResponseBody) GetResult() *EngineUnpinResult {
	if o == nil {
		return nil
	}
	return o.Result
}

type EngineUnpinResponse struct {
	// Request processed successfully
	TwoHundredApplicationJSONObject *EngineUnpinResponseBody
	// Bad Request (e.g. invalid header, apikey is missing or invalid).
	FourHundredApplicationJSONObject *EngineUnpinEnginesResponseBody
	// Invalid user information or Not Allowed
	FourHundredAndThreeApplicationJSONObject *EngineUnpinEnginesResponseResponseBody
	// The user has no rights for this operation.
	FourHundredAndFiveApplicationJSONObject *EngineUnpinEnginesResponse405ResponseBody
	// Unexpected event on server
	FiveHundredApplicationJSONObject *EngineUnpinEnginesResponse500ResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *EngineUnpinResponse) GetTwoHundredApplicationJSONObject() *EngineUnpinResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *EngineUnpinResponse) GetFourHundredApplicationJSONObject() *EngineUnpinEnginesResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *EngineUnpinResponse) GetFourHundredAndThreeApplicationJSONObject() *EngineUnpinEnginesResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *EngineUnpinResponse) GetFourHundredAndFiveApplicationJSONObject() *EngineUnpinEnginesResponse405ResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFiveApplicationJSONObject
}

func (o *EngineUnpinResponse) GetFiveHundredApplicationJSONObject() *EngineUnpinEnginesResponse500ResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredApplicationJSONObject
}

func (o *EngineUnpinResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *EngineUnpinResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *EngineUnpinResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
