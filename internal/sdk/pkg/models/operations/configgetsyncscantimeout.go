// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Metadefender/internal/sdk/pkg/models/shared"
	"Metadefender/internal/sdk/pkg/utils"
	"errors"
	"net/http"
)

type ConfigGetSyncScanTimeoutRequest struct {
	// Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.
	//
	Apikey string `header:"style=simple,explode=false,name=apikey"`
}

func (o *ConfigGetSyncScanTimeoutRequest) GetApikey() string {
	if o == nil {
		return ""
	}
	return o.Apikey
}

type ConfigGetSyncScanTimeout500ApplicationJSONType string

const (
	ConfigGetSyncScanTimeout500ApplicationJSONTypeErrorWhileRequestingConfig ConfigGetSyncScanTimeout500ApplicationJSONType = "ErrorWhileRequestingConfig"
	ConfigGetSyncScanTimeout500ApplicationJSONTypeInternalServerError        ConfigGetSyncScanTimeout500ApplicationJSONType = "InternalServerError"
)

type ConfigGetSyncScanTimeout500ApplicationJSON struct {
	ErrorWhileRequestingConfig *shared.ErrorWhileRequestingConfig
	InternalServerError        *shared.InternalServerError

	Type ConfigGetSyncScanTimeout500ApplicationJSONType
}

func CreateConfigGetSyncScanTimeout500ApplicationJSONErrorWhileRequestingConfig(errorWhileRequestingConfig shared.ErrorWhileRequestingConfig) ConfigGetSyncScanTimeout500ApplicationJSON {
	typ := ConfigGetSyncScanTimeout500ApplicationJSONTypeErrorWhileRequestingConfig

	return ConfigGetSyncScanTimeout500ApplicationJSON{
		ErrorWhileRequestingConfig: &errorWhileRequestingConfig,
		Type:                       typ,
	}
}

func CreateConfigGetSyncScanTimeout500ApplicationJSONInternalServerError(internalServerError shared.InternalServerError) ConfigGetSyncScanTimeout500ApplicationJSON {
	typ := ConfigGetSyncScanTimeout500ApplicationJSONTypeInternalServerError

	return ConfigGetSyncScanTimeout500ApplicationJSON{
		InternalServerError: &internalServerError,
		Type:                typ,
	}
}

func (u *ConfigGetSyncScanTimeout500ApplicationJSON) UnmarshalJSON(data []byte) error {

	errorWhileRequestingConfig := new(shared.ErrorWhileRequestingConfig)
	if err := utils.UnmarshalJSON(data, &errorWhileRequestingConfig, "", true, true); err == nil {
		u.ErrorWhileRequestingConfig = errorWhileRequestingConfig
		u.Type = ConfigGetSyncScanTimeout500ApplicationJSONTypeErrorWhileRequestingConfig
		return nil
	}

	internalServerError := new(shared.InternalServerError)
	if err := utils.UnmarshalJSON(data, &internalServerError, "", true, true); err == nil {
		u.InternalServerError = internalServerError
		u.Type = ConfigGetSyncScanTimeout500ApplicationJSONTypeInternalServerError
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ConfigGetSyncScanTimeout500ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ErrorWhileRequestingConfig != nil {
		return utils.MarshalJSON(u.ErrorWhileRequestingConfig, "", true)
	}

	if u.InternalServerError != nil {
		return utils.MarshalJSON(u.InternalServerError, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// ConfigGetSyncScanTimeout405ApplicationJSON - The user has no rights for this operation.
type ConfigGetSyncScanTimeout405ApplicationJSON struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *ConfigGetSyncScanTimeout405ApplicationJSON) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// ConfigGetSyncScanTimeout403ApplicationJSON - Invalid user information or Not Allowed
type ConfigGetSyncScanTimeout403ApplicationJSON struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *ConfigGetSyncScanTimeout403ApplicationJSON) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

type ConfigGetSyncScanTimeoutResponse struct {
	// Request processed successfully.
	AdminConfigFileSync *shared.AdminConfigFileSync
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Invalid user information or Not Allowed
	ConfigGetSyncScanTimeout403ApplicationJSONObject *ConfigGetSyncScanTimeout403ApplicationJSON
	// The user has no rights for this operation.
	ConfigGetSyncScanTimeout405ApplicationJSONObject *ConfigGetSyncScanTimeout405ApplicationJSON
	// Error while requesting configuration.
	ConfigGetSyncScanTimeout500ApplicationJSONOneOf *ConfigGetSyncScanTimeout500ApplicationJSON
}

func (o *ConfigGetSyncScanTimeoutResponse) GetAdminConfigFileSync() *shared.AdminConfigFileSync {
	if o == nil {
		return nil
	}
	return o.AdminConfigFileSync
}

func (o *ConfigGetSyncScanTimeoutResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ConfigGetSyncScanTimeoutResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ConfigGetSyncScanTimeoutResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ConfigGetSyncScanTimeoutResponse) GetConfigGetSyncScanTimeout403ApplicationJSONObject() *ConfigGetSyncScanTimeout403ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.ConfigGetSyncScanTimeout403ApplicationJSONObject
}

func (o *ConfigGetSyncScanTimeoutResponse) GetConfigGetSyncScanTimeout405ApplicationJSONObject() *ConfigGetSyncScanTimeout405ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.ConfigGetSyncScanTimeout405ApplicationJSONObject
}

func (o *ConfigGetSyncScanTimeoutResponse) GetConfigGetSyncScanTimeout500ApplicationJSONOneOf() *ConfigGetSyncScanTimeout500ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.ConfigGetSyncScanTimeout500ApplicationJSONOneOf
}
