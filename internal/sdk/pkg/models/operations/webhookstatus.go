// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type WebhookStatusRequest struct {
	// Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.
	//
	Apikey *string `header:"style=simple,explode=false,name=apikey"`
	// Either `data_id` or `batch_id`.
	DataID string `pathParam:"style=simple,explode=false,name=data_id"`
}

// WebhookStatus500ApplicationJSON - Unexpected event on server
type WebhookStatus500ApplicationJSON struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

// WebhookStatus404ApplicationJSON - Requests resource was not found.
type WebhookStatus404ApplicationJSON struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

// WebhookStatus403ApplicationJSON - Invalid user information or Not Allowed
type WebhookStatus403ApplicationJSON struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

// WebhookStatus400ApplicationJSON - Bad Request (e.g. invalid header, apikey is missing or invalid).
type WebhookStatus400ApplicationJSON struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

// WebhookStatus200ApplicationJSON - Webhooks status is fetched successfully.
type WebhookStatus200ApplicationJSON struct {
	// The file submission identifier
	DataID *string `json:"data_id,omitempty"`
	// A timestamp when the request has been made.
	RequestTime *string `json:"request_time,omitempty"`
	// What was the returned HTTP status code.
	//   * `200` - Callback was sent successfully
	//   * `403` -	ContentAccessDenied. The access to the remote content was denied (similar to HTTP(S) error 401).
	//   * `404` -	ContentNotFoundError. The remote content was not found at the server (similar to HTTP(S) error 404).
	//   * `408` - TimeoutError. The connection to the remote server timed out.
	//   * `503` - HostNotFoundError. The remote host name was not found (invalid hostname).
	//   * `520` - RemoteHostClosedError. The remote server closed the connection prematurely, before the entire reply was received and processed.
	//   * `444` - Other error types. Since MetaDefender Core 4.21.2, warning-level messages will be logged in case of Webhook failures. Check the following for detailed error descriptions.
	//     <details>
	//     <ul>
	//     <li><strong>1</strong> - the remote server refused the connection (the server is not accepting requests).</li>
	//     <li><strong>2</strong> - the remote server closed the connection prematurely, before the entire reply was received and processed.</li>
	//     <li><strong>3</strong> - the remote host name was not found (invalid hostname).</li>
	//     <li><strong>4</strong> - the connection to the remote server timed out.</li>
	//     <li><strong>5</strong> - operation canceled before it was finished.</li>
	//     <li><strong>6</strong> - the SSL/TLS handshake failed and the encrypted channel could not be established.</li>
	//     <li><strong>7</strong> - temporary network failure.</li>
	//     <li><strong>8</strong> - the connection was broken due to disconnection from the network or failure to start the network.</li>
	//     <li><strong>9</strong> - the background request is not currently allowed due to platform policy.</li>
	//     <li><strong>10</strong> - while following redirects, the maximum limit was reached.</li>
	//     <li><strong>11</strong> - while following redirects, a redirect from a encrypted protocol (https) to an unencrypted one (http) is detected.</li>
	//     <li><strong>99</strong> - an unknown network-related error was detected.</li>
	//     <li><strong>101</strong> - the connection to the proxy server was refused (the proxy server is not accepting requests).</li>
	//     <li><strong>102</strong> - the proxy server closed the connection prematurely, before the entire reply was received and processed.</li>
	//     <li><strong>103</strong> - the proxy host name was not found (invalid proxy hostname).</li>
	//     <li><strong>104</strong> - the connection to the proxy timed out or the proxy did not reply in time to the request sent.</li>
	//     <li><strong>105</strong> - the proxy requires authentication but did not accept any offered credentials (if any).</li>
	//     <li><strong>199</strong> - an unknown proxy-related error was detected.</li>
	//     <li><strong>201</strong> - the access to the remote content was denied.</li>
	//     <li><strong>202</strong> - the operation requested on the remote content is not permitted.</li>
	//     <li><strong>203</strong> - the remote content was not found at the server.</li>
	//     <li><strong>204</strong> - the remote server requires authentication to serve the content but the credentials provided were not accepted (if any).</li>
	//     <li><strong>205</strong> - the request needed to be sent again, but this failed for example because the upload data could not be read a second time.</li>
	//     <li><strong>206</strong> - the request could not be completed due to a conflict with the current state of the resource.</li>
	//     <li><strong>207</strong> - the requested resource is no longer available at the server.</li>
	//     <li><strong>299</strong> - an unknown error related to the remote content was detected.</li>
	//     <li><strong>301</strong> - the protocol is unknown.</li>
	//     <li><strong>302</strong> - the requested operation is invalid for this protocol.</li>
	//     <li><strong>399</strong> - a breakdown in protocol was detected (parsing error, invalid or unexpected responses, etc.).</li>
	//     <li><strong>401</strong> - the server encountered an unexpected condition which prevented it from fulfilling the request.</li>
	//     <li><strong>402</strong> - the server does not support the functionality required to fulfill the request.</li>
	//     <li><strong>403</strong> - the server is unable to handle the request at this time.</li>
	//     <li><strong>499</strong> - an unknown error related to the server response was detected.</li>
	//     </ul>
	//     </details>
	//
	StatusCode *int64 `json:"status_code,omitempty"`
	// What was the called URL (should match the `callbackurl` header).
	URL *string `json:"url,omitempty"`
}

type WebhookStatusResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Webhooks status is fetched successfully.
	WebhookStatus200ApplicationJSONObject *WebhookStatus200ApplicationJSON
	// Bad Request (e.g. invalid header, apikey is missing or invalid).
	WebhookStatus400ApplicationJSONObject *WebhookStatus400ApplicationJSON
	// Invalid user information or Not Allowed
	WebhookStatus403ApplicationJSONObject *WebhookStatus403ApplicationJSON
	// Requests resource was not found.
	WebhookStatus404ApplicationJSONObject *WebhookStatus404ApplicationJSON
	// Unexpected event on server
	WebhookStatus500ApplicationJSONObject *WebhookStatus500ApplicationJSON
}
