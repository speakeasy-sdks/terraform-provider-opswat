// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Metadefender/internal/sdk/pkg/models/shared"
	"Metadefender/internal/sdk/pkg/utils"
	"errors"
	"net/http"
)

type ConfigUpdateProxyRequest struct {
	ProxyListRequestBody *shared.ProxyListRequestBody `request:"mediaType=application/json"`
	// Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.
	//
	Apikey string `header:"style=simple,explode=false,name=apikey"`
}

func (o *ConfigUpdateProxyRequest) GetProxyListRequestBody() *shared.ProxyListRequestBody {
	if o == nil {
		return nil
	}
	return o.ProxyListRequestBody
}

func (o *ConfigUpdateProxyRequest) GetApikey() string {
	if o == nil {
		return ""
	}
	return o.Apikey
}

type ConfigUpdateProxy400ApplicationJSONType string

const (
	ConfigUpdateProxy400ApplicationJSONTypeMissingEnabledField         ConfigUpdateProxy400ApplicationJSONType = "MissingEnabledField"
	ConfigUpdateProxy400ApplicationJSONTypeErrorWhileParsingInputJSON  ConfigUpdateProxy400ApplicationJSONType = "ErrorWhileParsingInputJson"
	ConfigUpdateProxy400ApplicationJSONTypeMissingPort                 ConfigUpdateProxy400ApplicationJSONType = "MissingPort"
	ConfigUpdateProxy400ApplicationJSONTypeMissingServerAddress        ConfigUpdateProxy400ApplicationJSONType = "MissingServerAddress"
	ConfigUpdateProxy400ApplicationJSONTypeProxyRequiresAuthentication ConfigUpdateProxy400ApplicationJSONType = "ProxyRequiresAuthentication"
)

type ConfigUpdateProxy400ApplicationJSON struct {
	MissingEnabledField         *shared.MissingEnabledField
	ErrorWhileParsingInputJSON  *shared.ErrorWhileParsingInputJSON
	MissingPort                 *shared.MissingPort
	MissingServerAddress        *shared.MissingServerAddress
	ProxyRequiresAuthentication *shared.ProxyRequiresAuthentication

	Type ConfigUpdateProxy400ApplicationJSONType
}

func CreateConfigUpdateProxy400ApplicationJSONMissingEnabledField(missingEnabledField shared.MissingEnabledField) ConfigUpdateProxy400ApplicationJSON {
	typ := ConfigUpdateProxy400ApplicationJSONTypeMissingEnabledField

	return ConfigUpdateProxy400ApplicationJSON{
		MissingEnabledField: &missingEnabledField,
		Type:                typ,
	}
}

func CreateConfigUpdateProxy400ApplicationJSONErrorWhileParsingInputJSON(errorWhileParsingInputJSON shared.ErrorWhileParsingInputJSON) ConfigUpdateProxy400ApplicationJSON {
	typ := ConfigUpdateProxy400ApplicationJSONTypeErrorWhileParsingInputJSON

	return ConfigUpdateProxy400ApplicationJSON{
		ErrorWhileParsingInputJSON: &errorWhileParsingInputJSON,
		Type:                       typ,
	}
}

func CreateConfigUpdateProxy400ApplicationJSONMissingPort(missingPort shared.MissingPort) ConfigUpdateProxy400ApplicationJSON {
	typ := ConfigUpdateProxy400ApplicationJSONTypeMissingPort

	return ConfigUpdateProxy400ApplicationJSON{
		MissingPort: &missingPort,
		Type:        typ,
	}
}

func CreateConfigUpdateProxy400ApplicationJSONMissingServerAddress(missingServerAddress shared.MissingServerAddress) ConfigUpdateProxy400ApplicationJSON {
	typ := ConfigUpdateProxy400ApplicationJSONTypeMissingServerAddress

	return ConfigUpdateProxy400ApplicationJSON{
		MissingServerAddress: &missingServerAddress,
		Type:                 typ,
	}
}

func CreateConfigUpdateProxy400ApplicationJSONProxyRequiresAuthentication(proxyRequiresAuthentication shared.ProxyRequiresAuthentication) ConfigUpdateProxy400ApplicationJSON {
	typ := ConfigUpdateProxy400ApplicationJSONTypeProxyRequiresAuthentication

	return ConfigUpdateProxy400ApplicationJSON{
		ProxyRequiresAuthentication: &proxyRequiresAuthentication,
		Type:                        typ,
	}
}

func (u *ConfigUpdateProxy400ApplicationJSON) UnmarshalJSON(data []byte) error {

	missingEnabledField := new(shared.MissingEnabledField)
	if err := utils.UnmarshalJSON(data, &missingEnabledField, "", true, true); err == nil {
		u.MissingEnabledField = missingEnabledField
		u.Type = ConfigUpdateProxy400ApplicationJSONTypeMissingEnabledField
		return nil
	}

	errorWhileParsingInputJSON := new(shared.ErrorWhileParsingInputJSON)
	if err := utils.UnmarshalJSON(data, &errorWhileParsingInputJSON, "", true, true); err == nil {
		u.ErrorWhileParsingInputJSON = errorWhileParsingInputJSON
		u.Type = ConfigUpdateProxy400ApplicationJSONTypeErrorWhileParsingInputJSON
		return nil
	}

	missingPort := new(shared.MissingPort)
	if err := utils.UnmarshalJSON(data, &missingPort, "", true, true); err == nil {
		u.MissingPort = missingPort
		u.Type = ConfigUpdateProxy400ApplicationJSONTypeMissingPort
		return nil
	}

	missingServerAddress := new(shared.MissingServerAddress)
	if err := utils.UnmarshalJSON(data, &missingServerAddress, "", true, true); err == nil {
		u.MissingServerAddress = missingServerAddress
		u.Type = ConfigUpdateProxy400ApplicationJSONTypeMissingServerAddress
		return nil
	}

	proxyRequiresAuthentication := new(shared.ProxyRequiresAuthentication)
	if err := utils.UnmarshalJSON(data, &proxyRequiresAuthentication, "", true, true); err == nil {
		u.ProxyRequiresAuthentication = proxyRequiresAuthentication
		u.Type = ConfigUpdateProxy400ApplicationJSONTypeProxyRequiresAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ConfigUpdateProxy400ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.MissingEnabledField != nil {
		return utils.MarshalJSON(u.MissingEnabledField, "", true)
	}

	if u.ErrorWhileParsingInputJSON != nil {
		return utils.MarshalJSON(u.ErrorWhileParsingInputJSON, "", true)
	}

	if u.MissingPort != nil {
		return utils.MarshalJSON(u.MissingPort, "", true)
	}

	if u.MissingServerAddress != nil {
		return utils.MarshalJSON(u.MissingServerAddress, "", true)
	}

	if u.ProxyRequiresAuthentication != nil {
		return utils.MarshalJSON(u.ProxyRequiresAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ConfigUpdateProxyResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// A list of all proxy.
	ProxyList *shared.ProxyList
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Bad Request (e.g. invalid header, apikey is missing or invalid).
	ConfigUpdateProxy400ApplicationJSONOneOf *ConfigUpdateProxy400ApplicationJSON
}

func (o *ConfigUpdateProxyResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ConfigUpdateProxyResponse) GetProxyList() *shared.ProxyList {
	if o == nil {
		return nil
	}
	return o.ProxyList
}

func (o *ConfigUpdateProxyResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ConfigUpdateProxyResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ConfigUpdateProxyResponse) GetConfigUpdateProxy400ApplicationJSONOneOf() *ConfigUpdateProxy400ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.ConfigUpdateProxy400ApplicationJSONOneOf
}
