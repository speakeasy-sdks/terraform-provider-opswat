// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type NodesStatusRequest struct {
	// Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.
	//
	Apikey string `header:"style=simple,explode=false,name=apikey"`
}

func (o *NodesStatusRequest) GetApikey() string {
	if o == nil {
		return ""
	}
	return o.Apikey
}

// NodesStatusStatsResponseBody - The user has no rights for this operation.
type NodesStatusStatsResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *NodesStatusStatsResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// NodesStatusResponseBody - Invalid user information or Not Allowed
type NodesStatusResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *NodesStatusResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// NodesStatusEngineType - Engine's type:
//   - av
//   - archive
//   - filetype
type NodesStatusEngineType string

const (
	NodesStatusEngineTypeAv       NodesStatusEngineType = "av"
	NodesStatusEngineTypeArchive  NodesStatusEngineType = "archive"
	NodesStatusEngineTypeFiletype NodesStatusEngineType = "filetype"
)

func (e NodesStatusEngineType) ToPointer() *NodesStatusEngineType {
	return &e
}

func (e *NodesStatusEngineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "av":
		fallthrough
	case "archive":
		fallthrough
	case "filetype":
		*e = NodesStatusEngineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NodesStatusEngineType: %v", v)
	}
}

// Engines - Engine summary
type Engines struct {
	// If used by at least one engine
	Active *bool `json:"active,omitempty"`
	// The database version for this engine
	DbVer *string `json:"db_ver,omitempty"`
	// The database definition time for this engine
	DefTime *string `json:"def_time,omitempty"`
	// Engine name
	EngName *string `json:"eng_name,omitempty"`
	// Engine's version (format differs from one engine to another).
	EngVer *string `json:"eng_ver,omitempty"`
	// Engine's type:
	//   * av
	//   * archive
	//   * filetype
	//
	EngineType *NodesStatusEngineType `json:"engine_type,omitempty"`
	// Engine internal ID
	ID *string `json:"id,omitempty"`
}

func (o *Engines) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *Engines) GetDbVer() *string {
	if o == nil {
		return nil
	}
	return o.DbVer
}

func (o *Engines) GetDefTime() *string {
	if o == nil {
		return nil
	}
	return o.DefTime
}

func (o *Engines) GetEngName() *string {
	if o == nil {
		return nil
	}
	return o.EngName
}

func (o *Engines) GetEngVer() *string {
	if o == nil {
		return nil
	}
	return o.EngVer
}

func (o *Engines) GetEngineType() *NodesStatusEngineType {
	if o == nil {
		return nil
	}
	return o.EngineType
}

func (o *Engines) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type NodesStatusIssues struct {
	// Text detailing the issue.
	Description *string `json:"description,omitempty"`
	// How important is the reported issue.
	Severity *string `json:"severity,omitempty"`
}

func (o *NodesStatusIssues) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *NodesStatusIssues) GetSeverity() *string {
	if o == nil {
		return nil
	}
	return o.Severity
}

// Statuses - Node status
type Statuses struct {
	// The location of the Node. If local, is empty string.
	Address *string `json:"address,omitempty"`
	// The number of available RAM in this system.
	AvailableMem *int64 `json:"available_mem,omitempty"`
	// The number of CPU Cores allocated to this Node.
	CPUCores *int64 `json:"cpu_cores,omitempty"`
	// Summary of each engine status deployed on this Node.
	Engines []Engines `json:"engines,omitempty"`
	// Reported available disk on that Node (in bytes).
	FreeDiskSpace *int64 `json:"free_disk_space,omitempty"`
	// Node identfier
	ID *string `json:"id,omitempty"`
	// A list of all potentials problems on that Node.
	Issues []NodesStatusIssues `json:"issues,omitempty"`
	// Current CPU utilization on this Node (in percentage).
	Load *int64 `json:"load,omitempty"`
	// Current used OS
	Os *string `json:"os,omitempty"`
	// Current load on the Node, how many files are in the queue
	ScanQueue *int64 `json:"scan_queue,omitempty"`
	// The amount of disk space is allocated on this Node (in Byte).
	TotalDiskSpace *int64 `json:"total_disk_space,omitempty"`
	// How much memory is allocated on this Node (in MB).
	TotalMem *int64 `json:"total_mem,omitempty"`
	// The maximum queue size is allowed per Node.
	TotalScanQueue *int64 `json:"total_scan_queue,omitempty"`
	// How long this Node is in operation (in second).
	Uptime *int64 `json:"uptime,omitempty"`
	// Product version
	Version *string `json:"version,omitempty"`
}

func (o *Statuses) GetAddress() *string {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *Statuses) GetAvailableMem() *int64 {
	if o == nil {
		return nil
	}
	return o.AvailableMem
}

func (o *Statuses) GetCPUCores() *int64 {
	if o == nil {
		return nil
	}
	return o.CPUCores
}

func (o *Statuses) GetEngines() []Engines {
	if o == nil {
		return nil
	}
	return o.Engines
}

func (o *Statuses) GetFreeDiskSpace() *int64 {
	if o == nil {
		return nil
	}
	return o.FreeDiskSpace
}

func (o *Statuses) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Statuses) GetIssues() []NodesStatusIssues {
	if o == nil {
		return nil
	}
	return o.Issues
}

func (o *Statuses) GetLoad() *int64 {
	if o == nil {
		return nil
	}
	return o.Load
}

func (o *Statuses) GetOs() *string {
	if o == nil {
		return nil
	}
	return o.Os
}

func (o *Statuses) GetScanQueue() *int64 {
	if o == nil {
		return nil
	}
	return o.ScanQueue
}

func (o *Statuses) GetTotalDiskSpace() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalDiskSpace
}

func (o *Statuses) GetTotalMem() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalMem
}

func (o *Statuses) GetTotalScanQueue() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalScanQueue
}

func (o *Statuses) GetUptime() *int64 {
	if o == nil {
		return nil
	}
	return o.Uptime
}

func (o *Statuses) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

type NodesStatusStatsResponseResponseBody struct {
	// Configuration option if additional external nodes could be connected.
	ExternalNodesAllowed *bool `json:"external_nodes_allowed,omitempty"`
	// Remaining available slots to connect to this instance.
	MaxNodeCount *int64 `json:"max_node_count,omitempty"`
	// Array with a status for each attached node.
	Statuses []Statuses `json:"statuses,omitempty"`
}

func (o *NodesStatusStatsResponseResponseBody) GetExternalNodesAllowed() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalNodesAllowed
}

func (o *NodesStatusStatsResponseResponseBody) GetMaxNodeCount() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxNodeCount
}

func (o *NodesStatusStatsResponseResponseBody) GetStatuses() []Statuses {
	if o == nil {
		return nil
	}
	return o.Statuses
}

type NodesStatusResponse struct {
	// An array with all the engines and their details.
	TwoHundredApplicationJSONClasses []NodesStatusStatsResponseResponseBody
	// Invalid user information or Not Allowed
	FourHundredAndThreeApplicationJSONObject *NodesStatusResponseBody
	// The user has no rights for this operation.
	FourHundredAndFiveApplicationJSONObject *NodesStatusStatsResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *NodesStatusResponse) GetTwoHundredApplicationJSONClasses() []NodesStatusStatsResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONClasses
}

func (o *NodesStatusResponse) GetFourHundredAndThreeApplicationJSONObject() *NodesStatusResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *NodesStatusResponse) GetFourHundredAndFiveApplicationJSONObject() *NodesStatusStatsResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFiveApplicationJSONObject
}

func (o *NodesStatusResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *NodesStatusResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *NodesStatusResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
