// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type EnginesStatusRequest struct {
	// Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.
	//
	Apikey *string `header:"style=simple,explode=false,name=apikey"`
}

// EnginesStatus200ApplicationJSONEngineType - Engine's type:
//   - av
//   - archive
//   - filetype
type EnginesStatus200ApplicationJSONEngineType string

const (
	EnginesStatus200ApplicationJSONEngineTypeAv       EnginesStatus200ApplicationJSONEngineType = "av"
	EnginesStatus200ApplicationJSONEngineTypeArchive  EnginesStatus200ApplicationJSONEngineType = "archive"
	EnginesStatus200ApplicationJSONEngineTypeFiletype EnginesStatus200ApplicationJSONEngineType = "filetype"
)

func (e EnginesStatus200ApplicationJSONEngineType) ToPointer() *EnginesStatus200ApplicationJSONEngineType {
	return &e
}

func (e *EnginesStatus200ApplicationJSONEngineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "av":
		fallthrough
	case "archive":
		fallthrough
	case "filetype":
		*e = EnginesStatus200ApplicationJSONEngineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnginesStatus200ApplicationJSONEngineType: %v", v)
	}
}

// EnginesStatus200ApplicationJSONState - Status of the engine:
//   - downloading
//   - downloaded
//   - staging
//   - production
//   - removed
//   - temporary failed
//   - permanently failed
//   - content invalid
//   - download failed
type EnginesStatus200ApplicationJSONState string

const (
	EnginesStatus200ApplicationJSONStateDownloading       EnginesStatus200ApplicationJSONState = "downloading"
	EnginesStatus200ApplicationJSONStateDownloaded        EnginesStatus200ApplicationJSONState = "downloaded"
	EnginesStatus200ApplicationJSONStateStaging           EnginesStatus200ApplicationJSONState = "staging"
	EnginesStatus200ApplicationJSONStateProduction        EnginesStatus200ApplicationJSONState = "production"
	EnginesStatus200ApplicationJSONStateRemoved           EnginesStatus200ApplicationJSONState = "removed"
	EnginesStatus200ApplicationJSONStateTemporaryFailed   EnginesStatus200ApplicationJSONState = "temporary failed"
	EnginesStatus200ApplicationJSONStatePermanentlyFailed EnginesStatus200ApplicationJSONState = "permanently failed"
	EnginesStatus200ApplicationJSONStateContentInvalid    EnginesStatus200ApplicationJSONState = "content invalid"
	EnginesStatus200ApplicationJSONStateDownloadFailed    EnginesStatus200ApplicationJSONState = "download failed"
)

func (e EnginesStatus200ApplicationJSONState) ToPointer() *EnginesStatus200ApplicationJSONState {
	return &e
}

func (e *EnginesStatus200ApplicationJSONState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "downloading":
		fallthrough
	case "downloaded":
		fallthrough
	case "staging":
		fallthrough
	case "production":
		fallthrough
	case "removed":
		fallthrough
	case "temporary failed":
		fallthrough
	case "permanently failed":
		fallthrough
	case "content invalid":
		fallthrough
	case "download failed":
		*e = EnginesStatus200ApplicationJSONState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnginesStatus200ApplicationJSONState: %v", v)
	}
}

type EnginesStatus200ApplicationJSON struct {
	// If used by at least one engine
	Active *bool `json:"active,omitempty"`
	// The database definition time for this engine
	DefTime *string `json:"def_time,omitempty"`
	// The percentage progress of download
	DownloadProgress *int64 `json:"download_progress,omitempty"`
	// When this engine downloaded from the update server.
	DownloadTime *string `json:"download_time,omitempty"`
	// Engine internal ID
	EngID *string `json:"eng_id,omitempty"`
	// Engine name
	EngName *string `json:"eng_name,omitempty"`
	// Engine type in human readable form
	EngType *string `json:"eng_type,omitempty"`
	// Engine's version (format differs from one engine to another).
	EngVer *string `json:"eng_ver,omitempty"`
	// Engine's type:
	//   * av
	//   * archive
	//   * filetype
	//
	EngineType *EnginesStatus200ApplicationJSONEngineType `json:"engine_type,omitempty"`
	// Status of the engine:
	//   * downloading
	//   * downloaded
	//   * staging
	//   * production
	//   * removed
	//   * temporary failed
	//   * permanently failed
	//   * content invalid
	//   * download failed
	//
	State *EnginesStatus200ApplicationJSONState `json:"state,omitempty"`
}

type EnginesStatusResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// An array with all the engines and their details.
	EnginesStatus200ApplicationJSONObjects []EnginesStatus200ApplicationJSON
}
