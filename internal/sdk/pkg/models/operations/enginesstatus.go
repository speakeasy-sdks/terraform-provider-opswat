// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type EnginesStatusRequest struct {
	// Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.
	//
	Apikey *string `header:"style=simple,explode=false,name=apikey"`
}

func (o *EnginesStatusRequest) GetApikey() *string {
	if o == nil {
		return nil
	}
	return o.Apikey
}

// EngineType - Engine's type:
//   - av
//   - archive
//   - filetype
type EngineType string

const (
	EngineTypeAv       EngineType = "av"
	EngineTypeArchive  EngineType = "archive"
	EngineTypeFiletype EngineType = "filetype"
)

func (e EngineType) ToPointer() *EngineType {
	return &e
}

func (e *EngineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "av":
		fallthrough
	case "archive":
		fallthrough
	case "filetype":
		*e = EngineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EngineType: %v", v)
	}
}

// State - Status of the engine:
//   - downloading
//   - downloaded
//   - staging
//   - production
//   - removed
//   - temporary failed
//   - permanently failed
//   - content invalid
//   - download failed
type State string

const (
	StateDownloading       State = "downloading"
	StateDownloaded        State = "downloaded"
	StateStaging           State = "staging"
	StateProduction        State = "production"
	StateRemoved           State = "removed"
	StateTemporaryFailed   State = "temporary failed"
	StatePermanentlyFailed State = "permanently failed"
	StateContentInvalid    State = "content invalid"
	StateDownloadFailed    State = "download failed"
)

func (e State) ToPointer() *State {
	return &e
}

func (e *State) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "downloading":
		fallthrough
	case "downloaded":
		fallthrough
	case "staging":
		fallthrough
	case "production":
		fallthrough
	case "removed":
		fallthrough
	case "temporary failed":
		fallthrough
	case "permanently failed":
		fallthrough
	case "content invalid":
		fallthrough
	case "download failed":
		*e = State(v)
		return nil
	default:
		return fmt.Errorf("invalid value for State: %v", v)
	}
}

type EnginesStatusResponseBody struct {
	// If used by at least one engine
	Active *bool `json:"active,omitempty"`
	// The database definition time for this engine
	DefTime *string `json:"def_time,omitempty"`
	// The percentage progress of download
	DownloadProgress *int64 `json:"download_progress,omitempty"`
	// When this engine downloaded from the update server.
	DownloadTime *string `json:"download_time,omitempty"`
	// Engine internal ID
	EngID *string `json:"eng_id,omitempty"`
	// Engine name
	EngName *string `json:"eng_name,omitempty"`
	// Engine type in human readable form
	EngType *string `json:"eng_type,omitempty"`
	// Engine's version (format differs from one engine to another).
	EngVer *string `json:"eng_ver,omitempty"`
	// Engine's type:
	//   * av
	//   * archive
	//   * filetype
	//
	EngineType *EngineType `json:"engine_type,omitempty"`
	// Status of the engine:
	//   * downloading
	//   * downloaded
	//   * staging
	//   * production
	//   * removed
	//   * temporary failed
	//   * permanently failed
	//   * content invalid
	//   * download failed
	//
	State *State `json:"state,omitempty"`
}

func (o *EnginesStatusResponseBody) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *EnginesStatusResponseBody) GetDefTime() *string {
	if o == nil {
		return nil
	}
	return o.DefTime
}

func (o *EnginesStatusResponseBody) GetDownloadProgress() *int64 {
	if o == nil {
		return nil
	}
	return o.DownloadProgress
}

func (o *EnginesStatusResponseBody) GetDownloadTime() *string {
	if o == nil {
		return nil
	}
	return o.DownloadTime
}

func (o *EnginesStatusResponseBody) GetEngID() *string {
	if o == nil {
		return nil
	}
	return o.EngID
}

func (o *EnginesStatusResponseBody) GetEngName() *string {
	if o == nil {
		return nil
	}
	return o.EngName
}

func (o *EnginesStatusResponseBody) GetEngType() *string {
	if o == nil {
		return nil
	}
	return o.EngType
}

func (o *EnginesStatusResponseBody) GetEngVer() *string {
	if o == nil {
		return nil
	}
	return o.EngVer
}

func (o *EnginesStatusResponseBody) GetEngineType() *EngineType {
	if o == nil {
		return nil
	}
	return o.EngineType
}

func (o *EnginesStatusResponseBody) GetState() *State {
	if o == nil {
		return nil
	}
	return o.State
}

type EnginesStatusResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// An array with all the engines and their details.
	Classes []EnginesStatusResponseBody
}

func (o *EnginesStatusResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *EnginesStatusResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *EnginesStatusResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *EnginesStatusResponse) GetClasses() []EnginesStatusResponseBody {
	if o == nil {
		return nil
	}
	return o.Classes
}
