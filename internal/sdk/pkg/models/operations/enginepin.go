// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// EnginePinType - Pin engine or database to prevent applying automatic updates on it.
// (If the type is not defined both engine and database will be pinned.)
type EnginePinType string

const (
	EnginePinTypeEngine   EnginePinType = "engine"
	EnginePinTypeDatabase EnginePinType = "database"
)

func (e EnginePinType) ToPointer() *EnginePinType {
	return &e
}

func (e *EnginePinType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "engine":
		fallthrough
	case "database":
		*e = EnginePinType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnginePinType: %v", v)
	}
}

type EnginePinRequest struct {
	// Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.
	//
	Apikey string `header:"style=simple,explode=false,name=apikey"`
	// The unique engine identifier
	EngineID string `pathParam:"style=simple,explode=false,name=engineId"`
	// Pin engine or database to prevent applying automatic updates on it.
	// (If the type is not defined both engine and database will be pinned.)
	Type *EnginePinType `header:"style=simple,explode=false,name=type"`
}

func (o *EnginePinRequest) GetApikey() string {
	if o == nil {
		return ""
	}
	return o.Apikey
}

func (o *EnginePinRequest) GetEngineID() string {
	if o == nil {
		return ""
	}
	return o.EngineID
}

func (o *EnginePinRequest) GetType() *EnginePinType {
	if o == nil {
		return nil
	}
	return o.Type
}

// EnginePin500ApplicationJSON - Unexpected event on server
type EnginePin500ApplicationJSON struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *EnginePin500ApplicationJSON) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// EnginePin405ApplicationJSON - The user has no rights for this operation.
type EnginePin405ApplicationJSON struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *EnginePin405ApplicationJSON) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// EnginePin403ApplicationJSON - Invalid user information or Not Allowed
type EnginePin403ApplicationJSON struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *EnginePin403ApplicationJSON) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// EnginePin400ApplicationJSON - Bad Request (e.g. invalid header, apikey is missing or invalid).
type EnginePin400ApplicationJSON struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *EnginePin400ApplicationJSON) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

type EnginePin200ApplicationJSONResult string

const (
	EnginePin200ApplicationJSONResultEngineIsPinned                 EnginePin200ApplicationJSONResult = "Engine is pinned"
	EnginePin200ApplicationJSONResultDatabaseIsPinned               EnginePin200ApplicationJSONResult = "Database is pinned"
	EnginePin200ApplicationJSONResultBothEngineAndDatabaseArePinned EnginePin200ApplicationJSONResult = "Both engine and database are pinned"
)

func (e EnginePin200ApplicationJSONResult) ToPointer() *EnginePin200ApplicationJSONResult {
	return &e
}

func (e *EnginePin200ApplicationJSONResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Engine is pinned":
		fallthrough
	case "Database is pinned":
		fallthrough
	case "Both engine and database are pinned":
		*e = EnginePin200ApplicationJSONResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnginePin200ApplicationJSONResult: %v", v)
	}
}

// EnginePin200ApplicationJSON - Request processed successfully
type EnginePin200ApplicationJSON struct {
	Result *EnginePin200ApplicationJSONResult `json:"result,omitempty"`
}

func (o *EnginePin200ApplicationJSON) GetResult() *EnginePin200ApplicationJSONResult {
	if o == nil {
		return nil
	}
	return o.Result
}

type EnginePinResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Request processed successfully
	EnginePin200ApplicationJSONObject *EnginePin200ApplicationJSON
	// Bad Request (e.g. invalid header, apikey is missing or invalid).
	EnginePin400ApplicationJSONObject *EnginePin400ApplicationJSON
	// Invalid user information or Not Allowed
	EnginePin403ApplicationJSONObject *EnginePin403ApplicationJSON
	// The user has no rights for this operation.
	EnginePin405ApplicationJSONObject *EnginePin405ApplicationJSON
	// Unexpected event on server
	EnginePin500ApplicationJSONObject *EnginePin500ApplicationJSON
}

func (o *EnginePinResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *EnginePinResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *EnginePinResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *EnginePinResponse) GetEnginePin200ApplicationJSONObject() *EnginePin200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.EnginePin200ApplicationJSONObject
}

func (o *EnginePinResponse) GetEnginePin400ApplicationJSONObject() *EnginePin400ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.EnginePin400ApplicationJSONObject
}

func (o *EnginePinResponse) GetEnginePin403ApplicationJSONObject() *EnginePin403ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.EnginePin403ApplicationJSONObject
}

func (o *EnginePinResponse) GetEnginePin405ApplicationJSONObject() *EnginePin405ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.EnginePin405ApplicationJSONObject
}

func (o *EnginePinResponse) GetEnginePin500ApplicationJSONObject() *EnginePin500ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.EnginePin500ApplicationJSONObject
}
