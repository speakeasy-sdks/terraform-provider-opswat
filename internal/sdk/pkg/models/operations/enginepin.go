// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// Type - Pin engine or database to prevent applying automatic updates on it.
// (If the type is not defined both engine and database will be pinned.)
type Type string

const (
	TypeEngine   Type = "engine"
	TypeDatabase Type = "database"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "engine":
		fallthrough
	case "database":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type EnginePinRequest struct {
	// Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.
	//
	Apikey string `header:"style=simple,explode=false,name=apikey"`
	// The unique engine identifier
	EngineID string `pathParam:"style=simple,explode=false,name=engineId"`
	// Pin engine or database to prevent applying automatic updates on it.
	// (If the type is not defined both engine and database will be pinned.)
	Type *Type `header:"style=simple,explode=false,name=type"`
}

func (o *EnginePinRequest) GetApikey() string {
	if o == nil {
		return ""
	}
	return o.Apikey
}

func (o *EnginePinRequest) GetEngineID() string {
	if o == nil {
		return ""
	}
	return o.EngineID
}

func (o *EnginePinRequest) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}

// EnginePinEnginesResponse500ResponseBody - Unexpected event on server
type EnginePinEnginesResponse500ResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *EnginePinEnginesResponse500ResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// EnginePinEnginesResponse405ResponseBody - The user has no rights for this operation.
type EnginePinEnginesResponse405ResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *EnginePinEnginesResponse405ResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// EnginePinEnginesResponseResponseBody - Invalid user information or Not Allowed
type EnginePinEnginesResponseResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *EnginePinEnginesResponseResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// EnginePinEnginesResponseBody - Bad Request (e.g. invalid header, apikey is missing or invalid).
type EnginePinEnginesResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *EnginePinEnginesResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

type Result string

const (
	ResultEngineIsPinned                 Result = "Engine is pinned"
	ResultDatabaseIsPinned               Result = "Database is pinned"
	ResultBothEngineAndDatabaseArePinned Result = "Both engine and database are pinned"
)

func (e Result) ToPointer() *Result {
	return &e
}

func (e *Result) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Engine is pinned":
		fallthrough
	case "Database is pinned":
		fallthrough
	case "Both engine and database are pinned":
		*e = Result(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Result: %v", v)
	}
}

// EnginePinResponseBody - Request processed successfully
type EnginePinResponseBody struct {
	Result *Result `json:"result,omitempty"`
}

func (o *EnginePinResponseBody) GetResult() *Result {
	if o == nil {
		return nil
	}
	return o.Result
}

type EnginePinResponse struct {
	// Request processed successfully
	TwoHundredApplicationJSONObject *EnginePinResponseBody
	// Bad Request (e.g. invalid header, apikey is missing or invalid).
	FourHundredApplicationJSONObject *EnginePinEnginesResponseBody
	// Invalid user information or Not Allowed
	FourHundredAndThreeApplicationJSONObject *EnginePinEnginesResponseResponseBody
	// The user has no rights for this operation.
	FourHundredAndFiveApplicationJSONObject *EnginePinEnginesResponse405ResponseBody
	// Unexpected event on server
	FiveHundredApplicationJSONObject *EnginePinEnginesResponse500ResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *EnginePinResponse) GetTwoHundredApplicationJSONObject() *EnginePinResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *EnginePinResponse) GetFourHundredApplicationJSONObject() *EnginePinEnginesResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *EnginePinResponse) GetFourHundredAndThreeApplicationJSONObject() *EnginePinEnginesResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *EnginePinResponse) GetFourHundredAndFiveApplicationJSONObject() *EnginePinEnginesResponse405ResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFiveApplicationJSONObject
}

func (o *EnginePinResponse) GetFiveHundredApplicationJSONObject() *EnginePinEnginesResponse500ResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredApplicationJSONObject
}

func (o *EnginePinResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *EnginePinResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *EnginePinResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
