// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"Metadefender/internal/sdk/pkg/models/shared"
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
)

type ConfigUpdateHealthCheckRequest struct {
	PostRequestBody *shared.PostRequestBody `request:"mediaType=application/json"`
	// Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.
	//
	Apikey string `header:"style=simple,explode=false,name=apikey"`
}

type ConfigUpdateHealthCheck400ApplicationJSONType string

const (
	ConfigUpdateHealthCheck400ApplicationJSONTypeSetRequiredEngineFailedWhenInvalidLicense ConfigUpdateHealthCheck400ApplicationJSONType = "SetRequiredEngineFailedWhenInvalidLicense"
	ConfigUpdateHealthCheck400ApplicationJSONTypeSetRequiredEngineFailedWhenInvalidEngine  ConfigUpdateHealthCheck400ApplicationJSONType = "SetRequiredEngineFailedWhenInvalidEngine"
)

type ConfigUpdateHealthCheck400ApplicationJSON struct {
	SetRequiredEngineFailedWhenInvalidLicense *shared.SetRequiredEngineFailedWhenInvalidLicense
	SetRequiredEngineFailedWhenInvalidEngine  *shared.SetRequiredEngineFailedWhenInvalidEngine

	Type ConfigUpdateHealthCheck400ApplicationJSONType
}

func CreateConfigUpdateHealthCheck400ApplicationJSONSetRequiredEngineFailedWhenInvalidLicense(setRequiredEngineFailedWhenInvalidLicense shared.SetRequiredEngineFailedWhenInvalidLicense) ConfigUpdateHealthCheck400ApplicationJSON {
	typ := ConfigUpdateHealthCheck400ApplicationJSONTypeSetRequiredEngineFailedWhenInvalidLicense

	return ConfigUpdateHealthCheck400ApplicationJSON{
		SetRequiredEngineFailedWhenInvalidLicense: &setRequiredEngineFailedWhenInvalidLicense,
		Type: typ,
	}
}

func CreateConfigUpdateHealthCheck400ApplicationJSONSetRequiredEngineFailedWhenInvalidEngine(setRequiredEngineFailedWhenInvalidEngine shared.SetRequiredEngineFailedWhenInvalidEngine) ConfigUpdateHealthCheck400ApplicationJSON {
	typ := ConfigUpdateHealthCheck400ApplicationJSONTypeSetRequiredEngineFailedWhenInvalidEngine

	return ConfigUpdateHealthCheck400ApplicationJSON{
		SetRequiredEngineFailedWhenInvalidEngine: &setRequiredEngineFailedWhenInvalidEngine,
		Type:                                     typ,
	}
}

func (u *ConfigUpdateHealthCheck400ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	setRequiredEngineFailedWhenInvalidLicense := new(shared.SetRequiredEngineFailedWhenInvalidLicense)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&setRequiredEngineFailedWhenInvalidLicense); err == nil {
		u.SetRequiredEngineFailedWhenInvalidLicense = setRequiredEngineFailedWhenInvalidLicense
		u.Type = ConfigUpdateHealthCheck400ApplicationJSONTypeSetRequiredEngineFailedWhenInvalidLicense
		return nil
	}

	setRequiredEngineFailedWhenInvalidEngine := new(shared.SetRequiredEngineFailedWhenInvalidEngine)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&setRequiredEngineFailedWhenInvalidEngine); err == nil {
		u.SetRequiredEngineFailedWhenInvalidEngine = setRequiredEngineFailedWhenInvalidEngine
		u.Type = ConfigUpdateHealthCheck400ApplicationJSONTypeSetRequiredEngineFailedWhenInvalidEngine
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ConfigUpdateHealthCheck400ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.SetRequiredEngineFailedWhenInvalidLicense != nil {
		return json.Marshal(u.SetRequiredEngineFailedWhenInvalidLicense)
	}

	if u.SetRequiredEngineFailedWhenInvalidEngine != nil {
		return json.Marshal(u.SetRequiredEngineFailedWhenInvalidEngine)
	}

	return nil, nil
}

type ConfigUpdateHealthCheckResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Error while modifying configuration.
	ErrorWhileModifyingConfig *shared.ErrorWhileModifyingConfig
	// Health check criterias to determine whether MetaDefender Core server status is healthy or not.
	HealthCheck *shared.HealthCheck
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Bad Request (e.g. invalid header, apikey is missing or invalid).
	ConfigUpdateHealthCheck400ApplicationJSONOneOf *ConfigUpdateHealthCheck400ApplicationJSON
}
