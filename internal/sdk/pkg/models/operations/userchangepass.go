// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type UserChangePassRequestBody struct {
	// The new password in plain text
	NewPassword *string `json:"new_password,omitempty"`
	// The current password in plain text
	OldPassword *string `json:"old_password,omitempty"`
}

func (o *UserChangePassRequestBody) GetNewPassword() *string {
	if o == nil {
		return nil
	}
	return o.NewPassword
}

func (o *UserChangePassRequestBody) GetOldPassword() *string {
	if o == nil {
		return nil
	}
	return o.OldPassword
}

type UserChangePassRequest struct {
	RequestBody *UserChangePassRequestBody `request:"mediaType=application/json"`
	// Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.
	//
	Apikey string `header:"style=simple,explode=false,name=apikey"`
}

func (o *UserChangePassRequest) GetRequestBody() *UserChangePassRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *UserChangePassRequest) GetApikey() string {
	if o == nil {
		return ""
	}
	return o.Apikey
}

// UserChangePassAuthResponse500ResponseBody - Unexpected event on server
type UserChangePassAuthResponse500ResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *UserChangePassAuthResponse500ResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// UserChangePassAuthResponseResponseBody - The user has no rights for this operation.
type UserChangePassAuthResponseResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *UserChangePassAuthResponseResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// UserChangePassAuthResponseBody - Bad Request (e.g. invalid header, apikey is missing or invalid).
type UserChangePassAuthResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *UserChangePassAuthResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// UserChangePassResponseBody - Request processed successfully
type UserChangePassResponseBody struct {
	Success *bool `json:"success,omitempty"`
}

func (o *UserChangePassResponseBody) GetSuccess() *bool {
	if o == nil {
		return nil
	}
	return o.Success
}

type UserChangePassResponse struct {
	// Request processed successfully
	TwoHundredApplicationJSONObject *UserChangePassResponseBody
	// Bad Request (e.g. invalid header, apikey is missing or invalid).
	FourHundredApplicationJSONObject *UserChangePassAuthResponseBody
	// The user has no rights for this operation.
	FourHundredAndFiveApplicationJSONObject *UserChangePassAuthResponseResponseBody
	// Unexpected event on server
	FiveHundredApplicationJSONObject *UserChangePassAuthResponse500ResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *UserChangePassResponse) GetTwoHundredApplicationJSONObject() *UserChangePassResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *UserChangePassResponse) GetFourHundredApplicationJSONObject() *UserChangePassAuthResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *UserChangePassResponse) GetFourHundredAndFiveApplicationJSONObject() *UserChangePassAuthResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFiveApplicationJSONObject
}

func (o *UserChangePassResponse) GetFiveHundredApplicationJSONObject() *UserChangePassAuthResponse500ResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredApplicationJSONObject
}

func (o *UserChangePassResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UserChangePassResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UserChangePassResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
