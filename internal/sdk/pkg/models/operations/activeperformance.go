// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type ActivePerformanceRequest struct {
	// Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.
	//
	Apikey string `header:"style=simple,explode=false,name=apikey"`
	// Collect data from last hours
	HoursRange *int64 `queryParam:"style=form,explode=true,name=hours_range"`
	// The name of workflow rule to filter.
	RuleName *string `header:"style=simple,explode=false,name=rule_name"`
}

func (o *ActivePerformanceRequest) GetApikey() string {
	if o == nil {
		return ""
	}
	return o.Apikey
}

func (o *ActivePerformanceRequest) GetHoursRange() *int64 {
	if o == nil {
		return nil
	}
	return o.HoursRange
}

func (o *ActivePerformanceRequest) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

// ActivePerformanceStatsResponse500ResponseBody - Unexpected event on server
type ActivePerformanceStatsResponse500ResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *ActivePerformanceStatsResponse500ResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// ActivePerformanceStatsResponseResponseBody - The user has no rights for this operation.
type ActivePerformanceStatsResponseResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *ActivePerformanceStatsResponseResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

// ActivePerformanceStatsResponseBody - Invalid user information or Not Allowed
type ActivePerformanceStatsResponseBody struct {
	// Error reason
	Err *string `json:"err,omitempty"`
}

func (o *ActivePerformanceStatsResponseBody) GetErr() *string {
	if o == nil {
		return nil
	}
	return o.Err
}

type HashTime struct {
	// Average hash calculating time.
	Avg *int64 `json:"avg,omitempty"`
	// Maximum hash calculating time.
	Max *int64 `json:"max,omitempty"`
	// Minimum hash calculating time.
	Min *int64 `json:"min,omitempty"`
}

func (o *HashTime) GetAvg() *int64 {
	if o == nil {
		return nil
	}
	return o.Avg
}

func (o *HashTime) GetMax() *int64 {
	if o == nil {
		return nil
	}
	return o.Max
}

func (o *HashTime) GetMin() *int64 {
	if o == nil {
		return nil
	}
	return o.Min
}

type ProcessingTime struct {
	// Average overall processing time.
	Avg *int64 `json:"avg,omitempty"`
	// Maximum overall processing time.
	Max *int64 `json:"max,omitempty"`
	// Minimum overall processing time.
	Min *int64 `json:"min,omitempty"`
}

func (o *ProcessingTime) GetAvg() *int64 {
	if o == nil {
		return nil
	}
	return o.Avg
}

func (o *ProcessingTime) GetMax() *int64 {
	if o == nil {
		return nil
	}
	return o.Max
}

func (o *ProcessingTime) GetMin() *int64 {
	if o == nil {
		return nil
	}
	return o.Min
}

type QueueTime struct {
	// Average queue time.
	Avg *int64 `json:"avg,omitempty"`
	// Maximum queue time.
	Max *int64 `json:"max,omitempty"`
	// Minimum queue time.
	Min *int64 `json:"min,omitempty"`
}

func (o *QueueTime) GetAvg() *int64 {
	if o == nil {
		return nil
	}
	return o.Avg
}

func (o *QueueTime) GetMax() *int64 {
	if o == nil {
		return nil
	}
	return o.Max
}

func (o *QueueTime) GetMin() *int64 {
	if o == nil {
		return nil
	}
	return o.Min
}

type WaitTime struct {
	// Average waiting time.
	Avg *int64 `json:"avg,omitempty"`
	// Maximum waiting time.
	Max *int64 `json:"max,omitempty"`
	// Minimum waiting time.
	Min *int64 `json:"min,omitempty"`
}

func (o *WaitTime) GetAvg() *int64 {
	if o == nil {
		return nil
	}
	return o.Avg
}

func (o *WaitTime) GetMax() *int64 {
	if o == nil {
		return nil
	}
	return o.Max
}

func (o *WaitTime) GetMin() *int64 {
	if o == nil {
		return nil
	}
	return o.Min
}

type ActivePerformance struct {
	// Number of failed processing results.
	FailedResults  *int64          `json:"failed_results,omitempty"`
	HashTime       *HashTime       `json:"hash_time,omitempty"`
	ProcessingTime *ProcessingTime `json:"processing_time,omitempty"`
	QueueTime      *QueueTime      `json:"queue_time,omitempty"`
	// Total number of successfully-processed objects (excluding failed or not-scanned results)
	SuccessResults *int64 `json:"success_results,omitempty"`
	// Total processed file size in bytes.
	TotalFilesize *int64 `json:"total_filesize,omitempty"`
	// Total number of file submissions.
	TotalRequests *int64    `json:"total_requests,omitempty"`
	WaitTime      *WaitTime `json:"wait_time,omitempty"`
}

func (o *ActivePerformance) GetFailedResults() *int64 {
	if o == nil {
		return nil
	}
	return o.FailedResults
}

func (o *ActivePerformance) GetHashTime() *HashTime {
	if o == nil {
		return nil
	}
	return o.HashTime
}

func (o *ActivePerformance) GetProcessingTime() *ProcessingTime {
	if o == nil {
		return nil
	}
	return o.ProcessingTime
}

func (o *ActivePerformance) GetQueueTime() *QueueTime {
	if o == nil {
		return nil
	}
	return o.QueueTime
}

func (o *ActivePerformance) GetSuccessResults() *int64 {
	if o == nil {
		return nil
	}
	return o.SuccessResults
}

func (o *ActivePerformance) GetTotalFilesize() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalFilesize
}

func (o *ActivePerformance) GetTotalRequests() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalRequests
}

func (o *ActivePerformance) GetWaitTime() *WaitTime {
	if o == nil {
		return nil
	}
	return o.WaitTime
}

// ActivePerformanceResponseBody - Active performance report on MetaDefender Core
type ActivePerformanceResponseBody struct {
	ActivePerformance *ActivePerformance `json:"active_performance,omitempty"`
	// The data is gathered in this recent milliseconds.
	FromTime *int64 `json:"from_time,omitempty"`
}

func (o *ActivePerformanceResponseBody) GetActivePerformance() *ActivePerformance {
	if o == nil {
		return nil
	}
	return o.ActivePerformance
}

func (o *ActivePerformanceResponseBody) GetFromTime() *int64 {
	if o == nil {
		return nil
	}
	return o.FromTime
}

type ActivePerformanceResponse struct {
	// Active performance report on MetaDefender Core
	TwoHundredApplicationJSONObject *ActivePerformanceResponseBody
	// Invalid user information or Not Allowed
	FourHundredAndThreeApplicationJSONObject *ActivePerformanceStatsResponseBody
	// The user has no rights for this operation.
	FourHundredAndFiveApplicationJSONObject *ActivePerformanceStatsResponseResponseBody
	// Unexpected event on server
	FiveHundredApplicationJSONObject *ActivePerformanceStatsResponse500ResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ActivePerformanceResponse) GetTwoHundredApplicationJSONObject() *ActivePerformanceResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *ActivePerformanceResponse) GetFourHundredAndThreeApplicationJSONObject() *ActivePerformanceStatsResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *ActivePerformanceResponse) GetFourHundredAndFiveApplicationJSONObject() *ActivePerformanceStatsResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFiveApplicationJSONObject
}

func (o *ActivePerformanceResponse) GetFiveHundredApplicationJSONObject() *ActivePerformanceStatsResponse500ResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredApplicationJSONObject
}

func (o *ActivePerformanceResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ActivePerformanceResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ActivePerformanceResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
