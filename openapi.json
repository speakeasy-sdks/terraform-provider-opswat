{
    "openapi": "3.0.0",
    "info": {
        "termsOfService": "https://onlinehelp.opswat.com/policies/",
        "contact": {
            "name": "API Support",
            "email": "feedback@opswat.com",
            "url": "https://github.com/OPSWAT/metadefender-core-openapi3"
        },
        "x-logo": {
            "url": "https://d7umqicpi7263.cloudfront.net/img/product/9c273549-7359-4582-9ead-baef1f3c4dc9/a6bea41b-3a16-45be-9e04-07a5a9616737.png",
            "altText": "OPSWAT MetaDefender logo"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "title": "MetaDefender Core",
        "version": "v5.6.1",
        "description": "## Developer Guide\n\n----\n\nThis is the API documentation for *MetaDefender Core Public API*.  If you\nwould like to evaluate or have any questions about this documentation,\nplease contact us via our [Contact Us](https://www.opswat.com/contact) form.\n\n----\n\n## How to Interact with MetaDefender Core using REST\n\nBeginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based\nREST API. The available methods are documented below.\n\n> _**Note**:_ MetaDefender API doesn't support chunk upload, however is\nrecommended to stream the files to MetaDefender Core as part of the upload\nprocess. \n\n---\n\n## File Analysis Process\n\n  MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary. \n  Below is a brief description of the API integration flow:\n\n  1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](/mdcore/metadefender-core/ref#fileanalysispost)).\n    \n    > _**Note**:_ The performance depends on:\n    > - number of nodes (scaling)\n    > - number of engines per node\n    > - type of file to be scanned\n    > - Metadefender Core and nodes' hardware\n  \n\n  2. You have 2 ways to retrieve the analysis report: \n    - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ([Fetch analysis result](/mdcore/metadefender-core/ref#fileanalysisget))\n  \n    > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.\n    \n    - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete. \n\n  3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch analysis result by hash](/mdcore/metadefender-core/ref#hashget).\n    - The hash can be found in the scan results\n\n  4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete. \n    > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time. \n\n---\n\nOPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to\nmake it easier to understand how the MetaDefender REST API works.\n"
    },
    "externalDocs": {
        "description": "Official product documentation",
        "url": "https://onlinehelp.opswat.com/corev4"
    },
    "tags": [
        {
            "name": "auth",
            "description": "### Authentication APIs\nUser authentication is done via username & password. \nAdditional integrations are available within the product: \n  - **LDAP** integration\n  - **Active Directory** integration\n  - **SAML** integration (starting with v4.18.0)\n"
        },
        {
            "name": "analysis",
            "description": "### File analysis APIs\nSubmit each file to MetaDefender Core individually or group them in batches. Each file submission will return a `data_id` which will be the unique identifier used to retrieve the analysis results. \n**Important**: Even though one file is being submitted, if MetaDefender Core is configured to extract the files, all compound file types (archives, Office documents, etc.) will be extracted and each file within will be analyzed as a separate entry.\n  - This means that if you submit an archive with 100 files in it, MetaDefender Core will process 101 files: original file as it is and each of the 100 child files\n    - Note that by opening the files, detection ratio can increase even by 30%. \n\n> _**Note**:_ MetaDefender API doesn't support chunk upload. You shouldn't load the file in memory, is recommended to stream the files to MetaDefender Core as part of the upload process.\n"
        },
        {
            "name": "batch",
            "description": "Group the analysis requests in batches."
        },
        {
            "name": "admin",
            "description": "Admin specific API requests."
        },
        {
            "name": "license",
            "description": "Activate the product or get licensing information. Will require admin apikey.\n"
        },
        {
            "name": "config",
            "description": "Configure the product through APIs (especially the Settings). Will require admin apikey.\n"
        },
        {
            "name": "yara",
            "description": "Yara engine configuration and source management APIs."
        },
        {
            "name": "engines",
            "description": "Enable/disable or pin/unpin the engines through API."
        },
        {
            "name": "stats",
            "description": "Health check and statistics about MetaDefender Core usage."
        }
    ],
    "x-tagGroups": [
        {
            "name": "User",
            "tags": [
                "auth"
            ]
        },
        {
            "name": "File Analysis",
            "tags": [
                "analysis",
                "batch"
            ]
        },
        {
            "name": "Admin",
            "tags": [
                "admin",
                "config",
                "license",
                "yara",
                "engines",
                "stats"
            ]
        },
        {
            "name": "Models",
            "tags": [
                "analysisResultModel",
                "batchResultModel",
                "fileInfoModel",
                "deepCDRReportModel",
                "metascanReportModel",
                "dlpReportModel",
                "vulnReportModel"
            ]
        }
    ],
    "paths": {
        "/login": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "description": "Initiate a new session. Required for using protected REST APIs.",
                "operationId": "userLogin",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "user",
                                    "password"
                                ],
                                "properties": {
                                    "user": {
                                        "type": "string",
                                        "description": "Username"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "User's password"
                                    }
                                }
                            },
                            "example": {
                                "user": "admin",
                                "password": "admin"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserLogin"
                                }
                            }
                        },
                        "links": {
                            "GetAPIKey": {
                                "$ref": "#/components/links/GetAPIKey"
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "string",
                                            "description": "<error message> will describe the incident. More details would be logged in MetaDefender Core logs"
                                        }
                                    }
                                },
                                "example": {
                                    "err": "Failed to login"
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/login\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"user\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/login\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"user\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/login\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/login\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({user: 'string', password: 'string'}));\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/login\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/json\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/login' -Method POST -Headers $headers -ContentType 'application/json' -Body '{\"user\":\"string\",\"password\":\"string\"}'"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\npayload = \"{\\\"user\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/login\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/login \\\n  --header 'content-type: application/json' \\\n  --data '{\"user\":\"string\",\"password\":\"string\"}'"
                    }
                ]
            }
        },
        "/logout": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Logout",
                "description": "Destroy session for not using protected REST APIs.",
                "operationId": "userLogout",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [
                                        "response"
                                    ],
                                    "properties": {
                                        "response": {
                                            "type": "string",
                                            "example": "Logout success"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [
                                        "err"
                                    ],
                                    "properties": {
                                        "err": {
                                            "type": "string",
                                            "example": "Logout error"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid user information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [
                                        "err"
                                    ],
                                    "properties": {
                                        "err": {
                                            "type": "string",
                                            "example": "Access denied"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/logout\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/logout\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/logout\")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/logout\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/logout\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/logout' -Method POST "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"POST\", \"/logout\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/logout"
                    }
                ]
            }
        },
        "/admin/license/activation": {
            "post": {
                "tags": [
                    "license"
                ],
                "summary": "Activate license online",
                "operationId": "licenseActivation",
                "description": "This API initiates an online activation of the deployment.  In case of error, check the application logs for more details.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostlicenseKeyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success200"
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/license/activation\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"activationKey\\\":\\\"xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx\\\",\\\"quantity\\\":1,\\\"comment\\\":\\\"MetaDefender Core Server 001\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/license/activation\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"activationKey\\\":\\\"xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx\\\",\\\"quantity\\\":1,\\\"comment\\\":\\\"MetaDefender Core Server 001\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"activationKey\\\":\\\"xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx\\\",\\\"quantity\\\":1,\\\"comment\\\":\\\"MetaDefender Core Server 001\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/license/activation\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/license/activation\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  activationKey: 'xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx',\n  quantity: 1,\n  comment: 'MetaDefender Core Server 001'\n}));\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/license/activation\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"activationKey\\\":\\\"xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx\\\",\\\"quantity\\\":1,\\\"comment\\\":\\\"MetaDefender Core Server 001\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/json\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/license/activation' -Method POST -Headers $headers -ContentType 'application/json' -Body '{\"activationKey\":\"xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx\",\"quantity\":1,\"comment\":\"MetaDefender Core Server 001\"}'"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\npayload = \"{\\\"activationKey\\\":\\\"xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx\\\",\\\"quantity\\\":1,\\\"comment\\\":\\\"MetaDefender Core Server 001\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/admin/license/activation\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/admin/license/activation \\\n  --header 'content-type: application/json' \\\n  --data '{\"activationKey\":\"xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx\",\"quantity\":1,\"comment\":\"MetaDefender Core Server 001\"}'"
                    }
                ]
            }
        },
        "/admin/license": {
            "post": {
                "tags": [
                    "license"
                ],
                "summary": "Upload license key file",
                "operationId": "licenseUpload",
                "description": "Uploading a license file to the Metadefender Core.\n\nThere are two ways two obtain a license key file:\n - via https://portal.opswat.com/activation portal\n - via activation server REST API: https://activation.dl.opswat.com/activation?key=%activation_key%&deployment=%deployment_unique_ID%&quantity=%quantity%\n\nDeployment unique ID can be fetched via Get Current License Information API.      ",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/licenseFile"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success200"
                    },
                    "400": {
                        "description": "Invalid license file",
                        "content": {
                            "application/json": {
                                "example": {
                                    "err": "Invalid license"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/license\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/license\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/license\")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/license\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/license\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/license' -Method POST "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"POST\", \"/admin/license\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/admin/license"
                    }
                ]
            },
            "get": {
                "tags": [
                    "license"
                ],
                "summary": "Get current license information",
                "description": "Fetch all details about the licensing status of the product.",
                "operationId": "licenseGet",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/LicenseInformationResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/license\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/license\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/license\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/license\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/license\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/license' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/admin/license\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/admin/license"
                    }
                ]
            }
        },
        "/admin/config/auditlog": {
            "put": {
                "tags": [
                    "config"
                ],
                "summary": "Audit clean up",
                "description": "Setting audit records (update history) clean up time (clean up records older than). \n> _**Note**_:The clean up range is defined in `hours`. \n",
                "operationId": "configAuditLog",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/adminCleanup"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AdminCleanupResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/auditlog\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/auditlog\");\nvar request = new RestRequest(Method.PUT);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/auditlog\")\n  .put(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/auditlog\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/auditlog\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/auditlog' -Method PUT "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"PUT\", \"/admin/config/auditlog\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request PUT \\\n  --url http://localhost:8008/admin/config/auditlog"
                    }
                ]
            }
        },
        "/admin/config/quarantine": {
            "put": {
                "tags": [
                    "config"
                ],
                "summary": "Quarantine clean up",
                "description": "Setting quarantine clean up time (clean up records older than). \n> _**Note**_:The clean up range is defined in `hours`. \n",
                "operationId": "configQuarantine",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/adminCleanup"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AdminCleanupResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/quarantine\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/quarantine\");\nvar request = new RestRequest(Method.PUT);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/quarantine\")\n  .put(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/quarantine\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/quarantine\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/quarantine' -Method PUT "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"PUT\", \"/admin/config/quarantine\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request PUT \\\n  --url http://localhost:8008/admin/config/quarantine"
                    }
                ]
            }
        },
        "/admin/config/sanitize": {
            "put": {
                "tags": [
                    "config"
                ],
                "summary": "Sanitized files clean up",
                "operationId": "configSanitizedRepo",
                "description": "Setting sanitized files clean up time (clean up records older than). \n> _**Note**_:The clean up range is defined in `minutes`. \n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "maxage": {
                                        "description": "The number of minutes of data retention. Anything older than this number will be deleted.",
                                        "type": "integer",
                                        "example": 360
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "maxage": {
                                            "description": "The number of minutes of data retention. Anything older than this number will be deleted.",
                                            "type": "integer",
                                            "example": 360
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/sanitize\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"maxage\\\":360}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/sanitize\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"maxage\\\":360}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"maxage\\\":360}\");\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/sanitize\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/sanitize\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({maxage: 360}));\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/sanitize\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"maxage\\\":360}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/json\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/sanitize' -Method PUT -Headers $headers -ContentType 'application/json' -Body '{\"maxage\":360}'"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\npayload = \"{\\\"maxage\\\":360}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"PUT\", \"/admin/config/sanitize\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request PUT \\\n  --url http://localhost:8008/admin/config/sanitize \\\n  --header 'content-type: application/json' \\\n  --data '{\"maxage\":360}'"
                    }
                ]
            }
        },
        "/admin/config/scanhistory": {
            "put": {
                "tags": [
                    "config"
                ],
                "summary": "Processing history clean up",
                "description": "Setting processing history clean up time (clean up records older than). \n> _**Note**_:The clean up range is defined in `hours`. \n",
                "operationId": "configScanHistory",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/adminCleanup"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AdminCleanupResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/scanhistory\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/scanhistory\");\nvar request = new RestRequest(Method.PUT);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/scanhistory\")\n  .put(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/scanhistory\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/scanhistory\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/scanhistory' -Method PUT "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"PUT\", \"/admin/config/scanhistory\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request PUT \\\n  --url http://localhost:8008/admin/config/scanhistory"
                    }
                ]
            }
        },
        "/admin/config/session": {
            "put": {
                "tags": [
                    "config"
                ],
                "summary": "Session settings",
                "description": "Configure settings for session generated upon a successful login\nSee more at [Login](/mdcore/metadefender-core/ref#userlogin)\n",
                "operationId": "configSession",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AdminConfigSession"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminConfigSession"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/session\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"absoluteSessionTimeout\\\":0,\\\"allowCrossIpSessions\\\":true,\\\"allowDuplicateSession\\\":true,\\\"sessionTimeout\\\":300000}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/session\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"absoluteSessionTimeout\\\":0,\\\"allowCrossIpSessions\\\":true,\\\"allowDuplicateSession\\\":true,\\\"sessionTimeout\\\":300000}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"absoluteSessionTimeout\\\":0,\\\"allowCrossIpSessions\\\":true,\\\"allowDuplicateSession\\\":true,\\\"sessionTimeout\\\":300000}\");\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/session\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/session\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  absoluteSessionTimeout: 0,\n  allowCrossIpSessions: true,\n  allowDuplicateSession: true,\n  sessionTimeout: 300000\n}));\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/session\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"absoluteSessionTimeout\\\":0,\\\"allowCrossIpSessions\\\":true,\\\"allowDuplicateSession\\\":true,\\\"sessionTimeout\\\":300000}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/json\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/session' -Method PUT -Headers $headers -ContentType 'application/json' -Body '{\"absoluteSessionTimeout\":0,\"allowCrossIpSessions\":true,\"allowDuplicateSession\":true,\"sessionTimeout\":300000}'"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\npayload = \"{\\\"absoluteSessionTimeout\\\":0,\\\"allowCrossIpSessions\\\":true,\\\"allowDuplicateSession\\\":true,\\\"sessionTimeout\\\":300000}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"PUT\", \"/admin/config/session\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request PUT \\\n  --url http://localhost:8008/admin/config/session \\\n  --header 'content-type: application/json' \\\n  --data '{\"absoluteSessionTimeout\":0,\"allowCrossIpSessions\":true,\"allowDuplicateSession\":true,\"sessionTimeout\":300000}'"
                    }
                ]
            }
        },
        "/admin/config/update": {
            "put": {
                "tags": [
                    "config"
                ],
                "summary": "Modules Update Source and Frequency",
                "description": "Setting update frequency for all modules and engines. \n> _**Note**_:The clean up range is defined in `minutes`. \n",
                "operationId": "configUpdate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AdminConfigUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminConfigUpdate"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/update\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"autoupdateperiod\\\":240,\\\"deleteafterimport\\\":true,\\\"disabledupdate\\\":[{\\\"days\\\":\\\"5-7\\\",\\\"from\\\":480,\\\"to\\\":960}],\\\"pickupfolder\\\":\\\"/tmp/core-data/update_autoadd\\\",\\\"source\\\":\\\"internet\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/update\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"autoupdateperiod\\\":240,\\\"deleteafterimport\\\":true,\\\"disabledupdate\\\":[{\\\"days\\\":\\\"5-7\\\",\\\"from\\\":480,\\\"to\\\":960}],\\\"pickupfolder\\\":\\\"/tmp/core-data/update_autoadd\\\",\\\"source\\\":\\\"internet\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"autoupdateperiod\\\":240,\\\"deleteafterimport\\\":true,\\\"disabledupdate\\\":[{\\\"days\\\":\\\"5-7\\\",\\\"from\\\":480,\\\"to\\\":960}],\\\"pickupfolder\\\":\\\"/tmp/core-data/update_autoadd\\\",\\\"source\\\":\\\"internet\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/update\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/update\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  autoupdateperiod: 240,\n  deleteafterimport: true,\n  disabledupdate: [{days: '5-7', from: 480, to: 960}],\n  pickupfolder: '/tmp/core-data/update_autoadd',\n  source: 'internet'\n}));\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/update\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"autoupdateperiod\\\":240,\\\"deleteafterimport\\\":true,\\\"disabledupdate\\\":[{\\\"days\\\":\\\"5-7\\\",\\\"from\\\":480,\\\"to\\\":960}],\\\"pickupfolder\\\":\\\"/tmp/core-data/update_autoadd\\\",\\\"source\\\":\\\"internet\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/json\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/update' -Method PUT -Headers $headers -ContentType 'application/json' -Body '{\"autoupdateperiod\":240,\"deleteafterimport\":true,\"disabledupdate\":[{\"days\":\"5-7\",\"from\":480,\"to\":960}],\"pickupfolder\":\"/tmp/core-data/update_autoadd\",\"source\":\"internet\"}'"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\npayload = \"{\\\"autoupdateperiod\\\":240,\\\"deleteafterimport\\\":true,\\\"disabledupdate\\\":[{\\\"days\\\":\\\"5-7\\\",\\\"from\\\":480,\\\"to\\\":960}],\\\"pickupfolder\\\":\\\"/tmp/core-data/update_autoadd\\\",\\\"source\\\":\\\"internet\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"PUT\", \"/admin/config/update\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request PUT \\\n  --url http://localhost:8008/admin/config/update \\\n  --header 'content-type: application/json' \\\n  --data '{\"autoupdateperiod\":240,\"deleteafterimport\":true,\"disabledupdate\":[{\"days\":\"5-7\",\"from\":480,\"to\":960}],\"pickupfolder\":\"/tmp/core-data/update_autoadd\",\"source\":\"internet\"}'"
                    }
                ]
            }
        },
        "/admin/config/skip": {
            "get": {
                "tags": [
                    "config"
                ],
                "summary": "Get 'skip by hash' list",
                "description": "Get the list of hashes whitelisted or blacklisted.",
                "operationId": "configGetSkipHash",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SkipListResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/skip\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/skip\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/skip\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/skip\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/skip\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/skip' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/admin/config/skip\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/admin/config/skip"
                    }
                ]
            },
            "put": {
                "tags": [
                    "config"
                ],
                "summary": "Modify 'skip by hash' list",
                "description": "Modify all the hashes and comments in \"skip-by-hash\" list.\n",
                "operationId": "configUpdateSkipHash",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/skipListRequestBody"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SkipListResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/skip\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/skip\");\nvar request = new RestRequest(Method.PUT);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/skip\")\n  .put(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/skip\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/skip\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/skip' -Method PUT "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"PUT\", \"/admin/config/skip\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request PUT \\\n  --url http://localhost:8008/admin/config/skip"
                    }
                ]
            },
            "post": {
                "tags": [
                    "config"
                ],
                "summary": "Add new hashes to 'skip by hash' list",
                "description": "Add new hashes to 'skip-by-hash' list.",
                "operationId": "configPostSkipHash",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/skipListBody_Post"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SkipListResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/skip\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/skip\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/skip\")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/skip\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/skip\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/skip' -Method POST "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"POST\", \"/admin/config/skip\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/admin/config/skip"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "config"
                ],
                "summary": "Delete hashes from 'skip by hash' list",
                "description": "Delete multiple hashes from \"skip-by-hash\" list.\n",
                "operationId": "configDeleteSkipHash",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/skipListBody_Delete"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SkipListResponse_AfterDeleted"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/skip\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/skip\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/skip\")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/skip\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/skip\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/skip' -Method DELETE "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"DELETE\", \"/admin/config/skip\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request DELETE \\\n  --url http://localhost:8008/admin/config/skip"
                    }
                ]
            }
        },
        "/admin/config/webhook": {
            "get": {
                "tags": [
                    "config"
                ],
                "summary": "Webhook get configuration",
                "description": "Getting settings supported for webhook mode\n",
                "operationId": "configWebhook",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request processed successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminConfigWebhook"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/webhook\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/webhook\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/webhook\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/webhook\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/webhook\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/webhook' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/admin/config/webhook\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/admin/config/webhook"
                    }
                ]
            },
            "put": {
                "tags": [
                    "config"
                ],
                "summary": "Webhook set configuration",
                "description": "Modifying settings supported for webhook mode\n",
                "operationId": "configUpdateWebhook",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AdminConfigWebhook"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request processed successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminConfigWebhook"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/webhook\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"maxretrytime\\\":3,\\\"delayduration\\\":1000,\\\"delayprogression\\\":1000,\\\"requestqueue\\\":100,\\\"transfertimeout\\\":30000,\\\"workercount\\\":1}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/webhook\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"maxretrytime\\\":3,\\\"delayduration\\\":1000,\\\"delayprogression\\\":1000,\\\"requestqueue\\\":100,\\\"transfertimeout\\\":30000,\\\"workercount\\\":1}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"maxretrytime\\\":3,\\\"delayduration\\\":1000,\\\"delayprogression\\\":1000,\\\"requestqueue\\\":100,\\\"transfertimeout\\\":30000,\\\"workercount\\\":1}\");\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/webhook\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/webhook\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  maxretrytime: 3,\n  delayduration: 1000,\n  delayprogression: 1000,\n  requestqueue: 100,\n  transfertimeout: 30000,\n  workercount: 1\n}));\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/webhook\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"maxretrytime\\\":3,\\\"delayduration\\\":1000,\\\"delayprogression\\\":1000,\\\"requestqueue\\\":100,\\\"transfertimeout\\\":30000,\\\"workercount\\\":1}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/json\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/webhook' -Method PUT -Headers $headers -ContentType 'application/json' -Body '{\"maxretrytime\":3,\"delayduration\":1000,\"delayprogression\":1000,\"requestqueue\":100,\"transfertimeout\":30000,\"workercount\":1}'"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\npayload = \"{\\\"maxretrytime\\\":3,\\\"delayduration\\\":1000,\\\"delayprogression\\\":1000,\\\"requestqueue\\\":100,\\\"transfertimeout\\\":30000,\\\"workercount\\\":1}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"PUT\", \"/admin/config/webhook\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request PUT \\\n  --url http://localhost:8008/admin/config/webhook \\\n  --header 'content-type: application/json' \\\n  --data '{\"maxretrytime\":3,\"delayduration\":1000,\"delayprogression\":1000,\"requestqueue\":100,\"transfertimeout\":30000,\"workercount\":1}'"
                    }
                ]
            }
        },
        "/admin/config/proxy": {
            "get": {
                "tags": [
                    "config"
                ],
                "summary": "Get proxy",
                "operationId": "configGetProxy",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ProxyListResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/proxy\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/proxy\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/proxy\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/proxy\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/proxy\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/proxy' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/admin/config/proxy\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/admin/config/proxy"
                    }
                ]
            },
            "put": {
                "tags": [
                    "config"
                ],
                "summary": "Modify proxy",
                "operationId": "configUpdateProxy",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/proxyListRequestBody"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ProxyListResponse"
                    },
                    "400": {
                        "description": "Bad Request (e.g. invalid header, apikey is missing or invalid).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/MissingEnabledField"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ErrorWhileParsingInputJson"
                                        },
                                        {
                                            "$ref": "#/components/schemas/MissingPort"
                                        },
                                        {
                                            "$ref": "#/components/schemas/MissingServerAddress"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProxyRequiresAuthentication"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/proxy\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/proxy\");\nvar request = new RestRequest(Method.PUT);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/proxy\")\n  .put(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/proxy\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/proxy\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/proxy' -Method PUT "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"PUT\", \"/admin/config/proxy\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request PUT \\\n  --url http://localhost:8008/admin/config/proxy"
                    }
                ]
            }
        },
        "/admin/config/proxy/testconnection": {
            "post": {
                "tags": [
                    "config"
                ],
                "summary": "Check connection to proxy server",
                "operationId": "configPostProxyTestconnection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostProxyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "type": "string",
                                            "example": "Test connection succeeded"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g. invalid header, apikey is missing or invalid).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/MissingPort"
                                        },
                                        {
                                            "$ref": "#/components/schemas/MissingServerAddress"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProxyRequiresAuthentication"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/proxy/testconnection\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"enabled\\\":true,\\\"exclusion\\\":\\\"*.dl.opswat.com; 192.168.0.0/24\\\",\\\"port\\\":\\\"3128\\\",\\\"server\\\":\\\"192.168.200.225\\\",\\\"username\\\":\\\"tecmint\\\",\\\"password\\\":\\\"123\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/proxy/testconnection\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"enabled\\\":true,\\\"exclusion\\\":\\\"*.dl.opswat.com; 192.168.0.0/24\\\",\\\"port\\\":\\\"3128\\\",\\\"server\\\":\\\"192.168.200.225\\\",\\\"username\\\":\\\"tecmint\\\",\\\"password\\\":\\\"123\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"enabled\\\":true,\\\"exclusion\\\":\\\"*.dl.opswat.com; 192.168.0.0/24\\\",\\\"port\\\":\\\"3128\\\",\\\"server\\\":\\\"192.168.200.225\\\",\\\"username\\\":\\\"tecmint\\\",\\\"password\\\":\\\"123\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/proxy/testconnection\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/proxy/testconnection\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  enabled: true,\n  exclusion: '*.dl.opswat.com; 192.168.0.0/24',\n  port: '3128',\n  server: '192.168.200.225',\n  username: 'tecmint',\n  password: '123'\n}));\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/proxy/testconnection\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"enabled\\\":true,\\\"exclusion\\\":\\\"*.dl.opswat.com; 192.168.0.0/24\\\",\\\"port\\\":\\\"3128\\\",\\\"server\\\":\\\"192.168.200.225\\\",\\\"username\\\":\\\"tecmint\\\",\\\"password\\\":\\\"123\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/json\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/proxy/testconnection' -Method POST -Headers $headers -ContentType 'application/json' -Body '{\"enabled\":true,\"exclusion\":\"*.dl.opswat.com; 192.168.0.0/24\",\"port\":\"3128\",\"server\":\"192.168.200.225\",\"username\":\"tecmint\",\"password\":\"123\"}'"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\npayload = \"{\\\"enabled\\\":true,\\\"exclusion\\\":\\\"*.dl.opswat.com; 192.168.0.0/24\\\",\\\"port\\\":\\\"3128\\\",\\\"server\\\":\\\"192.168.200.225\\\",\\\"username\\\":\\\"tecmint\\\",\\\"password\\\":\\\"123\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/admin/config/proxy/testconnection\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/admin/config/proxy/testconnection \\\n  --header 'content-type: application/json' \\\n  --data '{\"enabled\":true,\"exclusion\":\"*.dl.opswat.com; 192.168.0.0/24\",\"port\":\"3128\",\"server\":\"192.168.200.225\",\"username\":\"tecmint\",\"password\":\"123\"}'"
                    }
                ]
            }
        },
        "/admin/config/file/sync": {
            "get": {
                "tags": [
                    "config"
                ],
                "summary": "Synchronous scan connection timeout - Retrieval",
                "description": "Retrieving sync scan related connection timeout value (in minutes)\n",
                "operationId": "configGetSyncScanTimeout",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request processed successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminConfigFileSync"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "description": "Error while requesting configuration.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorWhileRequestingConfig"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InternalServerError"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/file/sync\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/file/sync\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/file/sync\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/file/sync\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/file/sync\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/file/sync' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/admin/config/file/sync\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/admin/config/file/sync"
                    }
                ]
            },
            "put": {
                "tags": [
                    "config"
                ],
                "summary": "Synchronous scan connection timeout - Modification",
                "description": "Modifying sync scan related connection timeout value (in minutes)\n",
                "operationId": "configUpdateSyncScanTimeout",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AdminConfigFileSync"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request processed successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminConfigFileSync"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "description": "Error while modifying configuration.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorWhileModifyingConfig"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InternalServerError"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/file/sync\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"timeout\\\":5}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/file/sync\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"timeout\\\":5}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"timeout\\\":5}\");\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/file/sync\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/file/sync\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({timeout: 5}));\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/file/sync\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"timeout\\\":5}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/json\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/file/sync' -Method PUT -Headers $headers -ContentType 'application/json' -Body '{\"timeout\":5}'"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\npayload = \"{\\\"timeout\\\":5}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"PUT\", \"/admin/config/file/sync\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request PUT \\\n  --url http://localhost:8008/admin/config/file/sync \\\n  --header 'content-type: application/json' \\\n  --data '{\"timeout\":5}'"
                    }
                ]
            }
        },
        "/admin/config/sessioncookie": {
            "get": {
                "tags": [
                    "config"
                ],
                "summary": "Get session cookie attributes",
                "description": "Getting session cookie attributes\n",
                "operationId": "configGetSessioncookie",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request processed successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminConfigSessioncookie"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/sessioncookie\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/sessioncookie\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/sessioncookie\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/sessioncookie\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/sessioncookie\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/sessioncookie' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/admin/config/sessioncookie\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/admin/config/sessioncookie"
                    }
                ]
            },
            "put": {
                "tags": [
                    "config"
                ],
                "summary": "Update session cookie attributes",
                "description": "Modifying session cookie attributes\n",
                "operationId": "configPutSessioncookie",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AdminConfigSessioncookie"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request processed successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminConfigSessioncookie"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/sessioncookie\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"samesite\\\":\\\"Strict\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/sessioncookie\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"samesite\\\":\\\"Strict\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"samesite\\\":\\\"Strict\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/sessioncookie\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/sessioncookie\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({samesite: 'Strict'}));\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/sessioncookie\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"samesite\\\":\\\"Strict\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/json\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/sessioncookie' -Method PUT -Headers $headers -ContentType 'application/json' -Body '{\"samesite\":\"Strict\"}'"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\npayload = \"{\\\"samesite\\\":\\\"Strict\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"PUT\", \"/admin/config/sessioncookie\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request PUT \\\n  --url http://localhost:8008/admin/config/sessioncookie \\\n  --header 'content-type: application/json' \\\n  --data '{\"samesite\":\"Strict\"}'"
                    }
                ]
            }
        },
        "/admin/config/customresponseheader": {
            "get": {
                "tags": [
                    "config"
                ],
                "summary": "Get a list of custom response headers",
                "description": "Get a list of custom response headers\n",
                "operationId": "configGetCustomResponseHeader",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request processed successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminConfigCustomResponseHeader"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/customresponseheader\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/customresponseheader\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/customresponseheader\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/customresponseheader\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/customresponseheader\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/customresponseheader' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/admin/config/customresponseheader\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/admin/config/customresponseheader"
                    }
                ]
            },
            "put": {
                "tags": [
                    "config"
                ],
                "summary": "Update list of custom response headers",
                "description": "Modifying list of custom response headers\n",
                "operationId": "configPutCustomResponseHeader",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AdminConfigCustomResponseHeader"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request processed successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminConfigCustomResponseHeader"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/customresponseheader\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"include_address\\\":{\\\"enabled\\\":true,\\\"address_str\\\":\\\"1.2.3.4\\\"},\\\"include_deployment_id\\\":true,\\\"specify_users_agent\\\":{\\\"enabled\\\":true,\\\"allowed_users_agent\\\":[\\\"kiosk\\\",\\\"email\\\"]},\\\"authorized_only\\\":true}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/customresponseheader\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"include_address\\\":{\\\"enabled\\\":true,\\\"address_str\\\":\\\"1.2.3.4\\\"},\\\"include_deployment_id\\\":true,\\\"specify_users_agent\\\":{\\\"enabled\\\":true,\\\"allowed_users_agent\\\":[\\\"kiosk\\\",\\\"email\\\"]},\\\"authorized_only\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"include_address\\\":{\\\"enabled\\\":true,\\\"address_str\\\":\\\"1.2.3.4\\\"},\\\"include_deployment_id\\\":true,\\\"specify_users_agent\\\":{\\\"enabled\\\":true,\\\"allowed_users_agent\\\":[\\\"kiosk\\\",\\\"email\\\"]},\\\"authorized_only\\\":true}\");\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/customresponseheader\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/customresponseheader\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  include_address: {enabled: true, address_str: '1.2.3.4'},\n  include_deployment_id: true,\n  specify_users_agent: {enabled: true, allowed_users_agent: ['kiosk', 'email']},\n  authorized_only: true\n}));\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/customresponseheader\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"include_address\\\":{\\\"enabled\\\":true,\\\"address_str\\\":\\\"1.2.3.4\\\"},\\\"include_deployment_id\\\":true,\\\"specify_users_agent\\\":{\\\"enabled\\\":true,\\\"allowed_users_agent\\\":[\\\"kiosk\\\",\\\"email\\\"]},\\\"authorized_only\\\":true}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/json\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/customresponseheader' -Method PUT -Headers $headers -ContentType 'application/json' -Body '{\"include_address\":{\"enabled\":true,\"address_str\":\"1.2.3.4\"},\"include_deployment_id\":true,\"specify_users_agent\":{\"enabled\":true,\"allowed_users_agent\":[\"kiosk\",\"email\"]},\"authorized_only\":true}'"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\npayload = \"{\\\"include_address\\\":{\\\"enabled\\\":true,\\\"address_str\\\":\\\"1.2.3.4\\\"},\\\"include_deployment_id\\\":true,\\\"specify_users_agent\\\":{\\\"enabled\\\":true,\\\"allowed_users_agent\\\":[\\\"kiosk\\\",\\\"email\\\"]},\\\"authorized_only\\\":true}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"PUT\", \"/admin/config/customresponseheader\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request PUT \\\n  --url http://localhost:8008/admin/config/customresponseheader \\\n  --header 'content-type: application/json' \\\n  --data '{\"include_address\":{\"enabled\":true,\"address_str\":\"1.2.3.4\"},\"include_deployment_id\":true,\"specify_users_agent\":{\"enabled\":true,\"allowed_users_agent\":[\"kiosk\",\"email\"]},\"authorized_only\":true}'"
                    }
                ]
            }
        },
        "/admin/engine/{engineId}/pin": {
            "post": {
                "tags": [
                    "engines"
                ],
                "summary": "Pin engine to prevent auto-updates",
                "description": "Pin engines to prevent applying automatic updates on them. Manual updates still can be applied.",
                "operationId": "enginePin",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    },
                    {
                        "name": "type",
                        "description": "Pin engine or database to prevent applying automatic updates on it.\n(If the type is not defined both engine and database will be pinned.)",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "engine",
                                "database"
                            ],
                            "example": "engine"
                        }
                    },
                    {
                        "name": "engineId",
                        "description": "The unique engine identifier",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "clamav_7_linux"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "type": "string",
                                            "enum": [
                                                "Engine is pinned",
                                                "Database is pinned",
                                                "Both engine and database are pinned"
                                            ],
                                            "example": "Both engine and database are pinned"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/engine/%7BengineId%7D/pin\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"type: SOME_STRING_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/engine/%7BengineId%7D/pin\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"type\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/engine/%7BengineId%7D/pin\")\n  .post(null)\n  .addHeader(\"type\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/engine/%7BengineId%7D/pin\",\n  \"headers\": {\n    \"type\": \"SOME_STRING_VALUE\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/engine/%7BengineId%7D/pin\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => array(\n    \"type: SOME_STRING_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"type\", \"SOME_STRING_VALUE\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/engine/%7BengineId%7D/pin' -Method POST -Headers $headers"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nheaders = { 'type': \"SOME_STRING_VALUE\" }\n\nconn.request(\"POST\", \"/admin/engine/%7BengineId%7D/pin\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/admin/engine/%7BengineId%7D/pin \\\n  --header 'type: SOME_STRING_VALUE'"
                    }
                ]
            }
        },
        "/admin/engine/{engineId}/unpin": {
            "post": {
                "tags": [
                    "engines"
                ],
                "summary": "Unpin engine to prevent auto-updates",
                "description": "Unpin engines so automatic updates will be applied on them.",
                "operationId": "engineUnpin",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    },
                    {
                        "name": "type",
                        "description": "Unpin engine or database to applying automatic updates on it.\n(If it is not defined both engine and database will be unpinned.)",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "engine",
                                "database"
                            ],
                            "example": "engine"
                        }
                    },
                    {
                        "name": "engineId",
                        "description": "The unique engine identifier",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "clamav_7_linux"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "type": "string",
                                            "enum": [
                                                "Engine is unpinned",
                                                "Database is unpinned",
                                                "Both engine and database are unpinned"
                                            ],
                                            "example": "Both engine and database are unpinned"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/engine/%7BengineId%7D/unpin\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"type: SOME_STRING_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/engine/%7BengineId%7D/unpin\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"type\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/engine/%7BengineId%7D/unpin\")\n  .post(null)\n  .addHeader(\"type\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/engine/%7BengineId%7D/unpin\",\n  \"headers\": {\n    \"type\": \"SOME_STRING_VALUE\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/engine/%7BengineId%7D/unpin\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => array(\n    \"type: SOME_STRING_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"type\", \"SOME_STRING_VALUE\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/engine/%7BengineId%7D/unpin' -Method POST -Headers $headers"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nheaders = { 'type': \"SOME_STRING_VALUE\" }\n\nconn.request(\"POST\", \"/admin/engine/%7BengineId%7D/unpin\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/admin/engine/%7BengineId%7D/unpin \\\n  --header 'type: SOME_STRING_VALUE'"
                    }
                ]
            }
        },
        "/admin/engine/{engineId}/enable": {
            "post": {
                "tags": [
                    "engines"
                ],
                "summary": "Enable engines",
                "description": "Enable to use the selected engine on the nodes.",
                "operationId": "engineEnable",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    },
                    {
                        "name": "engineId",
                        "description": "The unique engine identifier",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "clamav_7_linux"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "type": "string",
                                            "example": "Engine is enabled"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/engine/%7BengineId%7D/enable\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/engine/%7BengineId%7D/enable\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/engine/%7BengineId%7D/enable\")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/engine/%7BengineId%7D/enable\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/engine/%7BengineId%7D/enable\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/engine/%7BengineId%7D/enable' -Method POST "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"POST\", \"/admin/engine/%7BengineId%7D/enable\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/admin/engine/%7BengineId%7D/enable"
                    }
                ]
            }
        },
        "/admin/engine/{engineId}/disable": {
            "post": {
                "tags": [
                    "engines"
                ],
                "summary": "Disable engines",
                "description": "Disable to use the selected engines on the nodes.",
                "operationId": "engineDisable",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    },
                    {
                        "name": "engineId",
                        "description": "The unique engine identifier",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "clamav_7_linux"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "type": "string",
                                            "example": "Engine is disabled"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/engine/%7BengineId%7D/disable\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/engine/%7BengineId%7D/disable\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/engine/%7BengineId%7D/disable\")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/engine/%7BengineId%7D/disable\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/engine/%7BengineId%7D/disable\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/engine/%7BengineId%7D/disable' -Method POST "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"POST\", \"/admin/engine/%7BengineId%7D/disable\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/admin/engine/%7BengineId%7D/disable"
                    }
                ]
            }
        },
        "/admin/engine/{engineId}/config": {
            "get": {
                "tags": [
                    "engines"
                ],
                "summary": "Retrieve engine configuration",
                "description": "Retrieve a list of advanced configuration of an engine.",
                "operationId": "engineConfigGet",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    },
                    {
                        "name": "engineId",
                        "description": "The unique engine identifier",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "ahnlab_1_windows"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "Each engine has different number and types of configurations",
                                    "example": {
                                        "enable_cloud_scan": false,
                                        "enable_pup_scan": false,
                                        "extract_archive": false,
                                        "log_level": 3
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/engine/%7BengineId%7D/config\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/engine/%7BengineId%7D/config\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/engine/%7BengineId%7D/config\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/engine/%7BengineId%7D/config\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/engine/%7BengineId%7D/config\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/engine/%7BengineId%7D/config' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/admin/engine/%7BengineId%7D/config\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/admin/engine/%7BengineId%7D/config"
                    }
                ]
            },
            "put": {
                "tags": [
                    "engines"
                ],
                "summary": "Update engine configuration",
                "description": "Modifying advanced configurations of an engine.",
                "operationId": "engineConfigPut",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    },
                    {
                        "name": "engineId",
                        "description": "The unique engine identifier",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "ahnlab_1_windows"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "Each engine has different number and types of configurations",
                                    "example": {
                                        "enable_cloud_scan": true,
                                        "enable_pup_scan": false,
                                        "extract_archive": true,
                                        "log_level": 2
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/engine/%7BengineId%7D/config\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/engine/%7BengineId%7D/config\");\nvar request = new RestRequest(Method.PUT);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/engine/%7BengineId%7D/config\")\n  .put(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/engine/%7BengineId%7D/config\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/engine/%7BengineId%7D/config\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/engine/%7BengineId%7D/config' -Method PUT "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"PUT\", \"/admin/engine/%7BengineId%7D/config\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request PUT \\\n  --url http://localhost:8008/admin/engine/%7BengineId%7D/config"
                    }
                ]
            }
        },
        "/admin/config/healthcheck": {
            "get": {
                "tags": [
                    "config"
                ],
                "summary": "Get health check",
                "operationId": "configGetHealthCheck",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Response"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/healthcheck\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/healthcheck\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/healthcheck\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/healthcheck\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/healthcheck\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/healthcheck' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/admin/config/healthcheck\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/admin/config/healthcheck"
                    }
                ]
            },
            "post": {
                "tags": [
                    "config"
                ],
                "summary": "Modify health check",
                "operationId": "configUpdateHealthCheck",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/RequestBody"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Response"
                    },
                    "400": {
                        "description": "Bad Request (e.g. invalid header, apikey is missing or invalid).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/SetRequiredEngineFailedWhenInvalidLicense"
                                        },
                                        {
                                            "$ref": "#/components/schemas/SetRequiredEngineFailedWhenInvalidEngine"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error while modifying configuration.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorWhileModifyingConfig"
                                }
                            }
                        }
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/healthcheck\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/healthcheck\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/healthcheck\")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/healthcheck\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/healthcheck\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/healthcheck' -Method POST "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"POST\", \"/admin/config/healthcheck\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/admin/config/healthcheck"
                    }
                ]
            }
        },
        "/admin/export": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Export configuration",
                "description": "Export configuration from file.",
                "operationId": "adminExport",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "file",
                                    "example": "{\n  \"config\": {\n      \"policy.rule.rule\": {\n          \"items\": [\n              {\n                  \"active\": true,\n                  \"allow_cert\": false,\n                  \"allow_cert.cert\": \"None\",\n... }"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "description": "Failed to export configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "example": {
                                    "err": "Failed to export configuration"
                                }
                            }
                        }
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/export\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/export\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/export\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/export\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/export\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/export' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/admin/export\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/admin/export"
                    }
                ]
            }
        },
        "/admin/export/v2": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Export configuration (new version)",
                "description": "Export configuration from file (new version)",
                "operationId": "adminExportV2",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    },
                    {
                        "name": "password",
                        "description": "Password to encrypt all the settings after exporting from MetaDefender Core. Only applicable when importing ZIP file.\n",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "example": {
                                    "err": "Unable to export new configuration"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/export/v2\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"password: SOME_STRING_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/export/v2\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"password\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/export/v2\")\n  .get()\n  .addHeader(\"password\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/export/v2\",\n  \"headers\": {\n    \"password\": \"SOME_STRING_VALUE\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/export/v2\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"password: SOME_STRING_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"password\", \"SOME_STRING_VALUE\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/export/v2' -Method GET -Headers $headers"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nheaders = { 'password': \"SOME_STRING_VALUE\" }\n\nconn.request(\"GET\", \"/admin/export/v2\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/admin/export/v2 \\\n  --header 'password: SOME_STRING_VALUE'"
                    }
                ]
            }
        },
        "/admin/import": {
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Import configuration",
                "description": "Import configuration from file.",
                "operationId": "adminImport",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "format": "file",
                                "example": "{\n  \"config\": {\n      \"policy.rule.rule\": {\n          \"items\": [\n              {\n                  \"active\": true,\n                  \"allow_cert\": false,\n                  \"allow_cert.cert\": \"None\",\n... }"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "type": "string",
                                            "example": "Successfully imported"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "The configuration has not changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "example": {}
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/import\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"\\\"{\\\\n  \\\\\\\"config\\\\\\\": {\\\\n      \\\\\\\"policy.rule.rule\\\\\\\": {\\\\n          \\\\\\\"items\\\\\\\": [\\\\n              {\\\\n                  \\\\\\\"active\\\\\\\": true,\\\\n                  \\\\\\\"allow_cert\\\\\\\": false,\\\\n                  \\\\\\\"allow_cert.cert\\\\\\\": \\\\\\\"None\\\\\\\",\\\\n... }\\\"\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/import\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"\\\"{\\\\n  \\\\\\\"config\\\\\\\": {\\\\n      \\\\\\\"policy.rule.rule\\\\\\\": {\\\\n          \\\\\\\"items\\\\\\\": [\\\\n              {\\\\n                  \\\\\\\"active\\\\\\\": true,\\\\n                  \\\\\\\"allow_cert\\\\\\\": false,\\\\n                  \\\\\\\"allow_cert.cert\\\\\\\": \\\\\\\"None\\\\\\\",\\\\n... }\\\"\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"\\\"{\\\\n  \\\\\\\"config\\\\\\\": {\\\\n      \\\\\\\"policy.rule.rule\\\\\\\": {\\\\n          \\\\\\\"items\\\\\\\": [\\\\n              {\\\\n                  \\\\\\\"active\\\\\\\": true,\\\\n                  \\\\\\\"allow_cert\\\\\\\": false,\\\\n                  \\\\\\\"allow_cert.cert\\\\\\\": \\\\\\\"None\\\\\\\",\\\\n... }\\\"\");\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/import\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/import\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify('{\\n  \"config\": {\\n      \"policy.rule.rule\": {\\n          \"items\": [\\n              {\\n                  \"active\": true,\\n                  \"allow_cert\": false,\\n                  \"allow_cert.cert\": \"None\",\\n... }'));\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/import\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"\\\"{\\\\n  \\\\\\\"config\\\\\\\": {\\\\n      \\\\\\\"policy.rule.rule\\\\\\\": {\\\\n          \\\\\\\"items\\\\\\\": [\\\\n              {\\\\n                  \\\\\\\"active\\\\\\\": true,\\\\n                  \\\\\\\"allow_cert\\\\\\\": false,\\\\n                  \\\\\\\"allow_cert.cert\\\\\\\": \\\\\\\"None\\\\\\\",\\\\n... }\\\"\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/json\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/import' -Method POST -Headers $headers -ContentType 'application/json' -Body '\"{\\n  \\\"config\\\": {\\n      \\\"policy.rule.rule\\\": {\\n          \\\"items\\\": [\\n              {\\n                  \\\"active\\\": true,\\n                  \\\"allow_cert\\\": false,\\n                  \\\"allow_cert.cert\\\": \\\"None\\\",\\n... }\"'"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\npayload = \"\\\"{\\\\n  \\\\\\\"config\\\\\\\": {\\\\n      \\\\\\\"policy.rule.rule\\\\\\\": {\\\\n          \\\\\\\"items\\\\\\\": [\\\\n              {\\\\n                  \\\\\\\"active\\\\\\\": true,\\\\n                  \\\\\\\"allow_cert\\\\\\\": false,\\\\n                  \\\\\\\"allow_cert.cert\\\\\\\": \\\\\\\"None\\\\\\\",\\\\n... }\\\"\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/admin/import\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/admin/import \\\n  --header 'content-type: application/json' \\\n  --data '\"{\\n  \\\"config\\\": {\\n      \\\"policy.rule.rule\\\": {\\n          \\\"items\\\": [\\n              {\\n                  \\\"active\\\": true,\\n                  \\\"allow_cert\\\": false,\\n                  \\\"allow_cert.cert\\\": \\\"None\\\",\\n... }\"'"
                    }
                ]
            }
        },
        "/admin/import/v2": {
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Import configuration (new version)",
                "description": "Import configuration from file (new version)",
                "operationId": "adminImportV2",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    },
                    {
                        "name": "password",
                        "description": "Password to decrypt all the settings before importing. Only applicable when importing ZIP file.\n",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Body can be an old-fashioned JSON config or the brand new format ZIP file",
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "type": "string",
                                            "example": "Successfully imported"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "The configuration has not changed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "example": {}
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "json",
                                    "example": "{\n    \"err\": \"Invalid item for type: rule\",\n    \"err_details\": {\n        \"errors\": [\n            {\n                \"error\": \"The value out of range. Accepted values: min = 1, max = 50\",\n                \"key\": \"scan.filescan.check_av_engine.av_engine_number\",\n                \"value\": -1\n            }\n        ],\n        \"name\": \"MetaDefender Vault\"\n    }\n}"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/import/v2\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/octet-stream\");\nheaders = curl_slist_append(headers, \"password: SOME_STRING_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/import/v2\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/octet-stream\");\nrequest.AddHeader(\"password\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/import/v2\")\n  .post(null)\n  .addHeader(\"content-type\", \"application/octet-stream\")\n  .addHeader(\"password\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/import/v2\",\n  \"headers\": {\n    \"content-type\": \"application/octet-stream\",\n    \"password\": \"SOME_STRING_VALUE\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/import/v2\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/octet-stream\",\n    \"password: SOME_STRING_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/octet-stream\")\n$headers.Add(\"password\", \"SOME_STRING_VALUE\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/import/v2' -Method POST -Headers $headers"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nheaders = {\n    'content-type': \"application/octet-stream\",\n    'password': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/admin/import/v2\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/admin/import/v2 \\\n  --header 'content-type: application/octet-stream' \\\n  --header 'password: SOME_STRING_VALUE'"
                    }
                ]
            }
        },
        "/admin/user": {
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Create user",
                "description": "",
                "operationId": "userCreate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request processed successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/user\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"api_key\\\":\\\"b8a4b52f19de88e365aa4f7e403fa91b352f\\\",\\\"directory_id\\\":1,\\\"display_name\\\":\\\"jsmith\\\",\\\"email\\\":\\\"john.smith@company.com\\\",\\\"name\\\":\\\"John Smith\\\",\\\"roles\\\":[\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"...\\\"],\\\"ui_settings\\\":{\\\"refresh_rate\\\":{\\\"value\\\":30},\\\"time_period\\\":{\\\"value\\\":24,\\\"unitsInHour\\\":1}},\\\"password\\\":\\\"HG&B*!C!KLEF#RH*#*(($YB\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/user\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"api_key\\\":\\\"b8a4b52f19de88e365aa4f7e403fa91b352f\\\",\\\"directory_id\\\":1,\\\"display_name\\\":\\\"jsmith\\\",\\\"email\\\":\\\"john.smith@company.com\\\",\\\"name\\\":\\\"John Smith\\\",\\\"roles\\\":[\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"...\\\"],\\\"ui_settings\\\":{\\\"refresh_rate\\\":{\\\"value\\\":30},\\\"time_period\\\":{\\\"value\\\":24,\\\"unitsInHour\\\":1}},\\\"password\\\":\\\"HG&B*!C!KLEF#RH*#*(($YB\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"api_key\\\":\\\"b8a4b52f19de88e365aa4f7e403fa91b352f\\\",\\\"directory_id\\\":1,\\\"display_name\\\":\\\"jsmith\\\",\\\"email\\\":\\\"john.smith@company.com\\\",\\\"name\\\":\\\"John Smith\\\",\\\"roles\\\":[\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"...\\\"],\\\"ui_settings\\\":{\\\"refresh_rate\\\":{\\\"value\\\":30},\\\"time_period\\\":{\\\"value\\\":24,\\\"unitsInHour\\\":1}},\\\"password\\\":\\\"HG&B*!C!KLEF#RH*#*(($YB\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/user\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/user\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  api_key: 'b8a4b52f19de88e365aa4f7e403fa91b352f',\n  directory_id: 1,\n  display_name: 'jsmith',\n  email: 'john.smith@company.com',\n  name: 'John Smith',\n  roles: ['1', '2', '3', '...'],\n  ui_settings: {refresh_rate: {value: 30}, time_period: {value: 24, unitsInHour: 1}},\n  password: 'HG&B*!C!KLEF#RH*#*(($YB'\n}));\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/user\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"api_key\\\":\\\"b8a4b52f19de88e365aa4f7e403fa91b352f\\\",\\\"directory_id\\\":1,\\\"display_name\\\":\\\"jsmith\\\",\\\"email\\\":\\\"john.smith@company.com\\\",\\\"name\\\":\\\"John Smith\\\",\\\"roles\\\":[\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"...\\\"],\\\"ui_settings\\\":{\\\"refresh_rate\\\":{\\\"value\\\":30},\\\"time_period\\\":{\\\"value\\\":24,\\\"unitsInHour\\\":1}},\\\"password\\\":\\\"HG&B*!C!KLEF#RH*#*(($YB\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/json\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/user' -Method POST -Headers $headers -ContentType 'application/json' -Body '{\"api_key\":\"b8a4b52f19de88e365aa4f7e403fa91b352f\",\"directory_id\":1,\"display_name\":\"jsmith\",\"email\":\"john.smith@company.com\",\"name\":\"John Smith\",\"roles\":[\"1\",\"2\",\"3\",\"...\"],\"ui_settings\":{\"refresh_rate\":{\"value\":30},\"time_period\":{\"value\":24,\"unitsInHour\":1}},\"password\":\"HG&B*!C!KLEF#RH*#*(($YB\"}'"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\npayload = \"{\\\"api_key\\\":\\\"b8a4b52f19de88e365aa4f7e403fa91b352f\\\",\\\"directory_id\\\":1,\\\"display_name\\\":\\\"jsmith\\\",\\\"email\\\":\\\"john.smith@company.com\\\",\\\"name\\\":\\\"John Smith\\\",\\\"roles\\\":[\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"...\\\"],\\\"ui_settings\\\":{\\\"refresh_rate\\\":{\\\"value\\\":30},\\\"time_period\\\":{\\\"value\\\":24,\\\"unitsInHour\\\":1}},\\\"password\\\":\\\"HG&B*!C!KLEF#RH*#*(($YB\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/admin/user\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/admin/user \\\n  --header 'content-type: application/json' \\\n  --data '{\"api_key\":\"b8a4b52f19de88e365aa4f7e403fa91b352f\",\"directory_id\":1,\"display_name\":\"jsmith\",\"email\":\"john.smith@company.com\",\"name\":\"John Smith\",\"roles\":[\"1\",\"2\",\"3\",\"...\"],\"ui_settings\":{\"refresh_rate\":{\"value\":30},\"time_period\":{\"value\":24,\"unitsInHour\":1}},\"password\":\"HG&B*!C!KLEF#RH*#*(($YB\"}'"
                    }
                ]
            }
        },
        "/admin/role": {
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Create new role",
                "description": "Add a new user role to the system.",
                "operationId": "roleCreate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewUserRoleRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NewUserRoleResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/role\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"name\\\":\\\"new_role\\\",\\\"display_name\\\":\\\"New MetaDefender User Role\\\",\\\"rights\\\":{\\\"agents\\\":[\\\"read\\\",\\\"write\\\"],\\\"cert\\\":[\\\"read\\\",\\\"write\\\"],\\\"configlog\\\":[\\\"read\\\",\\\"write\\\"],\\\"engines\\\":[\\\"read\\\",\\\"write\\\"],\\\"external\\\":[\\\"read\\\",\\\"write\\\"],\\\"license\\\":[\\\"read\\\",\\\"write\\\"],\\\"quarantine\\\":[\\\"read\\\",\\\"write\\\"],\\\"retention\\\":[\\\"read\\\",\\\"write\\\"],\\\"rule\\\":[\\\"read\\\",\\\"write\\\"],\\\"scan\\\":[\\\"read\\\",\\\"write\\\"],\\\"scanlog\\\":[\\\"read\\\",\\\"write\\\"],\\\"skip\\\":[\\\"read\\\",\\\"write\\\"],\\\"update\\\":[\\\"read\\\",\\\"write\\\"],\\\"updatelog\\\":[\\\"read\\\",\\\"write\\\"],\\\"users\\\":[\\\"read\\\",\\\"write\\\"],\\\"workflow\\\":[\\\"read\\\",\\\"write\\\"],\\\"zone\\\":[\\\"read\\\",\\\"write\\\"]}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/role\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"new_role\\\",\\\"display_name\\\":\\\"New MetaDefender User Role\\\",\\\"rights\\\":{\\\"agents\\\":[\\\"read\\\",\\\"write\\\"],\\\"cert\\\":[\\\"read\\\",\\\"write\\\"],\\\"configlog\\\":[\\\"read\\\",\\\"write\\\"],\\\"engines\\\":[\\\"read\\\",\\\"write\\\"],\\\"external\\\":[\\\"read\\\",\\\"write\\\"],\\\"license\\\":[\\\"read\\\",\\\"write\\\"],\\\"quarantine\\\":[\\\"read\\\",\\\"write\\\"],\\\"retention\\\":[\\\"read\\\",\\\"write\\\"],\\\"rule\\\":[\\\"read\\\",\\\"write\\\"],\\\"scan\\\":[\\\"read\\\",\\\"write\\\"],\\\"scanlog\\\":[\\\"read\\\",\\\"write\\\"],\\\"skip\\\":[\\\"read\\\",\\\"write\\\"],\\\"update\\\":[\\\"read\\\",\\\"write\\\"],\\\"updatelog\\\":[\\\"read\\\",\\\"write\\\"],\\\"users\\\":[\\\"read\\\",\\\"write\\\"],\\\"workflow\\\":[\\\"read\\\",\\\"write\\\"],\\\"zone\\\":[\\\"read\\\",\\\"write\\\"]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"name\\\":\\\"new_role\\\",\\\"display_name\\\":\\\"New MetaDefender User Role\\\",\\\"rights\\\":{\\\"agents\\\":[\\\"read\\\",\\\"write\\\"],\\\"cert\\\":[\\\"read\\\",\\\"write\\\"],\\\"configlog\\\":[\\\"read\\\",\\\"write\\\"],\\\"engines\\\":[\\\"read\\\",\\\"write\\\"],\\\"external\\\":[\\\"read\\\",\\\"write\\\"],\\\"license\\\":[\\\"read\\\",\\\"write\\\"],\\\"quarantine\\\":[\\\"read\\\",\\\"write\\\"],\\\"retention\\\":[\\\"read\\\",\\\"write\\\"],\\\"rule\\\":[\\\"read\\\",\\\"write\\\"],\\\"scan\\\":[\\\"read\\\",\\\"write\\\"],\\\"scanlog\\\":[\\\"read\\\",\\\"write\\\"],\\\"skip\\\":[\\\"read\\\",\\\"write\\\"],\\\"update\\\":[\\\"read\\\",\\\"write\\\"],\\\"updatelog\\\":[\\\"read\\\",\\\"write\\\"],\\\"users\\\":[\\\"read\\\",\\\"write\\\"],\\\"workflow\\\":[\\\"read\\\",\\\"write\\\"],\\\"zone\\\":[\\\"read\\\",\\\"write\\\"]}}\");\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/role\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/role\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'new_role',\n  display_name: 'New MetaDefender User Role',\n  rights: {\n    agents: ['read', 'write'],\n    cert: ['read', 'write'],\n    configlog: ['read', 'write'],\n    engines: ['read', 'write'],\n    external: ['read', 'write'],\n    license: ['read', 'write'],\n    quarantine: ['read', 'write'],\n    retention: ['read', 'write'],\n    rule: ['read', 'write'],\n    scan: ['read', 'write'],\n    scanlog: ['read', 'write'],\n    skip: ['read', 'write'],\n    update: ['read', 'write'],\n    updatelog: ['read', 'write'],\n    users: ['read', 'write'],\n    workflow: ['read', 'write'],\n    zone: ['read', 'write']\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/role\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"new_role\\\",\\\"display_name\\\":\\\"New MetaDefender User Role\\\",\\\"rights\\\":{\\\"agents\\\":[\\\"read\\\",\\\"write\\\"],\\\"cert\\\":[\\\"read\\\",\\\"write\\\"],\\\"configlog\\\":[\\\"read\\\",\\\"write\\\"],\\\"engines\\\":[\\\"read\\\",\\\"write\\\"],\\\"external\\\":[\\\"read\\\",\\\"write\\\"],\\\"license\\\":[\\\"read\\\",\\\"write\\\"],\\\"quarantine\\\":[\\\"read\\\",\\\"write\\\"],\\\"retention\\\":[\\\"read\\\",\\\"write\\\"],\\\"rule\\\":[\\\"read\\\",\\\"write\\\"],\\\"scan\\\":[\\\"read\\\",\\\"write\\\"],\\\"scanlog\\\":[\\\"read\\\",\\\"write\\\"],\\\"skip\\\":[\\\"read\\\",\\\"write\\\"],\\\"update\\\":[\\\"read\\\",\\\"write\\\"],\\\"updatelog\\\":[\\\"read\\\",\\\"write\\\"],\\\"users\\\":[\\\"read\\\",\\\"write\\\"],\\\"workflow\\\":[\\\"read\\\",\\\"write\\\"],\\\"zone\\\":[\\\"read\\\",\\\"write\\\"]}}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/json\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/role' -Method POST -Headers $headers -ContentType 'application/json' -Body '{\"name\":\"new_role\",\"display_name\":\"New MetaDefender User Role\",\"rights\":{\"agents\":[\"read\",\"write\"],\"cert\":[\"read\",\"write\"],\"configlog\":[\"read\",\"write\"],\"engines\":[\"read\",\"write\"],\"external\":[\"read\",\"write\"],\"license\":[\"read\",\"write\"],\"quarantine\":[\"read\",\"write\"],\"retention\":[\"read\",\"write\"],\"rule\":[\"read\",\"write\"],\"scan\":[\"read\",\"write\"],\"scanlog\":[\"read\",\"write\"],\"skip\":[\"read\",\"write\"],\"update\":[\"read\",\"write\"],\"updatelog\":[\"read\",\"write\"],\"users\":[\"read\",\"write\"],\"workflow\":[\"read\",\"write\"],\"zone\":[\"read\",\"write\"]}}'"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\npayload = \"{\\\"name\\\":\\\"new_role\\\",\\\"display_name\\\":\\\"New MetaDefender User Role\\\",\\\"rights\\\":{\\\"agents\\\":[\\\"read\\\",\\\"write\\\"],\\\"cert\\\":[\\\"read\\\",\\\"write\\\"],\\\"configlog\\\":[\\\"read\\\",\\\"write\\\"],\\\"engines\\\":[\\\"read\\\",\\\"write\\\"],\\\"external\\\":[\\\"read\\\",\\\"write\\\"],\\\"license\\\":[\\\"read\\\",\\\"write\\\"],\\\"quarantine\\\":[\\\"read\\\",\\\"write\\\"],\\\"retention\\\":[\\\"read\\\",\\\"write\\\"],\\\"rule\\\":[\\\"read\\\",\\\"write\\\"],\\\"scan\\\":[\\\"read\\\",\\\"write\\\"],\\\"scanlog\\\":[\\\"read\\\",\\\"write\\\"],\\\"skip\\\":[\\\"read\\\",\\\"write\\\"],\\\"update\\\":[\\\"read\\\",\\\"write\\\"],\\\"updatelog\\\":[\\\"read\\\",\\\"write\\\"],\\\"users\\\":[\\\"read\\\",\\\"write\\\"],\\\"workflow\\\":[\\\"read\\\",\\\"write\\\"],\\\"zone\\\":[\\\"read\\\",\\\"write\\\"]}}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/admin/role\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/admin/role \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"new_role\",\"display_name\":\"New MetaDefender User Role\",\"rights\":{\"agents\":[\"read\",\"write\"],\"cert\":[\"read\",\"write\"],\"configlog\":[\"read\",\"write\"],\"engines\":[\"read\",\"write\"],\"external\":[\"read\",\"write\"],\"license\":[\"read\",\"write\"],\"quarantine\":[\"read\",\"write\"],\"retention\":[\"read\",\"write\"],\"rule\":[\"read\",\"write\"],\"scan\":[\"read\",\"write\"],\"scanlog\":[\"read\",\"write\"],\"skip\":[\"read\",\"write\"],\"update\":[\"read\",\"write\"],\"updatelog\":[\"read\",\"write\"],\"users\":[\"read\",\"write\"],\"workflow\":[\"read\",\"write\"],\"zone\":[\"read\",\"write\"]}}'"
                    }
                ]
            }
        },
        "/user/changepassword": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Change Password",
                "description": "Modify the current password for the user identified by apikey",
                "operationId": "userChangePass",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "old_password": {
                                        "type": "string",
                                        "description": "The current password in plain text"
                                    },
                                    "new_password": {
                                        "type": "string",
                                        "description": "The new password in plain text"
                                    }
                                }
                            },
                            "example": {
                                "old_password": "admin",
                                "new_password": "123456"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success200"
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/user/changepassword\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"old_password\\\":\\\"string\\\",\\\"new_password\\\":\\\"string\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/user/changepassword\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"old_password\\\":\\\"string\\\",\\\"new_password\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"old_password\\\":\\\"string\\\",\\\"new_password\\\":\\\"string\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/user/changepassword\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/user/changepassword\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({old_password: 'string', new_password: 'string'}));\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/user/changepassword\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"old_password\\\":\\\"string\\\",\\\"new_password\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/json\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/user/changepassword' -Method POST -Headers $headers -ContentType 'application/json' -Body '{\"old_password\":\"string\",\"new_password\":\"string\"}'"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\npayload = \"{\\\"old_password\\\":\\\"string\\\",\\\"new_password\\\":\\\"string\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/user/changepassword\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/user/changepassword \\\n  --header 'content-type: application/json' \\\n  --data '{\"old_password\":\"string\",\"new_password\":\"string\"}'"
                    }
                ]
            }
        },
        "/admin/config/yara/sources": {
            "get": {
                "tags": [
                    "yara"
                ],
                "summary": "Get Yara sources",
                "description": "Retrieve a list of all sources for the Yara Engine.",
                "operationId": "yaraSourcesGet",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/YaraResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/yara/sources\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/yara/sources\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/yara/sources\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/yara/sources\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/yara/sources\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/yara/sources' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/admin/config/yara/sources\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/admin/config/yara/sources"
                    }
                ]
            },
            "put": {
                "tags": [
                    "yara"
                ],
                "summary": "Modify Yara sources",
                "description": "Modify one (or more) of the sources for the Yara Engine.",
                "operationId": "yaraSourcesPut",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/yaraRequestBody"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/YaraResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/config/yara/sources\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/config/yara/sources\");\nvar request = new RestRequest(Method.PUT);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/config/yara/sources\")\n  .put(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/config/yara/sources\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/config/yara/sources\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/config/yara/sources' -Method PUT "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"PUT\", \"/admin/config/yara/sources\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request PUT \\\n  --url http://localhost:8008/admin/config/yara/sources"
                    }
                ]
            }
        },
        "/admin/license/backup": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Retrieve hot-backup instance",
                "operationId": "getLicenseBackup",
                "description": "This API to set a MetaDefender Core as a backup instance.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "is_backup": {
                                            "description": "The instance is a backup or not.",
                                            "type": "boolean"
                                        }
                                    }
                                },
                                "example": {
                                    "is_backup": true
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/license/backup\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/license/backup\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/license/backup\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/license/backup\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/license/backup\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/license/backup' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/admin/license/backup\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/admin/license/backup"
                    }
                ]
            },
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Setup hot-backup instance",
                "operationId": "postLicenseBackup",
                "description": "This API to set a MetaDefender Core as a backup instance.\n\n  * `Online environment`: you need to input activation-key and active-deployment-id headers\n  * `Offline environment`:\n    * Obtain license.yml file that supposed to use to active your MetaDefender Core active / production instance before.\n    * Use that yaml file content in body content of the REST API.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    },
                    {
                        "name": "active-deployment-id",
                        "description": "Deployment ID of the main MetaDefender Core which is currently working, and you want to backup it.\n",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activation-key",
                        "description": "Activation key",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Only required when registering hot-backup instance in offline environment",
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "description": "Successful message"
                                        }
                                    }
                                },
                                "example": {
                                    "success": "The backup MetaDefender Core instance is now registered as a backup one."
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/license/backup\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/octet-stream\");\nheaders = curl_slist_append(headers, \"active-deployment-id: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"activation-key: SOME_STRING_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/license/backup\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/octet-stream\");\nrequest.AddHeader(\"active-deployment-id\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"activation-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/license/backup\")\n  .post(null)\n  .addHeader(\"content-type\", \"application/octet-stream\")\n  .addHeader(\"active-deployment-id\", \"SOME_STRING_VALUE\")\n  .addHeader(\"activation-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/license/backup\",\n  \"headers\": {\n    \"content-type\": \"application/octet-stream\",\n    \"active-deployment-id\": \"SOME_STRING_VALUE\",\n    \"activation-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/license/backup\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => array(\n    \"activation-key: SOME_STRING_VALUE\",\n    \"active-deployment-id: SOME_STRING_VALUE\",\n    \"content-type: application/octet-stream\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"content-type\", \"application/octet-stream\")\n$headers.Add(\"active-deployment-id\", \"SOME_STRING_VALUE\")\n$headers.Add(\"activation-key\", \"SOME_STRING_VALUE\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/license/backup' -Method POST -Headers $headers"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nheaders = {\n    'content-type': \"application/octet-stream\",\n    'active-deployment-id': \"SOME_STRING_VALUE\",\n    'activation-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/admin/license/backup\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/admin/license/backup \\\n  --header 'activation-key: SOME_STRING_VALUE' \\\n  --header 'active-deployment-id: SOME_STRING_VALUE' \\\n  --header 'content-type: application/octet-stream'"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "admin"
                ],
                "summary": "Remove a backup instance",
                "operationId": "removeBackupInstance",
                "description": "This API to remove a backup instance.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "description": "Successful message"
                                        }
                                    }
                                },
                                "example": {
                                    "success": "This MetaDefender Core instance is no longer registered as a backup one."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "string",
                                            "description": "Error reason"
                                        }
                                    }
                                },
                                "example": {
                                    "err": "Failed to remove backup license"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/license/backup\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/license/backup\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/license/backup\")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/license/backup\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/license/backup\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/license/backup' -Method DELETE "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"DELETE\", \"/admin/license/backup\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request DELETE \\\n  --url http://localhost:8008/admin/license/backup"
                    }
                ]
            }
        },
        "/admin/license/backup/nomination": {
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Nominate a backup instance to a production instance",
                "operationId": "licenseBackupNomination",
                "description": "This API to nominate a backup instance to a production instance.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "description": "Successful message"
                                        }
                                    }
                                },
                                "example": {
                                    "success": "This MetaDefender Core instance is now fully activated and allowed to process files."
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/admin/license/backup/nomination\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/admin/license/backup/nomination\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/admin/license/backup/nomination\")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/admin/license/backup/nomination\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/admin/license/backup/nomination\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/admin/license/backup/nomination' -Method POST "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"POST\", \"/admin/license/backup/nomination\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/admin/license/backup/nomination"
                    }
                ]
            }
        },
        "/yara/package": {
            "get": {
                "tags": [
                    "yara"
                ],
                "summary": "Yara Generation Status",
                "description": "Get status of Yara package generation.",
                "operationId": "yaraPackageStatus",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/YaraGenerationResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/yara/package\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/yara/package\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/yara/package\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/yara/package\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/yara/package\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/yara/package' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/yara/package\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/yara/package"
                    }
                ]
            }
        },
        "/yara/generate": {
            "post": {
                "tags": [
                    "yara"
                ],
                "summary": "Generate Yara package",
                "description": "Generate a new package based on the new added sources.",
                "operationId": "yaraPackageGenerate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/YaraGenerationResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/yara/generate\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/yara/generate\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/yara/generate\")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/yara/generate\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/yara/generate\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/yara/generate' -Method POST "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"POST\", \"/yara/generate\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/yara/generate"
                    }
                ]
            }
        },
        "/file": {
            "post": {
                "tags": [
                    "analysis"
                ],
                "summary": "Analyze File (Asynchronous mode)",
                "description": "**Scanning a file using a specified workflow.**\nScan is done asynchronously and each scan request is tracked by data id of which result can be retrieved by API Fetch Scan Result.\n> _**Note**_: Chunked transfer encoding (applying header Transfer-Encoding: Chunked) is **not supported** on `/file` API.",
                "operationId": "fileAnalysisPost",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    },
                    {
                        "name": "filename",
                        "description": "The name of the submitted file",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filepath",
                        "description": "if local file scan is enabled the path to the file (see Security rule configuration)",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/useragent"
                    },
                    {
                        "$ref": "#/components/parameters/rule"
                    },
                    {
                        "name": "workflow",
                        "description": "name of the selected workflow (deprecated, use \"rule\" header parameter instead)",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "batch",
                        "description": "Batch id to scan with, coming from `Initiate Batch` (If it is not given, it will be a single file scan.)",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "archivepwd",
                        "description": "password for archive ( URL encoded UTF-8 string)\nMultiple passwords is also supported, format: archivepwdX\n  * X: Could be empty\n  * When having value, X must be a number >= 1\n\nFor example:\n  * archivepwd1: \"fox\"\n  * archivepwd2: \"cow\"\n  * archivepwd3: \"bear\"\n",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "metadata",
                        "description": "could be utilized for:\n\nAdditional parameter for pre-defined post actions and external scanners\n(as a part of STDIN input).\n\nCustomized macro variable for watermarking text (Proactive DLP engine\nfeature).\n\nAdditional context / verbose information for each file submission\n(appended into JSON response scan result).\n",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "engines-metadata",
                        "description": "Since MetaDefender Core 5.0.0, preferred context / verbose information can be sent to the engines.\n\nPlease see the below pages for the details:\n  * [File Type engine](https://docs.opswat.com/mdcore/utilities-engines/supported-engines-metadata) (supported since Core 5.2.1)\n  * [Archive engine](https://docs.opswat.com/mdcore/utilities-engines/supported-engines-metadata-header) (supported since Core 5.4.1)\n  * [Deep CDR](https://docs.opswat.com/mdcore/deep-cdr/supported-engines-metadata-json)\n  * [Proactive DLP](https://docs.opswat.com/mdcore/proactive-dlp/supported-engines-metadata-json)\n",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "json",
                            "example": "{\n  \"charset\": \"ISO-2022-JP\",\n  \"content-type\": \"text/html\",\n  \"content-transfer-encoding\": \"quoted-printable\"\n}\n"
                        }
                    },
                    {
                        "name": "callbackurl",
                        "in": "header",
                        "required": false,
                        "description": "Client's URL where MetaDefender Core will notify scan result back to\nwhenever scan is finished (webhooks model).\n  * Format: \\<protocol://\\>\\<ip | domain\\>:\\<port\\>\\</path\\>\n    * Example: http://10.0.1.100:8081/listenback\n  * Supported protocol: HTTP / HTTPS\n  * Method: POST\n",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    {
                        "name": "sanitizedurl",
                        "in": "header",
                        "required": false,
                        "description": "Client's URL where MetaDefender Core will send the sanitized file as the body of a POST request back to\nwhenever scan is finished (webhooks model).\n  * Format: \\<protocol://\\>\\<ip | domain\\>:\\<port\\>\\</path\\>\n    * Example: http://10.0.1.100:8081/listensanitizedfile\n  * Supported protocol: HTTP / HTTPS\n  * Method: POST\n  * Mandatory headers:\n    * `user-agent`: \"OPSWAT MetaDefender Core V4\"\n    * `dataid`: \"<data id of original file submission>\"\n    * `sanitization-result`: \"Sanitized Successfully\" or \"Sanitized Partially\" or \"Sanitized File Removed\"\n    * `sanitized-file-hash`: \"<SHA256 hash value of sanitized file>\"\n    * `Content-Disposition`: attachment; filename=\"<name of sanitized file>\"\n    * `Content-Length`: <actual size of sanitized file>\n",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    {
                        "name": "downloadfrom",
                        "in": "header",
                        "required": false,
                        "description": "Format: \\<protocol://\\>\\<ip | domain\\>:\\<port\\>\\</path\\>\n\nSince MetaDefender Core 4.19.1, the product started supporting users to process file by just specifying a direct download link.\n\nWhen this header is specified, users must not have body content in HTTP(S) request, otherwise expecting to hit 400 HTTP(S) error. Check response sample of HTTP 400 for details.\n\nSpecify download link where MetaDefender Core could download the entire payload for processing.\n  * Supported protocol: HTTP / HTTPS\n  * Support both\n    * Individual file scan (both webhook & non-webhook)\n    * File processing in batch via link\n      * Simply use `downloadfrom` header for each file scan request in a batch, no further requirement on batch request itself to utilize scan via link feature.\n      * `Note`: Cancelling a batch will result in auto cancelling all registered individual scan requests which are still in downloading status\n  * Configurable setting under workflow rule (under \"SCAN\" tab):\n    * Download timeout\n    * Max file size to download\n  * Support to return status of download progress back to client in HTTP(S) response\n  * Pre-check supported to refuse downloading if the file size does not meet configured conditions, and/or MetaDefender Core's temp folder does not have sufficient disk space to save the downloaded file\n\nLimitation:\n  * Redirect link is not supported\n  * Retry to download is not supported\n",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    {
                        "name": "global-timeout",
                        "in": "header",
                        "required": false,
                        "description": "This custom global timeout (in seconds) will override the global timeout predefined in corresponding workflow rule.\n",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/uploadFile"
                },
                "responses": {
                    "200": {
                        "headers": {
                            "X-Core-Id": {
                                "description": "Identity of a corresponding server receiving and proceeding this request. Only present when [custom response headers](/mdcore/metadefender-core/ref#configPutCustomResponseHeader) are enabled.\n",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Successful file submission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [
                                        "data_id"
                                    ],
                                    "properties": {
                                        "data_id": {
                                            "type": "string",
                                            "description": "Unique submission identifier.\nUse this value to reference the submission.\n"
                                        }
                                    }
                                },
                                "example": {
                                    "data_id": "61dffeaa728844adbf49eb090e4ece0e"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Callbackurl and/or apikey is invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/BodyAndDownloadLinkGiven"
                                        },
                                        {
                                            "$ref": "#/components/schemas/CallbackURLInvalid"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FileUploadRejected"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "411": {
                        "description": "Content-Length header is missing from the request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "example": {
                                    "err": "Missing Content-Length header."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Body input is empty.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "example": {
                                    "err": "File is empty."
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    },
                    "503": {
                        "description": "Server is too busy, scan queue is full. Try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "example": {
                                    "err": "Server is too busy. Try again later."
                                }
                            }
                        }
                    }
                },
                "callbacks": {
                    "onFinish": {
                        "{$request.header.callbackurl}": {
                            "post": {
                                "operationId": "onFinishCallback",
                                "summary": "File Analysis callback",
                                "description": "Needs to be a `POST` request and in the body of the file will be the entire [Analysis Result](/mdcore/metadefender-core/ref#AnalysisResult) when data is sent, it will be sent to the `callbackUrl` provided               \n",
                                "requestBody": {
                                    "description": "Analysis Result",
                                    "content": {
                                        "application/json": {
                                            "schema": {
                                                "$ref": "#/components/schemas/AnalysisResult"
                                            }
                                        }
                                    }
                                },
                                "responses": {
                                    "200": {
                                        "description": "Analysis was successfully submitted\n"
                                    },
                                    "400": {
                                        "description": "Callback url is invalid \n"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/file\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"filename: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"filepath: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"workflow: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"batch: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"archivepwd: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"metadata: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"engines-metadata: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"callbackurl: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"sanitizedurl: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"downloadfrom: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"global-timeout: SOME_INTEGER_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/file\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"filename\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"filepath\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"workflow\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"batch\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"archivepwd\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"metadata\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"engines-metadata\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"callbackurl\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"sanitizedurl\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"downloadfrom\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"global-timeout\", \"SOME_INTEGER_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/file\")\n  .post(null)\n  .addHeader(\"filename\", \"SOME_STRING_VALUE\")\n  .addHeader(\"filepath\", \"SOME_STRING_VALUE\")\n  .addHeader(\"workflow\", \"SOME_STRING_VALUE\")\n  .addHeader(\"batch\", \"SOME_STRING_VALUE\")\n  .addHeader(\"archivepwd\", \"SOME_STRING_VALUE\")\n  .addHeader(\"metadata\", \"SOME_STRING_VALUE\")\n  .addHeader(\"engines-metadata\", \"SOME_STRING_VALUE\")\n  .addHeader(\"callbackurl\", \"SOME_STRING_VALUE\")\n  .addHeader(\"sanitizedurl\", \"SOME_STRING_VALUE\")\n  .addHeader(\"downloadfrom\", \"SOME_STRING_VALUE\")\n  .addHeader(\"global-timeout\", \"SOME_INTEGER_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/file\",\n  \"headers\": {\n    \"filename\": \"SOME_STRING_VALUE\",\n    \"filepath\": \"SOME_STRING_VALUE\",\n    \"workflow\": \"SOME_STRING_VALUE\",\n    \"batch\": \"SOME_STRING_VALUE\",\n    \"archivepwd\": \"SOME_STRING_VALUE\",\n    \"metadata\": \"SOME_STRING_VALUE\",\n    \"engines-metadata\": \"SOME_STRING_VALUE\",\n    \"callbackurl\": \"SOME_STRING_VALUE\",\n    \"sanitizedurl\": \"SOME_STRING_VALUE\",\n    \"downloadfrom\": \"SOME_STRING_VALUE\",\n    \"global-timeout\": \"SOME_INTEGER_VALUE\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/file\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => array(\n    \"archivepwd: SOME_STRING_VALUE\",\n    \"batch: SOME_STRING_VALUE\",\n    \"callbackurl: SOME_STRING_VALUE\",\n    \"downloadfrom: SOME_STRING_VALUE\",\n    \"engines-metadata: SOME_STRING_VALUE\",\n    \"filename: SOME_STRING_VALUE\",\n    \"filepath: SOME_STRING_VALUE\",\n    \"global-timeout: SOME_INTEGER_VALUE\",\n    \"metadata: SOME_STRING_VALUE\",\n    \"sanitizedurl: SOME_STRING_VALUE\",\n    \"workflow: SOME_STRING_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"filename\", \"SOME_STRING_VALUE\")\n$headers.Add(\"filepath\", \"SOME_STRING_VALUE\")\n$headers.Add(\"workflow\", \"SOME_STRING_VALUE\")\n$headers.Add(\"batch\", \"SOME_STRING_VALUE\")\n$headers.Add(\"archivepwd\", \"SOME_STRING_VALUE\")\n$headers.Add(\"metadata\", \"SOME_STRING_VALUE\")\n$headers.Add(\"engines-metadata\", \"SOME_STRING_VALUE\")\n$headers.Add(\"callbackurl\", \"SOME_STRING_VALUE\")\n$headers.Add(\"sanitizedurl\", \"SOME_STRING_VALUE\")\n$headers.Add(\"downloadfrom\", \"SOME_STRING_VALUE\")\n$headers.Add(\"global-timeout\", \"SOME_INTEGER_VALUE\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/file' -Method POST -Headers $headers"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nheaders = {\n    'filename': \"SOME_STRING_VALUE\",\n    'filepath': \"SOME_STRING_VALUE\",\n    'workflow': \"SOME_STRING_VALUE\",\n    'batch': \"SOME_STRING_VALUE\",\n    'archivepwd': \"SOME_STRING_VALUE\",\n    'metadata': \"SOME_STRING_VALUE\",\n    'engines-metadata': \"SOME_STRING_VALUE\",\n    'callbackurl': \"SOME_STRING_VALUE\",\n    'sanitizedurl': \"SOME_STRING_VALUE\",\n    'downloadfrom': \"SOME_STRING_VALUE\",\n    'global-timeout': \"SOME_INTEGER_VALUE\"\n    }\n\nconn.request(\"POST\", \"/file\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/file \\\n  --header 'archivepwd: SOME_STRING_VALUE' \\\n  --header 'batch: SOME_STRING_VALUE' \\\n  --header 'callbackurl: SOME_STRING_VALUE' \\\n  --header 'downloadfrom: SOME_STRING_VALUE' \\\n  --header 'engines-metadata: SOME_STRING_VALUE' \\\n  --header 'filename: SOME_STRING_VALUE' \\\n  --header 'filepath: SOME_STRING_VALUE' \\\n  --header 'global-timeout: SOME_INTEGER_VALUE' \\\n  --header 'metadata: SOME_STRING_VALUE' \\\n  --header 'sanitizedurl: SOME_STRING_VALUE' \\\n  --header 'workflow: SOME_STRING_VALUE'"
                    }
                ]
            }
        },
        "/file/sync": {
            "post": {
                "tags": [
                    "analysis"
                ],
                "summary": "Analyze File (Synchronous mode)",
                "description": "> _**Note**_: Only available starting with MetaDefender Core 4.21.0\n>\n> Synchronous (sync) scan mode does not support:\n> - Non-persistent scan mode (dbmode = 3 described in [Startup Node Configuration](https://docs.opswat.com/mdcore/configuration/metadefender-configuration#startup-node-configuration))\n> - Individual scan with sync mode linked to a batch closed with a callbackurl header (webhook)\n\n**Scanning a file using a specified workflow.**\n\nScan is done **synchronously (blocking mode)**, the connection of file submission request\nmust be held by client side until MetaDefender Core returns processing result of\nindividual scan when finished (response code = 200), or\nreturn data ID associated to that scan request if timed out (response code = 408).\n\n> _**Note**_: In case of receiving data ID, expecting the client side to perform query polling for scan result / progress then, see more at [Fetch Analysis Result](/mdcore/metadefender-core/ref#fileanalysisget)\n>\n> The timeout value could be configurable, see more at [Synchronous scan connection timeout - Modification](/mdcore/metadefender-core/ref#configupdatesyncscantimeout)\n",
                "operationId": "fileAnalysisSyncPost",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    },
                    {
                        "name": "filename",
                        "description": "Specify name of file captured and displayed on corresponding MetaDefender Core scan result",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filepath",
                        "description": "if local file scan is enabled the path to the file (see Security rule configuration)",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/useragent"
                    },
                    {
                        "$ref": "#/components/parameters/rule"
                    },
                    {
                        "name": "workflow",
                        "description": "name of the selected workflow (deprecated, use \"rule\" header parameter instead)",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "batch",
                        "description": "Batch id to scan with, coming from `Initiate Batch` (If it is not given, it will be a single file scan.)",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "archivepwd",
                        "description": "password for archive ( URL encoded UTF-8 string)\nMultiple passwords is also supported, format: archivepwd<X>\n  * X: Could be empty\n  * When having value, X must be a number >= 1\n\nFor example:\n  * archivepwd1: \"fox\"\n  * archivepwd2: \"cow\"\n  * archivepwd3: \"bear\"\n",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "metadata",
                        "description": "could be utilized for:\n\nAdditional parameter for pre-defined post actions and external scanners\n(as a part of STDIN input).\n\nCustomized macro variable for watermarking text (Proactive DLP engine\nfeature).\n\nAdditional context / verbose information for each file submission\n(appended into JSON response scan result).\n",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "engines-metadata",
                        "description": "Since MetaDefender Core 5.0.0, preferred context / verbose information can be sent to the engines.\n\nPlease see the below pages for the details:\n  * [File Type engine](https://docs.opswat.com/mdcore/utilities-engines/supported-engines-metadata) (supported since Core 5.2.1)\n  * [Archive engine](https://docs.opswat.com/mdcore/utilities-engines/supported-engines-metadata-header) (supported since Core 5.4.1)\n  * [Deep CDR](https://docs.opswat.com/mdcore/deep-cdr/supported-engines-metadata-json)\n  * [Proactive DLP](https://docs.opswat.com/mdcore/proactive-dlp/supported-engines-metadata-json)\n",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "json",
                            "example": "{\n  \"charset\": \"ISO-2022-JP\",\n  \"content-type\": \"text/html\",\n  \"content-transfer-encoding\": \"quoted-printable\"\n}\n"
                        }
                    },
                    {
                        "name": "downloadfrom",
                        "in": "header",
                        "required": false,
                        "description": "Format: \\<protocol://\\>\\<ip | domain\\>:\\<port\\>\\</path\\>\n\nWhen this header is specified, users must not have body content in HTTP(S) request, otherwise expecting to hit 400 HTTP(S) error. Check response sample of HTTP 400 for details.\n\nSpecify download link where MetaDefender Core could download the entire payload for processing.\n  * Supported protocol: HTTP / HTTPS\n  * Support both individual file scan (both webhook & non-webhook) and file processing in batch via link\n  * Configurable setting under workflow rule (under \"SCAN\" tab):\n    * Download timeout\n    * Max file size to download\n  * Support to return status of download progress back to client in HTTP(S) response\n  * Pre-check supported to refuse downloading if the file size does not meet configured conditions, and/or MetaDefender Core's temp folder does not have sufficient disk space to save the downloaded file\n\nLimitation:\n  * Redirect link is not supported\n  * Retry to download is not supported\n",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/uploadFile"
                },
                "responses": {
                    "200": {
                        "description": "The scan is completed before the connection timeout occurs",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalysisResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "API key is invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/InvalidAPIKeyGiven"
                                        },
                                        {
                                            "$ref": "#/components/schemas/BodyAndDownloadLinkGiven"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InprogressBatchClosed"
                                        },
                                        {
                                            "$ref": "#/components/schemas/BatchNotFound"
                                        },
                                        {
                                            "$ref": "#/components/schemas/BatchInstanceMismatched"
                                        },
                                        {
                                            "$ref": "#/components/schemas/BodyAndLocalFilePathGiven"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FileUploadRejected"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RedirectLinkNotSupported"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidDownloadLink"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidProtocolDownloadLink"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Callback URL is not supported.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallbackURLNotSupported"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Timed out response. The scan is still in progress, but the connection is timed out.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data_id": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "example": {
                                    "data_id": "61dffeaa728844adbf49eb090e4ece0e"
                                }
                            }
                        }
                    },
                    "411": {
                        "description": "Content-Length header is missing from the request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "example": {
                                    "err": "Missing Content-Length header."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Body input is empty.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "example": {
                                    "err": "File is empty."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/LicenseExpired"
                                        },
                                        {
                                            "$ref": "#/components/schemas/NoAvailableRule"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InternalError"
                                        },
                                        {
                                            "$ref": "#/components/schemas/LocalFileNotFound"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FileSizeExceeded"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server is too busy, scan queue is full. Try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "example": {
                                    "err": "Server is too busy. Try again later."
                                }
                            }
                        }
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/file/sync\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"filename: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"filepath: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"workflow: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"batch: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"archivepwd: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"metadata: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"engines-metadata: SOME_STRING_VALUE\");\nheaders = curl_slist_append(headers, \"downloadfrom: SOME_STRING_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/file/sync\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"filename\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"filepath\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"workflow\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"batch\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"archivepwd\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"metadata\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"engines-metadata\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"downloadfrom\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/file/sync\")\n  .post(null)\n  .addHeader(\"filename\", \"SOME_STRING_VALUE\")\n  .addHeader(\"filepath\", \"SOME_STRING_VALUE\")\n  .addHeader(\"workflow\", \"SOME_STRING_VALUE\")\n  .addHeader(\"batch\", \"SOME_STRING_VALUE\")\n  .addHeader(\"archivepwd\", \"SOME_STRING_VALUE\")\n  .addHeader(\"metadata\", \"SOME_STRING_VALUE\")\n  .addHeader(\"engines-metadata\", \"SOME_STRING_VALUE\")\n  .addHeader(\"downloadfrom\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/file/sync\",\n  \"headers\": {\n    \"filename\": \"SOME_STRING_VALUE\",\n    \"filepath\": \"SOME_STRING_VALUE\",\n    \"workflow\": \"SOME_STRING_VALUE\",\n    \"batch\": \"SOME_STRING_VALUE\",\n    \"archivepwd\": \"SOME_STRING_VALUE\",\n    \"metadata\": \"SOME_STRING_VALUE\",\n    \"engines-metadata\": \"SOME_STRING_VALUE\",\n    \"downloadfrom\": \"SOME_STRING_VALUE\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/file/sync\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => array(\n    \"archivepwd: SOME_STRING_VALUE\",\n    \"batch: SOME_STRING_VALUE\",\n    \"downloadfrom: SOME_STRING_VALUE\",\n    \"engines-metadata: SOME_STRING_VALUE\",\n    \"filename: SOME_STRING_VALUE\",\n    \"filepath: SOME_STRING_VALUE\",\n    \"metadata: SOME_STRING_VALUE\",\n    \"workflow: SOME_STRING_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"filename\", \"SOME_STRING_VALUE\")\n$headers.Add(\"filepath\", \"SOME_STRING_VALUE\")\n$headers.Add(\"workflow\", \"SOME_STRING_VALUE\")\n$headers.Add(\"batch\", \"SOME_STRING_VALUE\")\n$headers.Add(\"archivepwd\", \"SOME_STRING_VALUE\")\n$headers.Add(\"metadata\", \"SOME_STRING_VALUE\")\n$headers.Add(\"engines-metadata\", \"SOME_STRING_VALUE\")\n$headers.Add(\"downloadfrom\", \"SOME_STRING_VALUE\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/file/sync' -Method POST -Headers $headers"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nheaders = {\n    'filename': \"SOME_STRING_VALUE\",\n    'filepath': \"SOME_STRING_VALUE\",\n    'workflow': \"SOME_STRING_VALUE\",\n    'batch': \"SOME_STRING_VALUE\",\n    'archivepwd': \"SOME_STRING_VALUE\",\n    'metadata': \"SOME_STRING_VALUE\",\n    'engines-metadata': \"SOME_STRING_VALUE\",\n    'downloadfrom': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/file/sync\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/file/sync \\\n  --header 'archivepwd: SOME_STRING_VALUE' \\\n  --header 'batch: SOME_STRING_VALUE' \\\n  --header 'downloadfrom: SOME_STRING_VALUE' \\\n  --header 'engines-metadata: SOME_STRING_VALUE' \\\n  --header 'filename: SOME_STRING_VALUE' \\\n  --header 'filepath: SOME_STRING_VALUE' \\\n  --header 'metadata: SOME_STRING_VALUE' \\\n  --header 'workflow: SOME_STRING_VALUE'"
                    }
                ]
            }
        },
        "/file/{data_id}": {
            "get": {
                "tags": [
                    "analysis"
                ],
                "summary": "Fetch Analysis Result",
                "description": "Retrieve scan results.\n\nScan is done asynchronously and each scan request is tracked by a data ID.\n\nInitiating file scans and retrieving the results need to be done using two separate API calls.\nThis request needs to be made multiple times until the scan is complete.\nScan completion can be traced using `scan_results.progress_percentage` value from the response.\n\n> _**Note**:_ The REST API also supports pagination for archive file result. A completed response description with archive detection:\n> - extracted_files: information about extracted files\n>   - files_extracted_count: the number of extracted files\n>   - files_in_archive: array of files in archive\n>     - detected_by: number of engines reported threat\n>     - scanned_with: number of engines used for scanning the file\n>   - first_index: it tells that from which file (index of the file, 0 is the first) the result JSON contains information about extracted files. (default=0)\n>   - page_size: it tells how many files the result JSON contains information about (default=50). So by default, the result JSON contains information about the first 50 extracted files.\n>   - worst_data_id: data id of the file that has the worst result in the archive\n> - scan_results\n>   - last_file_scanned (stored only in memory, not in database): If available, the name of the most recent processed file\n",
                "operationId": "fileAnalysisGet",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    },
                    {
                        "name": "data_id",
                        "in": "path",
                        "required": true,
                        "description": "Unique submission identifier.\nUse this value to reference the submission.\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "first",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The first item order in the list child files of archive file"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of items to be fetched next, counting from the item order indicated in first header"
                    },
                    {
                        "$ref": "#/components/parameters/useragent"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entire analysis report generated by MetaDefender Core",
                        "headers": {
                            "X-Core-Id": {
                                "description": "Identity of a corresponding server receiving and proceeding this request.  Only present when [custom response headers](/mdcore/metadefender-core/ref#configPutCustomResponseHeader) are enabled.\n",
                                "required": false,
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalysisResult"
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/file/%7Bdata_id%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/file/%7Bdata_id%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/file/%7Bdata_id%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/file/%7Bdata_id%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/file/%7Bdata_id%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/file/%7Bdata_id%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/file/%7Bdata_id%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url 'http://localhost:8008/file/%7Bdata_id%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE'"
                    }
                ]
            }
        },
        "/file/{data_id}/blocked-leaves": {
            "get": {
                "tags": [
                    "analysis"
                ],
                "summary": "Fetch a list of blocked leaf files inside archive",
                "description": "Retrieve a list of the deepest blocked files inside an input original archive file based on the `data_id` of that archive file. Leaf file is the one that not having any successful extracted file inside.\nIn case there's no blocked file, user will see an empty array.\nThis list only returns 100 items at most.\n",
                "operationId": "retrieveBlockedLeafFile",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    },
                    {
                        "name": "data_id",
                        "in": "path",
                        "required": true,
                        "description": "The data_id comes from the result of `Analyze a file`. In case of sanitizing the content of an archive, the data_id of contained file can be found in `Fetch analysis result`.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "8101abae27be4d63859c55d9e0ed0135"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the list of blocked leaf files.",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "details": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "blocked_reasons": {
                                                        "description": "Provides the reason why the file is blocked in an array (if so).",
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "example": [
                                                            "Infected"
                                                        ]
                                                    },
                                                    "data_id": {
                                                        "description": "Data identifier of this blocked leaf file.",
                                                        "type": "string",
                                                        "example": "914b95fb1a9948e5a1d9b29817ecb69f"
                                                    },
                                                    "display_name": {
                                                        "description": "The name of this blocked leaf file.",
                                                        "type": "string",
                                                        "example": "ProKey.exe"
                                                    },
                                                    "file_type": {
                                                        "description": "The filetype using mimetype.",
                                                        "type": "string",
                                                        "example": "application/x-dosexec"
                                                    },
                                                    "parent_id": {
                                                        "description": "Data identifer of the original archive file.",
                                                        "type": "string",
                                                        "example": "8101abae27be4d63859c55d9e0ed0135"
                                                    },
                                                    "path": {
                                                        "description": "Full path to this blocked leaf file.",
                                                        "type": "string",
                                                        "example": "prokey-x64.zip\\\\ProKey.exe"
                                                    },
                                                    "process_info": {
                                                        "description": "Processing information",
                                                        "type": "object",
                                                        "properties": {
                                                            "post_processing": {
                                                                "description": "Processing information",
                                                                "type": "object",
                                                                "properties": {
                                                                    "actions_failed": {
                                                                        "description": "Empty string if no action failed or list of failed actions, separated by \"|\".",
                                                                        "type": "string",
                                                                        "example": "Sanitization Failed | PAscript failed"
                                                                    },
                                                                    "actions_ran": {
                                                                        "description": "List of successful actions, separated by \"|\". Empty string if otherwise.",
                                                                        "type": "string",
                                                                        "example": "Sanitized | PAscript"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "verdicts": {
                                                        "description": "Aggregated list of potential issues of this blocked leaf file.",
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "example": [
                                                            "Infected"
                                                        ]
                                                    }
                                                }
                                            }
                                        },
                                        "limit_reached": {
                                            "description": "Indicates if there're indeed over 100 blocked leaf files.",
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "total": {
                                            "description": "Total number of files in the above array.",
                                            "type": "integer",
                                            "example": 1
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/file/%7Bdata_id%7D/blocked-leaves\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/file/%7Bdata_id%7D/blocked-leaves\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/file/%7Bdata_id%7D/blocked-leaves\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/file/%7Bdata_id%7D/blocked-leaves\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/file/%7Bdata_id%7D/blocked-leaves\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/file/%7Bdata_id%7D/blocked-leaves' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/file/%7Bdata_id%7D/blocked-leaves\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/file/%7Bdata_id%7D/blocked-leaves"
                    }
                ]
            }
        },
        "/archive/{data_id}": {
            "get": {
                "tags": [
                    "analysis"
                ],
                "summary": "Fetch analysis reports containing all files in archive",
                "description": "Retrieving Analysis Reports Using Data ID containing all files in archive.\n\nUnder extracted_files key, all the info about extracted files will be listed recursively.\n\n> _**Note**:_ Using this method the following fields will not be shown compared to /file request containing extracted files:\n> - files_extracted_count\n> - files_in_archive\n> - first_index\n> - page_size\n> - worst_data_id\n\n> Also the \"outdated_data\" field will only be shown in the root archive.\n",
                "operationId": "fileAnalysisGetAllChildFiles",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    },
                    {
                        "name": "data_id",
                        "in": "path",
                        "required": true,
                        "description": "Unique submission identifier.\nUse this value to reference the submission.\n",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entire analysis report containing all extracted files generated by MetaDefender Core",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalysisResultAllExtractedFiles"
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/archive/%7Bdata_id%7D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/archive/%7Bdata_id%7D\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/archive/%7Bdata_id%7D\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/archive/%7Bdata_id%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/archive/%7Bdata_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/archive/%7Bdata_id%7D' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/archive/%7Bdata_id%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/archive/%7Bdata_id%7D"
                    }
                ]
            }
        },
        "/hash/{hash}": {
            "get": {
                "tags": [
                    "analysis"
                ],
                "summary": "Fetch Analysis Result By Hash",
                "description": "Retrieve analysis result by hash",
                "operationId": "hashGet",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    },
                    {
                        "$ref": "#/components/parameters/rule"
                    },
                    {
                        "name": "hash",
                        "description": "Hash value to search. This can be md5, sha1 or sha256",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "first",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The first item order in the list child files of archive file"
                    },
                    {
                        "name": "selfonly",
                        "description": "Useful to archive hash lookup.\n\nAllow specifying to only perform hash lookup against the original archive file self only, \nand skip searching all child files result within the original archive.\n\nDefault value is false.\n",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of items to be fetched next, counting from the item order indicated in first header"
                    },
                    {
                        "name": "timerange",
                        "description": "Scoping down the recent number of hours that hash lookup task should start from till now, \ninstead of searching the entire scan history in MetaDefender Core database.\n\nDefault value is 0. That means no time scope.\n",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "include-inprogress",
                        "in": "header",
                        "required": false,
                        "description": "False (default): API will return \"Not Found\" if the verdict is in progress.\n\nTrue:\n  If the queried hash has a completed processing result before, API will return the completed processing result.\n  If this hash doesn't have any completed processing result, API will return this In-progress result.\n",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get information of file",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalysisResult"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404Hash"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/hash/%7Bmd5%7Csha1%7Csha256%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"selfonly: SOME_BOOLEAN_VALUE\");\nheaders = curl_slist_append(headers, \"timerange: SOME_INTEGER_VALUE\");\nheaders = curl_slist_append(headers, \"include-inprogress: SOME_BOOLEAN_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/hash/%7Bmd5%7Csha1%7Csha256%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"selfonly\", \"SOME_BOOLEAN_VALUE\");\nrequest.AddHeader(\"timerange\", \"SOME_INTEGER_VALUE\");\nrequest.AddHeader(\"include-inprogress\", \"SOME_BOOLEAN_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/hash/%7Bmd5%7Csha1%7Csha256%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .get()\n  .addHeader(\"selfonly\", \"SOME_BOOLEAN_VALUE\")\n  .addHeader(\"timerange\", \"SOME_INTEGER_VALUE\")\n  .addHeader(\"include-inprogress\", \"SOME_BOOLEAN_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/hash/%7Bmd5%7Csha1%7Csha256%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"selfonly\": \"SOME_BOOLEAN_VALUE\",\n    \"timerange\": \"SOME_INTEGER_VALUE\",\n    \"include-inprogress\": \"SOME_BOOLEAN_VALUE\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/hash/%7Bmd5%7Csha1%7Csha256%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"include-inprogress: SOME_BOOLEAN_VALUE\",\n    \"selfonly: SOME_BOOLEAN_VALUE\",\n    \"timerange: SOME_INTEGER_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"selfonly\", \"SOME_BOOLEAN_VALUE\")\n$headers.Add(\"timerange\", \"SOME_INTEGER_VALUE\")\n$headers.Add(\"include-inprogress\", \"SOME_BOOLEAN_VALUE\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/hash/%7Bmd5%7Csha1%7Csha256%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' -Method GET -Headers $headers"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nheaders = {\n    'selfonly': \"SOME_BOOLEAN_VALUE\",\n    'timerange': \"SOME_INTEGER_VALUE\",\n    'include-inprogress': \"SOME_BOOLEAN_VALUE\"\n    }\n\nconn.request(\"GET\", \"/hash/%7Bmd5%7Csha1%7Csha256%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url 'http://localhost:8008/hash/%7Bmd5%7Csha1%7Csha256%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \\\n  --header 'include-inprogress: SOME_BOOLEAN_VALUE' \\\n  --header 'selfonly: SOME_BOOLEAN_VALUE' \\\n  --header 'timerange: SOME_INTEGER_VALUE'"
                    }
                ]
            }
        },
        "/file/webhook/{data_id}": {
            "get": {
                "tags": [
                    "analysis"
                ],
                "summary": "Query webhook status",
                "description": "Prior to being notified by Core when webhooks mode is set, client can anytime ask Core for file / batch processing webhooks status.\n",
                "operationId": "webhookStatus",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    },
                    {
                        "name": "data_id",
                        "description": "Either `data_id` or `batch_id`.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Webhooks status is fetched successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data_id": {
                                            "description": "The file submission identifier",
                                            "type": "string",
                                            "example": "j2939fh3ifoqkhwhr3h9h1h0re"
                                        },
                                        "request_time": {
                                            "description": "A timestamp when the request has been made.",
                                            "type": "string",
                                            "example": ""
                                        },
                                        "status_code": {
                                            "description": "What was the returned HTTP status code.\n  * `200` - Callback was sent successfully\n  * `403` -\tContentAccessDenied. The access to the remote content was denied (similar to HTTP(S) error 401).\n  * `404` -\tContentNotFoundError. The remote content was not found at the server (similar to HTTP(S) error 404).\n  * `408` - TimeoutError. The connection to the remote server timed out.\n  * `503` - HostNotFoundError. The remote host name was not found (invalid hostname).\n  * `520` - RemoteHostClosedError. The remote server closed the connection prematurely, before the entire reply was received and processed.\n  * `444` - Other error types. Since MetaDefender Core 4.21.2, warning-level messages will be logged in case of Webhook failures. Check the following for detailed error descriptions.\n    <details>\n    <ul>\n    <li><strong>1</strong> - the remote server refused the connection (the server is not accepting requests).</li>\n    <li><strong>2</strong> - the remote server closed the connection prematurely, before the entire reply was received and processed.</li>\n    <li><strong>3</strong> - the remote host name was not found (invalid hostname).</li>\n    <li><strong>4</strong> - the connection to the remote server timed out.</li>\n    <li><strong>5</strong> - operation canceled before it was finished.</li>\n    <li><strong>6</strong> - the SSL/TLS handshake failed and the encrypted channel could not be established.</li>\n    <li><strong>7</strong> - temporary network failure.</li>\n    <li><strong>8</strong> - the connection was broken due to disconnection from the network or failure to start the network.</li>\n    <li><strong>9</strong> - the background request is not currently allowed due to platform policy.</li>\n    <li><strong>10</strong> - while following redirects, the maximum limit was reached.</li>\n    <li><strong>11</strong> - while following redirects, a redirect from a encrypted protocol (https) to an unencrypted one (http) is detected.</li>\n    <li><strong>99</strong> - an unknown network-related error was detected.</li>\n    <li><strong>101</strong> - the connection to the proxy server was refused (the proxy server is not accepting requests).</li>\n    <li><strong>102</strong> - the proxy server closed the connection prematurely, before the entire reply was received and processed.</li>\n    <li><strong>103</strong> - the proxy host name was not found (invalid proxy hostname).</li>\n    <li><strong>104</strong> - the connection to the proxy timed out or the proxy did not reply in time to the request sent.</li>\n    <li><strong>105</strong> - the proxy requires authentication but did not accept any offered credentials (if any).</li>\n    <li><strong>199</strong> - an unknown proxy-related error was detected.</li>\n    <li><strong>201</strong> - the access to the remote content was denied.</li>\n    <li><strong>202</strong> - the operation requested on the remote content is not permitted.</li>\n    <li><strong>203</strong> - the remote content was not found at the server.</li>\n    <li><strong>204</strong> - the remote server requires authentication to serve the content but the credentials provided were not accepted (if any).</li>\n    <li><strong>205</strong> - the request needed to be sent again, but this failed for example because the upload data could not be read a second time.</li>\n    <li><strong>206</strong> - the request could not be completed due to a conflict with the current state of the resource.</li>\n    <li><strong>207</strong> - the requested resource is no longer available at the server.</li>\n    <li><strong>299</strong> - an unknown error related to the remote content was detected.</li>\n    <li><strong>301</strong> - the protocol is unknown.</li>\n    <li><strong>302</strong> - the requested operation is invalid for this protocol.</li>\n    <li><strong>399</strong> - a breakdown in protocol was detected (parsing error, invalid or unexpected responses, etc.).</li>\n    <li><strong>401</strong> - the server encountered an unexpected condition which prevented it from fulfilling the request.</li>\n    <li><strong>402</strong> - the server does not support the functionality required to fulfill the request.</li>\n    <li><strong>403</strong> - the server is unable to handle the request at this time.</li>\n    <li><strong>499</strong> - an unknown error related to the server response was detected.</li>\n    </ul>\n    </details>\n",
                                            "type": "integer",
                                            "example": 200
                                        },
                                        "url": {
                                            "description": "What was the called URL (should match the `callbackurl` header).",
                                            "type": "string",
                                            "example": "https://apigateway.corporate.com/metadefender/callbackurl"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/file/webhook/%7Bdata_id%7D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/file/webhook/%7Bdata_id%7D\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/file/webhook/%7Bdata_id%7D\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/file/webhook/%7Bdata_id%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/file/webhook/%7Bdata_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/file/webhook/%7Bdata_id%7D' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/file/webhook/%7Bdata_id%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/file/webhook/%7Bdata_id%7D"
                    }
                ]
            }
        },
        "/file/rules": {
            "get": {
                "tags": [
                    "analysis"
                ],
                "summary": "Fetching Available Analysis Rules",
                "description": "Retrieve all available rules with their custom configurations.\nFetching available processing rules.\n",
                "operationId": "analysisRules",
                "parameters": [
                    {
                        "name": "user_agent",
                        "description": "The user agent string value sent in the header (specified by the client).\n\nOnly those rules are returned, that:\n  * Match the client's user agent sent using the user_agent header, or\n  * Are not restricted to a specific user agent.\n\nFor details see KB article [What are Security Policies and how do I use them?](https://onlinehelp.opswat.com/corev4/What_are_Security_Policies_and_how_do_I_use_them_.html).\n",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the list of available rules.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "max_file_size": {
                                                "description": "The maximum allowed file size (in bytes) for this rule.",
                                                "type": "integer",
                                                "example": 200000000
                                            },
                                            "name": {
                                                "description": "A unique identifier for identify in the used rule for a scan..",
                                                "type": "string",
                                                "example": "File scan"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/file/rules\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"user_agent: SOME_STRING_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/file/rules\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"user_agent\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/file/rules\")\n  .get()\n  .addHeader(\"user_agent\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/file/rules\",\n  \"headers\": {\n    \"user_agent\": \"SOME_STRING_VALUE\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/file/rules\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"user_agent: SOME_STRING_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"user_agent\", \"SOME_STRING_VALUE\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/file/rules' -Method GET -Headers $headers"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nheaders = { 'user_agent': \"SOME_STRING_VALUE\" }\n\nconn.request(\"GET\", \"/file/rules\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/file/rules \\\n  --header 'user_agent: SOME_STRING_VALUE'"
                    }
                ]
            }
        },
        "/file/converted/{data_id}": {
            "get": {
                "tags": [
                    "analysis"
                ],
                "summary": "Download Sanitized Files",
                "description": "Retrieve sanitized file based on the `data_id`\n",
                "operationId": "sanitizedFile",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    },
                    {
                        "name": "data_id",
                        "in": "path",
                        "required": true,
                        "description": "The data_id comes from the result of `Analyze a file`. In case of sanitizing the content of an archive, the data_id of contained file can be found in `Fetch analysis result`.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "8101abae27be4d63859c55d9e0ed0135"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the sanitized content.",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "example": "<Raw bytes content>"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/file/converted/%7Bdata_id%7D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/file/converted/%7Bdata_id%7D\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/file/converted/%7Bdata_id%7D\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/file/converted/%7Bdata_id%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/file/converted/%7Bdata_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/file/converted/%7Bdata_id%7D' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/file/converted/%7Bdata_id%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/file/converted/%7Bdata_id%7D"
                    }
                ]
            }
        },
        "/file/download/{data_id}": {
            "get": {
                "tags": [
                    "analysis"
                ],
                "summary": "Download either sanitized files or DLP processed files",
                "description": "Retrieve sanitized file based on the `data_id`.\nIn case there's no sanitized file, and DLP processed file is available, user will retrieve DLP processed file.\n",
                "operationId": "downloadFile",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    },
                    {
                        "name": "data_id",
                        "in": "path",
                        "required": true,
                        "description": "The data_id comes from the result of `Analyze a file`. In case of sanitizing the content of an archive, the data_id of contained file can be found in `Fetch analysis result`.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "8101abae27be4d63859c55d9e0ed0135"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the sanitized or DLP processed content.",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "example": "<Raw bytes content>"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "File could not be found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "string",
                                            "description": "Error reason"
                                        }
                                    }
                                },
                                "example": {
                                    "err": "File could not be found"
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/file/download/%7Bdata_id%7D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/file/download/%7Bdata_id%7D\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/file/download/%7Bdata_id%7D\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/file/download/%7Bdata_id%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/file/download/%7Bdata_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/file/download/%7Bdata_id%7D' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/file/download/%7Bdata_id%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/file/download/%7Bdata_id%7D"
                    }
                ]
            }
        },
        "/file/{data_id}/export": {
            "get": {
                "tags": [
                    "analysis"
                ],
                "summary": "Export processing result as a PDF file",
                "description": "Retrieve a PDF processing result file.\nThe content of this PDF file can be changed over MD Core version.\n",
                "operationId": "resultExportedFile",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    },
                    {
                        "name": "data_id",
                        "in": "path",
                        "required": true,
                        "description": "The data_id comes from the result of `Analyze a file`. In case of sanitizing the content of an archive, the data_id of contained file can be found in `Fetch analysis result`.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "8101abae27be4d63859c55d9e0ed0135"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the exported result PDF file",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "example": "<Raw bytes content>"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/file/%7Bdata_id%7D/export\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/file/%7Bdata_id%7D/export\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/file/%7Bdata_id%7D/export\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/file/%7Bdata_id%7D/export\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/file/%7Bdata_id%7D/export\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/file/%7Bdata_id%7D/export' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/file/%7Bdata_id%7D/export\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/file/%7Bdata_id%7D/export"
                    }
                ]
            }
        },
        "/quarantine/{sha256}/download": {
            "get": {
                "tags": [
                    "analysis"
                ],
                "summary": "Download Quarantined File",
                "description": "Retrieve a quarantined file based on the `sha256` of the original file\n",
                "operationId": "downloadQuarantinedFile",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    },
                    {
                        "name": "sha256",
                        "in": "path",
                        "required": true,
                        "description": "The SHA256 of the original file. This information can be retrieved from the result of `Analyze a file`.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "4c4c10348935210f1b5f1a0b6cbb46b56f941570c5aac8ce934c9b594324268c"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the quarantined file.",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "example": "<Raw bytes content>"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/quarantine/%7Bsha256%7D/download\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/quarantine/%7Bsha256%7D/download\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/quarantine/%7Bsha256%7D/download\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/quarantine/%7Bsha256%7D/download\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/quarantine/%7Bsha256%7D/download\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/quarantine/%7Bsha256%7D/download' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/quarantine/%7Bsha256%7D/download\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/quarantine/%7Bsha256%7D/download"
                    }
                ]
            }
        },
        "/file/{data_id}/cancel": {
            "post": {
                "tags": [
                    "analysis"
                ],
                "summary": "Cancel File Analysis",
                "description": "When cancelling a file analysis, the connected analysis (e.g. files in an archive) that are still in progress will be cancelled also.\n\nThe cancelled analysis will be automatically closed.",
                "operationId": "fileAnalysisCancel",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    },
                    {
                        "name": "data_id",
                        "in": "path",
                        "required": true,
                        "description": "Unique submission identifier.\nUse this value to reference the submission.\n",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Analysis was sucessfully cancelled.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "example": {
                                    "<<data_id>>": "cancelled"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "404": {
                        "description": "Data ID not found (invalid id) or Requests resource was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "The user has no rights for this operation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/file/%7Bdata_id%7D/cancel\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/file/%7Bdata_id%7D/cancel\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/file/%7Bdata_id%7D/cancel\")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/file/%7Bdata_id%7D/cancel\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/file/%7Bdata_id%7D/cancel\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/file/%7Bdata_id%7D/cancel' -Method POST "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"POST\", \"/file/%7Bdata_id%7D/cancel\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/file/%7Bdata_id%7D/cancel"
                    }
                ]
            }
        },
        "/file/batch": {
            "post": {
                "tags": [
                    "batch"
                ],
                "summary": "Initiate Batch",
                "description": "Create a new batch and retrieve the batch_id",
                "operationId": "batchCreate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    },
                    {
                        "$ref": "#/components/parameters/rule"
                    },
                    {
                        "$ref": "#/components/parameters/useragent"
                    },
                    {
                        "$ref": "#/components/parameters/userdata"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Batch created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BatchId"
                                },
                                "example": {
                                    "batch_id": "74c85f475147439bac4d33b181853923"
                                }
                            }
                        },
                        "links": {
                            "BatchId": {
                                "$ref": "#/components/links/GetBatchId"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/file/batch\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/file/batch\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/file/batch\")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/file/batch\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/file/batch\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/file/batch' -Method POST "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"POST\", \"/file/batch\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/file/batch"
                    }
                ]
            }
        },
        "/file/batch/{batchId}/close": {
            "post": {
                "tags": [
                    "batch"
                ],
                "summary": "Close Batch",
                "description": "The batch will be closed and files can no longer be added to the current batch.",
                "operationId": "batchClose",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    },
                    {
                        "$ref": "#/components/parameters/batchId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Batch successfully closed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BatchResponseClosed"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/file/batch/%7BbatchId%7D/close\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/file/batch/%7BbatchId%7D/close\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/file/batch/%7BbatchId%7D/close\")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/file/batch/%7BbatchId%7D/close\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/file/batch/%7BbatchId%7D/close\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/file/batch/%7BbatchId%7D/close' -Method POST "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"POST\", \"/file/batch/%7BbatchId%7D/close\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/file/batch/%7BbatchId%7D/close"
                    }
                ]
            }
        },
        "/file/batch/{batchId}": {
            "get": {
                "tags": [
                    "batch"
                ],
                "summary": "Status of Batch Analysis",
                "description": "Retrieve status report for the entire batch",
                "operationId": "batchStatus",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    },
                    {
                        "$ref": "#/components/parameters/batchId"
                    },
                    {
                        "name": "first",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The first item order in the list of files in this batch"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of items to be fetched next, counting from the item order indicated in first header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Batch progress paginated report (50 entries/page).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BatchResponseInProgress"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/file/batch/%7BbatchId%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/file/batch/%7BbatchId%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/file/batch/%7BbatchId%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/file/batch/%7BbatchId%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/file/batch/%7BbatchId%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/file/batch/%7BbatchId%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/file/batch/%7BbatchId%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url 'http://localhost:8008/file/batch/%7BbatchId%7D?first=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE'"
                    }
                ]
            }
        },
        "/file/batch/{batchId}/certificate": {
            "get": {
                "tags": [
                    "batch"
                ],
                "summary": "Download Signed Batch Result",
                "description": "Download digitally signed status report for the entire batch",
                "operationId": "batchSignedResult",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    },
                    {
                        "$ref": "#/components/parameters/batchId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Signed batch result and certificate are sent back in response body (YAML format).",
                        "content": {
                            "text/plain": {
                                "example": "--- batch_id: 092876200fb54cfb80b6e3332c410ae9 user_data: the user data from the header from batch creation cert_sha1_fingerprint: <some cert serial value> batch_files:\n  batch_count: 1\n  files_in_batch:\n  - data_id: 9112b225f0634f189a2bb46ec1a7826f\n    display_name: New%20Text%20Document.txt\n    file_size: 5\n    scan_all_result_i: 0\n    process_info:\n      blocked_reason:\n      result: Allowed\n    sha256: f4191b3ec6ce93aaf712919a38e52815c5da9c91d2b141df920bc8bcb5cbb8e3\nprocess_info:\n  blocked_reason:\n  file_type_skipped_scan: false\n  profile: File scan\n  result: Allowed\n  user_agent: webscan\nscan_results:\n  scan_all_result_a: No Threat Detected\n  scan_all_result_i: 0\n  start_time: 2017-05-23T11:22:03.010Z\n  total_avs: 14\n  total_time: 995\n...\n--- signature: 881d22220c4ca0557d7c7d5c5794d53a8a2780997cd65b27b6e7f1c099a15de03dbcb5edbeaea7aafa6099fab37be07017b39e3e3a7d66c550f44eb59a096c54d5b9555cb28198546fbec57c33b717751d333a09733d95dd876e2798d044c8caef828f4352b91f9a6d057253bb1a9461e0e0e0bf4313a80895998d645bebc81841ff3499589c80ffc4e8a190d1ec9b3e4126d86659d303b0e1f22d9289c9c4671d35532b55ad4620e048a78bb405b573897da63efdd5f036692c934a82d9bdc9b9862e7fea5e8abeeb1444be0689d50373c5c0632484950c0fe0337ed5f91bdf26986f7cff8aa3431bf4bc948fc127c16ba13ec679fe9f67e7586075c1f467454fa8cf40e9cd501291c95d862eb16f4477c17d1711294f0ff2b3a1140bd53dbd1fbb0846af6062e9e4e2e1a09af3448503ed11e342164e535fc268bf7d8fbc28ed946cd2bb8ea075f2295d2fa8392076d41608c3b5decf8fab3a5ec7de190f07583331e0517e5f361735cd59326622dc8b07b10a464028de781a063e408f918c1d5534329140f4e4dc1a717d808d6784410410b00d36cb9a345f5bbc11fa1c58ee28f8e7b863f3ea2c923ec5fb2ac29eaa4ddc0d6d9dfd3f16a97f207dc2858410a577c7f4a92ff01bad3229f5fcdb08e21df9869a113272aa9d96bfdfe8bfb3a50414c174e16a3504e5780c2718779b0757298546f287ef7ea86e67510d48a8 certificate: |\n  -----BEGIN CERTIFICATE-----\n  MIIGJzCCBA+gAwIBAgIBATANBgkqhkiG9w0BAQUFADCBsjELMAkGA1UEBhMCRlIx\n  DzANBgNVBAgMBkFsc2FjZTETMBEGA1UEBwwKU3RyYXNib3VyZzEYMBYGA1UECgwP\n  d3d3LmZyZWVsYW4ub3JnMRAwDgYDVQQLDAdmcmVlbGFuMS0wKwYDVQQDDCRGcmVl\n  bGFuIFNhbXBsZSBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkxIjAgBgkqhkiG9w0BCQEW\n  E2NvbnRhY3RAZnJlZWxhbi5vcmcwHhcNMTIwNDI3MTAzMTE4WhcNMjIwNDI1MTAz\n  MTE4WjB+MQswCQYDVQQGEwJGUjEPMA0GA1UECAwGQWxzYWNlMRgwFgYDVQQKDA93\n  d3cuZnJlZWxhbi5vcmcxEDAOBgNVBAsMB2ZyZWVsYW4xDjAMBgNVBAMMBWFsaWNl\n  MSIwIAYJKoZIhvcNAQkBFhNjb250YWN0QGZyZWVsYW4ub3JnMIICIjANBgkqhkiG\n  9w0BAQEFAAOCAg8AMIICCgKCAgEA3W29+ID6194bH6ejLrIC4hb2Ugo8v6ZC+Mrc\n  k2dNYMNPjcOKABvxxEtBamnSaeU/IY7FC/giN622LEtV/3oDcrua0+yWuVafyxmZ\n  yTKUb4/GUgafRQPf/eiX9urWurtIK7XgNGFNUjYPq4dSJQPPhwCHE/LKAykWnZBX\n  RrX0Dq4XyApNku0IpjIjEXH+8ixE12wH8wt7DEvdO7T3N3CfUbaITl1qBX+Nm2Z6\n  q4Ag/u5rl8NJfXg71ZmXA3XOj7zFvpyapRIZcPmkvZYn7SMCp8dXyXHPdpSiIWL2\n  uB3KiO4JrUYvt2GzLBUThp+lNSZaZ/Q3yOaAAUkOx+1h08285Pi+P8lO+H2Xic4S\n  vMq1xtLg2bNoPC5KnbRfuFPuUD2/3dSiiragJ6uYDLOyWJDivKGt/72OVTEPAL9o\n  6T2pGZrwbQuiFGrGTMZOvWMSpQtNl+tCCXlT4mWqJDRwuMGrI4DnnGzt3IKqNwS4\n  Qyo9KqjMIPwnXZAmWPm3FOKe4sFwc5fpawKO01JZewDsYTDxVj+cwXwFxbE2yBiF\n  z2FAHwfopwaH35p3C6lkcgP2k/zgAlnBluzACUI+MKJ/G0gv/uAhj1OHJQ3L6kn1\n  SpvQ41/ueBjlunExqQSYD7GtZ1Kg8uOcq2r+WISE3Qc9MpQFFkUVllmgWGwYDuN3\n  Zsez95kCAwEAAaN7MHkwCQYDVR0TBAIwADAsBglghkgBhvhCAQ0EHxYdT3BlblNT\n  TCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYEFFlfyRO6G8y5qEFKikl5\n  ajb2fT7XMB8GA1UdIwQYMBaAFCNsLT0+KV14uGw+quK7Lh5sh/JTMA0GCSqGSIb3\n  DQEBBQUAA4ICAQAT5wJFPqervbja5+90iKxi1d0QVtVGB+z6aoAMuWK+qgi0vgvr\n  mu9ot2lvTSCSnRhjeiP0SIdqFMORmBtOCFk/kYDp9M/91b+vS+S9eAlxrNCB5VOf\n  PqxEPp/wv1rBcE4GBO/c6HcFon3F+oBYCsUQbZDKSSZxhDm3mj7pb67FNbZbJIzJ\n  70HDsRe2O04oiTx+h6g6pW3cOQMgIAvFgKN5Ex727K4230B0NIdGkzuj4KSML0NM\n  slSAcXZ41OoSKNjy44BVEZv0ZdxTDrRM4EwJtNyggFzmtTuV02nkUj1bYYYC5f0L\n  ADr6s0XMyaNk8twlWYlYDZ5uKDpVRVBfiGcq0uJIzIvemhuTrofh8pBQQNkPRDFT\n  Rq1iTo1Ihhl3/Fl1kXk1WR3jTjNb4jHX7lIoXwpwp767HAPKGhjQ9cFbnHMEtkro\n  RlJYdtRq5mccDtwT0GFyoJLLBZdHHMHJz0F9H7FNk2tTQQMhK5MVYwg+LIaee586\n  CQVqfbscp7evlgjLW98H+5zylRHAgoH2G79aHljNKMp9BOuq6SnEglEsiWGVtu2l\n  hnx8SB3sVJZHeer8f/UQQwqbAO+Kdy70NmbSaqaVtp8jOxLiidWkwSyRTsuU6D8i\n  DiH5uEqBXExjrj0FslxcVKdVj5glVcSmkLwZKbEU1OKwleT/iXFhvooWhQ==\n  -----END CERTIFICATE-----\n...\n"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/Error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/file/batch/%7BbatchId%7D/certificate\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/file/batch/%7BbatchId%7D/certificate\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/file/batch/%7BbatchId%7D/certificate\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/file/batch/%7BbatchId%7D/certificate\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/file/batch/%7BbatchId%7D/certificate\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/file/batch/%7BbatchId%7D/certificate' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/file/batch/%7BbatchId%7D/certificate\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/file/batch/%7BbatchId%7D/certificate"
                    }
                ]
            }
        },
        "/file/batch/{batchId}/cancel": {
            "post": {
                "tags": [
                    "batch"
                ],
                "summary": "Cancel Batch",
                "description": "When cancelling a batch, the connected analysis that are still in progress will be cancelled also.\n\nThe cancelled batch will be closed.",
                "operationId": "batchCancel",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    },
                    {
                        "$ref": "#/components/parameters/batchId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Batch cancelled.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "example": {
                                    "<<batch_id>>": "cancelled"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/Error400"
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "404": {
                        "description": "Batch not found (invalid id)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/file/batch/%7BbatchId%7D/cancel\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/file/batch/%7BbatchId%7D/cancel\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/file/batch/%7BbatchId%7D/cancel\")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/file/batch/%7BbatchId%7D/cancel\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/file/batch/%7BbatchId%7D/cancel\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/file/batch/%7BbatchId%7D/cancel' -Method POST "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"POST\", \"/file/batch/%7BbatchId%7D/cancel\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request POST \\\n  --url http://localhost:8008/file/batch/%7BbatchId%7D/cancel"
                    }
                ]
            }
        },
        "/version": {
            "get": {
                "tags": [
                    "stats"
                ],
                "summary": "Get Product Version",
                "description": "Fetch details about the product version.",
                "operationId": "productVersion",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Provides productId and version information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "product_id": {
                                            "description": "Product identifier.",
                                            "type": "string",
                                            "example": "MSCL"
                                        },
                                        "version": {
                                            "description": "The product version currently used.",
                                            "type": "string",
                                            "example": "5.6.1"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/version\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/version\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/version\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/version\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/version\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/version' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/version\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/version"
                    }
                ]
            }
        },
        "/stat/engines": {
            "get": {
                "tags": [
                    "stats"
                ],
                "summary": "Engines Status",
                "description": "The response is an array of engines with database information.",
                "operationId": "enginesStatus",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_optional"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array with all the engines and their details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "active": {
                                                "description": "If used by at least one engine",
                                                "type": "boolean",
                                                "example": true
                                            },
                                            "def_time": {
                                                "description": "The database definition time for this engine",
                                                "type": "string",
                                                "example": "2020-04-17T02:37:05.000Z"
                                            },
                                            "download_progress": {
                                                "description": "The percentage progress of download",
                                                "type": "integer",
                                                "example": 100
                                            },
                                            "download_time": {
                                                "description": "When this engine downloaded from the update server.",
                                                "type": "string",
                                                "example": "2020-04-17T08:17:22.810Z"
                                            },
                                            "eng_id": {
                                                "description": "Engine internal ID",
                                                "type": "string",
                                                "example": "clamav_1_linux"
                                            },
                                            "eng_name": {
                                                "description": "Engine name",
                                                "type": "string",
                                                "example": "ClamAV"
                                            },
                                            "eng_type": {
                                                "description": "Engine type in human readable form",
                                                "type": "string",
                                                "example": "Bundled engine"
                                            },
                                            "eng_ver": {
                                                "description": "Engine's version (format differs from one engine to another).",
                                                "type": "string",
                                                "example": "3.0-43"
                                            },
                                            "engine_type": {
                                                "description": "Engine's type: \n  * av\n  * archive\n  * filetype\n",
                                                "type": "string",
                                                "enum": [
                                                    "av",
                                                    "archive",
                                                    "filetype"
                                                ],
                                                "example": "av"
                                            },
                                            "state": {
                                                "description": "Status of the engine:\n  * downloading\n  * downloaded\n  * staging\n  * production\n  * removed\n  * temporary failed\n  * permanently failed\n  * content invalid\n  * download failed\n",
                                                "type": "string",
                                                "enum": [
                                                    "downloading",
                                                    "downloaded",
                                                    "staging",
                                                    "production",
                                                    "removed",
                                                    "temporary failed",
                                                    "permanently failed",
                                                    "content invalid",
                                                    "download failed"
                                                ],
                                                "example": "production"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/stat/engines\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/stat/engines\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/stat/engines\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/stat/engines\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/stat/engines\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/stat/engines' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/stat/engines\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/stat/engines"
                    }
                ]
            }
        },
        "/stat/nodes": {
            "get": {
                "tags": [
                    "stats"
                ],
                "summary": "Nodes Status",
                "description": "Get a list of all connected nodes and their status.",
                "operationId": "nodesStatus",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array with all the engines and their details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "external_nodes_allowed": {
                                                "description": "Configuration option if additional external nodes could be connected.",
                                                "type": "boolean",
                                                "example": false
                                            },
                                            "max_node_count": {
                                                "description": "Remaining available slots to connect to this instance.",
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "statuses": {
                                                "description": "Array with a status for each attached node.",
                                                "type": "array",
                                                "items": {
                                                    "description": "Node status",
                                                    "type": "object",
                                                    "properties": {
                                                        "address": {
                                                            "description": "The location of the Node. If local, is empty string.",
                                                            "type": "string",
                                                            "example": ""
                                                        },
                                                        "available_mem": {
                                                            "description": "The number of available RAM in this system.",
                                                            "type": "integer",
                                                            "example": 2825
                                                        },
                                                        "cpu_cores": {
                                                            "description": "The number of CPU Cores allocated to this Node.",
                                                            "type": "integer",
                                                            "example": 8
                                                        },
                                                        "engines": {
                                                            "description": "Summary of each engine status deployed on this Node.",
                                                            "type": "array",
                                                            "items": {
                                                                "description": "Engine summary",
                                                                "type": "object",
                                                                "properties": {
                                                                    "active": {
                                                                        "description": "If used by at least one engine",
                                                                        "type": "boolean",
                                                                        "example": true
                                                                    },
                                                                    "db_ver": {
                                                                        "description": "The database version for this engine",
                                                                        "type": "string",
                                                                        "example": "25050"
                                                                    },
                                                                    "def_time": {
                                                                        "description": "The database definition time for this engine",
                                                                        "type": "string",
                                                                        "example": "2020-04-17T02:37:05.000Z"
                                                                    },
                                                                    "eng_name": {
                                                                        "description": "Engine name",
                                                                        "type": "string",
                                                                        "example": "ClamAV"
                                                                    },
                                                                    "eng_ver": {
                                                                        "description": "Engine's version (format differs from one engine to another).",
                                                                        "type": "string",
                                                                        "example": "3.0-43"
                                                                    },
                                                                    "engine_type": {
                                                                        "description": "Engine's type: \n  * av\n  * archive\n  * filetype\n",
                                                                        "type": "string",
                                                                        "enum": [
                                                                            "av",
                                                                            "archive",
                                                                            "filetype"
                                                                        ],
                                                                        "example": "av"
                                                                    },
                                                                    "id": {
                                                                        "description": "Engine internal ID",
                                                                        "type": "string",
                                                                        "example": "clamav_1_linux"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "free_disk_space": {
                                                            "description": "Reported available disk on that Node (in bytes).",
                                                            "type": "integer",
                                                            "example": 1739928
                                                        },
                                                        "id": {
                                                            "description": "Node identfier",
                                                            "type": "string",
                                                            "example": ":69"
                                                        },
                                                        "issues": {
                                                            "description": "A list of all potentials problems on that Node.",
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "description": {
                                                                        "description": "Text detailing the issue.",
                                                                        "type": "string",
                                                                        "example": "1 engines are not deployed to this node"
                                                                    },
                                                                    "severity": {
                                                                        "description": "How important is the reported issue.",
                                                                        "type": "string",
                                                                        "example": "warning"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "load": {
                                                            "description": "Current CPU utilization on this Node (in percentage).",
                                                            "type": "integer",
                                                            "example": 14
                                                        },
                                                        "os": {
                                                            "description": "Current used OS",
                                                            "type": "string",
                                                            "example": "Linux Mint 18.3 Sylvia"
                                                        },
                                                        "scan_queue": {
                                                            "description": "Current load on the Node, how many files are in the queue",
                                                            "type": "integer",
                                                            "example": 24
                                                        },
                                                        "total_disk_space": {
                                                            "description": "The amount of disk space is allocated on this Node (in Byte).",
                                                            "type": "integer",
                                                            "example": 500000878592
                                                        },
                                                        "total_mem": {
                                                            "description": "How much memory is allocated on this Node (in MB).",
                                                            "type": "integer",
                                                            "example": 40100
                                                        },
                                                        "total_scan_queue": {
                                                            "description": "The maximum queue size is allowed per Node.",
                                                            "type": "integer",
                                                            "example": 500
                                                        },
                                                        "uptime": {
                                                            "description": "How long this Node is in operation (in second).",
                                                            "type": "integer",
                                                            "example": 12791
                                                        },
                                                        "version": {
                                                            "description": "Product version",
                                                            "type": "string",
                                                            "example": "5.6.1"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/stat/nodes\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/stat/nodes\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/stat/nodes\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/stat/nodes\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/stat/nodes\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/stat/nodes' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/stat/nodes\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url http://localhost:8008/stat/nodes"
                    }
                ]
            }
        },
        "/stat/activeperformance": {
            "get": {
                "tags": [
                    "stats"
                ],
                "summary": "Active performance",
                "description": "Get active performance statistics.",
                "operationId": "activePerformance",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/apikey_required"
                    },
                    {
                        "name": "rule_name",
                        "description": "The name of workflow rule to filter.",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hours_range",
                        "description": "Collect data from last hours",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Active performance report on MetaDefender Core",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "active_performance": {
                                            "type": "object",
                                            "properties": {
                                                "failed_results": {
                                                    "description": "Number of failed processing results.",
                                                    "type": "integer",
                                                    "example": 4
                                                },
                                                "hash_time": {
                                                    "type": "object",
                                                    "properties": {
                                                        "avg": {
                                                            "description": "Average hash calculating time.",
                                                            "type": "integer",
                                                            "example": 20
                                                        },
                                                        "max": {
                                                            "description": "Maximum hash calculating time.",
                                                            "type": "integer",
                                                            "example": 146
                                                        },
                                                        "min": {
                                                            "description": "Minimum hash calculating time.",
                                                            "type": "integer",
                                                            "example": 1
                                                        }
                                                    }
                                                },
                                                "processing_time": {
                                                    "type": "object",
                                                    "properties": {
                                                        "avg": {
                                                            "description": "Average overall processing time.",
                                                            "type": "integer",
                                                            "example": 1207
                                                        },
                                                        "max": {
                                                            "description": "Maximum overall processing time.",
                                                            "type": "integer",
                                                            "example": 7969
                                                        },
                                                        "min": {
                                                            "description": "Minimum overall processing time.",
                                                            "type": "integer",
                                                            "example": 58
                                                        }
                                                    }
                                                },
                                                "queue_time": {
                                                    "type": "object",
                                                    "properties": {
                                                        "avg": {
                                                            "description": "Average queue time.",
                                                            "type": "integer",
                                                            "example": 299
                                                        },
                                                        "max": {
                                                            "description": "Maximum queue time.",
                                                            "type": "integer",
                                                            "example": 10094
                                                        },
                                                        "min": {
                                                            "description": "Minimum queue time.",
                                                            "type": "integer",
                                                            "example": 8
                                                        }
                                                    }
                                                },
                                                "success_results": {
                                                    "description": "Total number of successfully-processed objects (excluding failed or not-scanned results)",
                                                    "type": "integer",
                                                    "example": 104
                                                },
                                                "total_filesize": {
                                                    "description": "Total processed file size in bytes.",
                                                    "type": "integer",
                                                    "example": 558352978
                                                },
                                                "total_requests": {
                                                    "description": "Total number of file submissions.",
                                                    "type": "integer",
                                                    "example": 108
                                                },
                                                "wait_time": {
                                                    "type": "object",
                                                    "properties": {
                                                        "avg": {
                                                            "description": "Average waiting time.",
                                                            "type": "integer",
                                                            "example": 150
                                                        },
                                                        "max": {
                                                            "description": "Maximum waiting time.",
                                                            "type": "integer",
                                                            "example": 639
                                                        },
                                                        "min": {
                                                            "description": "Minimum waiting time.",
                                                            "type": "integer",
                                                            "example": 3
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "from_time": {
                                            "description": "The data is gathered in this recent milliseconds.",
                                            "type": "integer",
                                            "example": 1637517600000
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Error403"
                    },
                    "405": {
                        "$ref": "#/components/responses/Error405"
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/stat/activeperformance?hours_range=SOME_INTEGER_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"rule_name: SOME_STRING_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/stat/activeperformance?hours_range=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"rule_name\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/stat/activeperformance?hours_range=SOME_INTEGER_VALUE\")\n  .get()\n  .addHeader(\"rule_name\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/stat/activeperformance?hours_range=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"rule_name\": \"SOME_STRING_VALUE\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/stat/activeperformance?hours_range=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"rule_name: SOME_STRING_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$headers=@{}\n$headers.Add(\"rule_name\", \"SOME_STRING_VALUE\")\n$response = Invoke-WebRequest -Uri 'http://localhost:8008/stat/activeperformance?hours_range=SOME_INTEGER_VALUE' -Method GET -Headers $headers"
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nheaders = { 'rule_name': \"SOME_STRING_VALUE\" }\n\nconn.request(\"GET\", \"/stat/activeperformance?hours_range=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url 'http://localhost:8008/stat/activeperformance?hours_range=SOME_INTEGER_VALUE' \\\n  --header 'rule_name: SOME_STRING_VALUE'"
                    }
                ]
            }
        },
        "/readyz": {
            "get": {
                "tags": [
                    "stats"
                ],
                "summary": "Get health check status",
                "description": "Fetch current health check status of MetaDefender Core server.",
                "operationId": "healthCheck",
                "parameters": [
                    {
                        "name": "verbose",
                        "description": "Show detailed result of health check",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service is currently healthy",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/readyz"
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/Error500"
                    },
                    "503": {
                        "description": "Service is currently unhealthy"
                    }
                },
                "x-code-samples": [
                    {
                        "lang": "C",
                        "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:8008/readyz?verbose=SOME_BOOLEAN_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"http://localhost:8008/readyz?verbose=SOME_BOOLEAN_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"http://localhost:8008/readyz?verbose=SOME_BOOLEAN_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Node",
                        "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"8008\",\n  \"path\": \"/readyz?verbose=SOME_BOOLEAN_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"8008\",\n  CURLOPT_URL => \"http://localhost:8008/readyz?verbose=SOME_BOOLEAN_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Powershell",
                        "source": "$response = Invoke-WebRequest -Uri 'http://localhost:8008/readyz?verbose=SOME_BOOLEAN_VALUE' -Method GET "
                    },
                    {
                        "lang": "Python",
                        "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8008\")\n\nconn.request(\"GET\", \"/readyz?verbose=SOME_BOOLEAN_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Shell-Curl",
                        "source": "curl --request GET \\\n  --url 'http://localhost:8008/readyz?verbose=SOME_BOOLEAN_VALUE'"
                    }
                ]
            }
        }
    },
    "servers": [
        {
            "url": "http://localhost:8008"
        }
    ],
    "components": {
        "securitySchemes": {
            "apikey": {
                "description": "Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userLogin) call can be used as an `apikey` for API calls that require authentication.\n",
                "type": "apiKey",
                "name": "apikey",
                "in": "header"
            }
        },
        "schemas": {
            "UserLogin": {
                "type": "object",
                "required": [
                    "oms-csrf-token",
                    "session_id"
                ],
                "properties": {
                    "oms-csrf-token": {
                        "type": "string",
                        "description": "The randomly generated token used to prevent CSRF attacks",
                        "example": "ZWU3NDJkNDcwMzQ4NWNlNGUzOTFjMGJiNDFkZDQ4ZWM="
                    },
                    "session_id": {
                        "type": "string",
                        "description": "The apikey used to make API calls which requires authentication",
                        "example": "a5dd6114dbd14a3b8f4577b7b54e6b0a"
                    }
                }
            },
            "PostlicenseKeyRequest": {
                "description": "basic information",
                "type": "object",
                "properties": {
                    "activationKey": {
                        "description": "The license key provided by OPSWAT (either eval or production license).",
                        "type": "string",
                        "example": "xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx"
                    },
                    "quantity": {
                        "description": "The number of MetaDefender nodes attached to this instance.",
                        "type": "integer",
                        "example": 1
                    },
                    "comment": {
                        "description": "Metadata field allowing you to provide relevant identification information for this instance.",
                        "type": "string",
                        "example": "MetaDefender Core Server 001"
                    }
                }
            },
            "LicenseInformation": {
                "description": "Information about the licensed product (product type, number of activations, deploymentId, expiration date and days left)",
                "type": "object",
                "properties": {
                    "days_left": {
                        "type": "integer",
                        "description": "Number of days left before expiration"
                    },
                    "deployment": {
                        "type": "string",
                        "description": "Unique identifier which is maps the current deployment to the activation"
                    },
                    "expiration": {
                        "type": "string",
                        "description": "Expiration date in MM/DD/YYYY format."
                    },
                    "licensed_engines": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of engine/module identifiers that have been licensed"
                    },
                    "max_node_count": {
                        "type": "string",
                        "description": "Total number of deployed MetaDefender Nodes attached to this MetaDefender Core instance."
                    },
                    "online_activated": {
                        "type": "boolean",
                        "description": "Track online/offline activation mode"
                    },
                    "product_id": {
                        "type": "string",
                        "description": "Official MetaDefender base SKU licensed."
                    },
                    "product_name": {
                        "type": "string",
                        "description": "Official MetaDefender base product name licensed."
                    }
                },
                "example": {
                    "days_left": 3731,
                    "deployment": "MSCL00000000000000000000000000000000",
                    "expiration": "09/30/2026",
                    "licensed_engines": "*",
                    "licensed_to": "OPSWAT, Inc.",
                    "max_node_count": "10",
                    "online_activated": true,
                    "product_id": "MSCL-4-unlimited",
                    "product_name": "Metadefender Core 5 Linux"
                }
            },
            "AdminConfigSession": {
                "description": "API object for /admin/config/session",
                "type": "object",
                "properties": {
                    "absoluteSessionTimeout": {
                        "description": "The interval (in milliseconds) for overall session length timeout (regardless of activity).",
                        "type": "integer",
                        "example": 0
                    },
                    "allowCrossIpSessions": {
                        "description": "Allow requests from the same user to come from different IPs.",
                        "type": "boolean",
                        "example": true
                    },
                    "allowDuplicateSession": {
                        "description": "Allow same user to have multiple active sessions.",
                        "type": "boolean",
                        "example": true
                    },
                    "sessionTimeout": {
                        "description": "The interval (in milliseconds) for the user's session timeout, based on last activity. Timer starts after the last activity for the apikey.",
                        "type": "integer",
                        "example": 300000
                    }
                }
            },
            "AdminConfigUpdate": {
                "description": "API object for /admin/config/update",
                "type": "object",
                "properties": {
                    "autoupdateperiod": {
                        "description": "The interval (in minutes) for checking for new updates.",
                        "type": "integer",
                        "example": 240
                    },
                    "deleteafterimport": {
                        "description": "If you want to clean the pickup folder after the updates have been applied.",
                        "type": "boolean",
                        "example": true
                    },
                    "disabledupdate": {
                        "description": "Lockdown a time interval when the engines are not allowed to update.",
                        "type": "array",
                        "items": {
                            "description": "The JSON below mean that from Friday to Sunday (week starts on Monday (1), ends on Sunday (7)) from 8:00 to 16:00 you do not want to distribute packages.\n<i>From and to is the distance in minutes from 0:00 (8:00 → 480 minutes, 16:00 → 960 minutes)<i>\n",
                            "type": "object",
                            "properties": {
                                "days": {
                                    "description": "A particular day (index of the week) or a defined interval (Fri-Sun -> 5-7)",
                                    "type": "string",
                                    "example": "5-7"
                                },
                                "from": {
                                    "description": "When to start the lockdown, expressed in minutes (8 AM=480)",
                                    "type": "integer",
                                    "example": 480
                                },
                                "to": {
                                    "description": "When to end the lockdown, expressed in minutes (4 PM=960)",
                                    "type": "integer",
                                    "example": 960
                                }
                            }
                        }
                    },
                    "pickupfolder": {
                        "description": "The folder where MetaDefender will look for the new engine files.",
                        "type": "string",
                        "example": "/tmp/core-data/update_autoadd"
                    },
                    "source": {
                        "description": "Define where the updates will be loaded from. <p> This can be either:\n  * `internet` -> if selected, will check for new updates every `autoupdateperiod` minutes\n  * `folder` -> make sure that MetaDefender has access/permission to that folder\n  * `manual` -> requires manually uploading the packages in Inventory > Modules > Upload package.\n",
                        "type": "string",
                        "enum": [
                            "internet",
                            "folder",
                            "manual"
                        ],
                        "example": "internet"
                    }
                }
            },
            "SkipList": {
                "description": "Object that defines the skip hashes list.",
                "type": "object",
                "properties": {
                    "blacklist": {
                        "type": "object",
                        "example": {
                            "edecbf6bd03ef340e0c6cd438a4069c2": {
                                "comment": "example3"
                            }
                        }
                    },
                    "skip": {
                        "type": "object",
                        "example": {
                            "13d8b8329bd2f668e6a889f32feaa48c832dbf0c": {
                                "comment": "example4",
                                "engines": [
                                    "totaldefense"
                                ]
                            }
                        }
                    },
                    "whitelist": {
                        "type": "object",
                        "example": {
                            "6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d": {
                                "comment": "example5"
                            },
                            "df72d035b31b1ff89f752e83af14b9e9dcf4913d9954f074546860d10b6908fb": {
                                "comment": "example2"
                            }
                        }
                    }
                }
            },
            "SkipListAfterDeleted": {
                "description": "Object that defines the skip hashes list.",
                "type": "object",
                "properties": {
                    "blacklist": {
                        "type": "object"
                    },
                    "skip": {
                        "type": "object"
                    },
                    "whitelist": {
                        "type": "object",
                        "example": {
                            "6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d": {
                                "comment": "example5"
                            },
                            "df72d035b31b1ff89f752e83af14b9e9dcf4913d9954f074546860d10b6908fb": {
                                "comment": "example2"
                            }
                        }
                    }
                }
            },
            "AdminConfigWebhook": {
                "description": "Webhook configuration details.",
                "type": "object",
                "properties": {
                    "maxretrytime": {
                        "description": "Number of allowed retries sending callback to client when failed.\n\n> _**For example**_: maxretrytime= 3\n\nSending callback failed for some reasons\n  * 1st retry triggered after delayduration (ms)\n  * 2nd retry triggered after delayduration+ delayprogression (ms)\n  * 3rd retry triggered after delayduration+ 2*delayprogression (ms)\n",
                        "type": "number",
                        "example": 3
                    },
                    "delayduration": {
                        "description": "in milliseconds",
                        "type": "number",
                        "example": 1000
                    },
                    "delayprogression": {
                        "description": "in milliseconds",
                        "type": "number",
                        "example": 1000
                    },
                    "requestqueue": {
                        "description": "Total requests can be sent concurrently for each worker.\n",
                        "type": "number",
                        "example": 100
                    },
                    "transfertimeout": {
                        "description": "After this transfer timeout (in milliseconds), if MetaDefender Core still doesn't receive webhook server's response,\nit will try to send webhook again.\n",
                        "type": "number",
                        "example": 30000
                    },
                    "workercount": {
                        "description": "Total number of workers for sending the result back to Webhook client. Default is 1. Service restart is required for changes to take effect.\n",
                        "type": "number",
                        "example": 1
                    }
                }
            },
            "ProxyList": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "feature_proxy": {
                        "type": "array",
                        "description": "Decide which feature to use or not use proxy.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "exclusion": {
                                    "type": "string",
                                    "example": "*.dl.opswat.com; 192.168.0.0/24"
                                },
                                "id": {
                                    "type": "string",
                                    "description": "Feature ID.",
                                    "enum": [
                                        "callbackurl",
                                        "downloadfrom",
                                        "license",
                                        "mdcloud",
                                        "updateengine",
                                        "sanitizedurl",
                                        "ssologin",
                                        "yara"
                                    ]
                                },
                                "port": {
                                    "type": "string"
                                },
                                "server": {
                                    "type": "string"
                                },
                                "use_proxy": {
                                    "type": "integer",
                                    "description": "0 - this feature does not use proxy. 1 - this feature use master proxy setting. 2 - this feature use a custom proxy.",
                                    "enum": [
                                        0,
                                        1,
                                        2
                                    ]
                                },
                                "username": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "exclusion": {
                        "type": "string"
                    },
                    "port": {
                        "type": "string"
                    },
                    "server": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "example": {
                    "enabled": true,
                    "feature_proxy": [
                        {
                            "exclusion": "abc.com",
                            "id": "updateengine",
                            "port": 3128,
                            "server": "192.168.1.2",
                            "use_proxy": 2
                        },
                        {
                            "id": "downloadfrom",
                            "port": 3128,
                            "server": "192.168.200.225",
                            "use_proxy": 1,
                            "username": "abc"
                        },
                        {
                            "id": "callbackurl",
                            "port": 3128,
                            "server": "192.168.1.4",
                            "use_proxy": 2
                        },
                        {
                            "id": "sanitizedurl",
                            "port": 3128,
                            "server": "192.168.1.5",
                            "use_proxy": 2
                        },
                        {
                            "id": "license",
                            "port": 3128,
                            "server": "192.168.1.6",
                            "use_proxy": 2,
                            "username": "c"
                        },
                        {
                            "id": "ssologin",
                            "port": 3128,
                            "server": "192.168.1.7",
                            "use_proxy": 2,
                            "username": "b"
                        },
                        {
                            "id": "mdcloud",
                            "port": 3128,
                            "server": "192.168.1.8",
                            "use_proxy": 2,
                            "username": "a"
                        },
                        {
                            "id": "yara",
                            "port": 3128,
                            "server": "192.168.200.225",
                            "use_proxy": 1,
                            "username": "abc"
                        }
                    ],
                    "port": 3128,
                    "server": "10.40.50.18",
                    "username": "abc"
                }
            },
            "ProxyListRequestBody": {
                "type": "object",
                "required": [
                    "enabled",
                    "port",
                    "server"
                ],
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "When true, use a proxy server for MetaDefender Core"
                    },
                    "feature_proxy": {
                        "type": "array",
                        "description": "Decide which feature to use or not use proxy.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "exclusion": {
                                    "type": "string",
                                    "example": "*.dl.opswat.com; 192.168.0.0/24"
                                },
                                "id": {
                                    "type": "string",
                                    "description": "Feature ID.",
                                    "enum": [
                                        "callbackurl",
                                        "downloadfrom",
                                        "license",
                                        "mdcloud",
                                        "updateengine",
                                        "sanitizedurl",
                                        "ssologin",
                                        "yara"
                                    ]
                                },
                                "port": {
                                    "type": "string"
                                },
                                "server": {
                                    "type": "string"
                                },
                                "use_proxy": {
                                    "type": "integer",
                                    "description": "0 - this feature does not use proxy. 1 - this feature use master proxy setting. 2 - this feature use a custom proxy.",
                                    "enum": [
                                        0,
                                        1,
                                        2
                                    ]
                                },
                                "username": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "exclusion": {
                        "type": "string",
                        "description": "Not use the proxy server for the addresses starting with the following entries"
                    },
                    "port": {
                        "type": "string",
                        "description": "Proxy server port"
                    },
                    "server": {
                        "type": "string",
                        "description": "Proxy server host address"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username for proxy authentication"
                    },
                    "password": {
                        "description": "Password for proxy authentication",
                        "type": "string"
                    }
                },
                "example": {
                    "enabled": true,
                    "feature_proxy": [
                        {
                            "exclusion": "abc.com",
                            "id": "updateengine",
                            "port": 3128,
                            "server": "192.168.1.2",
                            "use_proxy": 2
                        },
                        {
                            "id": "downloadfrom",
                            "port": 3128,
                            "server": "192.168.200.225",
                            "use_proxy": 1,
                            "username": "abc"
                        },
                        {
                            "id": "callbackurl",
                            "port": 3128,
                            "server": "192.168.1.4",
                            "use_proxy": 2
                        },
                        {
                            "id": "sanitizedurl",
                            "port": 3128,
                            "server": "192.168.1.5",
                            "use_proxy": 2
                        },
                        {
                            "id": "license",
                            "port": 3128,
                            "server": "192.168.1.6",
                            "use_proxy": 2,
                            "username": "c"
                        },
                        {
                            "id": "ssologin",
                            "port": 3128,
                            "server": "192.168.1.7",
                            "use_proxy": 2,
                            "username": "b"
                        },
                        {
                            "id": "mdcloud",
                            "port": 3128,
                            "server": "192.168.1.8",
                            "use_proxy": 2,
                            "username": "a"
                        },
                        {
                            "id": "yara",
                            "port": 3128,
                            "server": "192.168.200.225",
                            "use_proxy": 1,
                            "username": "abc"
                        }
                    ],
                    "port": 3128,
                    "server": "192.168.200.225",
                    "username": "abc"
                }
            },
            "MissingEnabledField": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Missing enabled field"
                    }
                },
                "example": {
                    "err": "Missing enabled field"
                }
            },
            "ErrorWhileParsingInputJson": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Error while parsing input json"
                    }
                },
                "example": {
                    "err": "Error while parsing input json"
                }
            },
            "MissingPort": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Missing port"
                    }
                },
                "example": {
                    "err": "Missing port"
                }
            },
            "MissingServerAddress": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Missing server address"
                    }
                },
                "example": {
                    "err": "Missing server address"
                }
            },
            "ProxyRequiresAuthentication": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Test proxy connection failed. Error: Proxy requires authentication"
                    }
                },
                "example": {
                    "err": "Test proxy connection failed. Error: Proxy requires authentication"
                }
            },
            "PostProxyRequest": {
                "description": "basic information",
                "type": "object",
                "required": [
                    "enabled",
                    "port",
                    "server"
                ],
                "properties": {
                    "enabled": {
                        "description": "This redundant attribute will be removed soon.",
                        "type": "boolean",
                        "example": true
                    },
                    "exclusion": {
                        "description": "Not use the proxy server for the addresses starting with the following entries",
                        "type": "string",
                        "example": "*.dl.opswat.com; 192.168.0.0/24"
                    },
                    "port": {
                        "description": "Proxy server port",
                        "type": "string",
                        "example": "3128"
                    },
                    "server": {
                        "description": "Proxy server host address",
                        "type": "string",
                        "example": "192.168.200.225"
                    },
                    "username": {
                        "description": "Username for proxy authentication",
                        "type": "string",
                        "example": "tecmint"
                    },
                    "password": {
                        "description": "Password for proxy authentication",
                        "type": "string",
                        "example": "123"
                    }
                }
            },
            "AdminConfigFileSync": {
                "description": "Sync scan configuration details.",
                "type": "object",
                "properties": {
                    "timeout": {
                        "description": "Sync scan related connection timeout value (in minutes).\n",
                        "type": "number",
                        "example": 5
                    }
                }
            },
            "ErrorWhileRequestingConfig": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Error while requesting configuration"
                    }
                },
                "example": {
                    "err": "Error while modifying configuration"
                }
            },
            "InternalServerError": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Internal server error"
                    }
                },
                "example": {
                    "err": "Internal server error"
                }
            },
            "ErrorWhileModifyingConfig": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Error while modifying configuration\n\nSetting timeout value out of the limit range [1, 30] minutes, or the request body is not in JSON format.\n"
                    }
                },
                "example": {
                    "err": "Error while modifying configuration"
                }
            },
            "AdminConfigSessioncookie": {
                "description": "Session cookie configuration details.",
                "type": "object",
                "properties": {
                    "samesite": {
                        "description": "SameSite attribute accepts three values:\n* `Strict` - cookies will only be sent in a first-party context, not be sent along with requests initiated by third party websites.\n* `Lax` - cookies are not sent on normal cross-site subrequests, but are sent when a user is navigating to the origin site.\n* `None` - cookies will be sent in all contexts.\n\nDefault value: `Lax`\n",
                        "type": "number",
                        "example": "Strict"
                    }
                }
            },
            "AdminConfigCustomResponseHeader": {
                "description": "Custom response header details.",
                "type": "object",
                "properties": {
                    "include_address": {
                        "description": "To include data from address_str.",
                        "type": "object",
                        "properties": {
                            "enabled": {
                                "description": "Include data from address_str.",
                                "type": "boolean",
                                "example": true
                            },
                            "address_str": {
                                "description": "IP address.",
                                "type": "string",
                                "example": "1.2.3.4"
                            }
                        }
                    },
                    "include_deployment_id": {
                        "description": "Include generated deployment ID.",
                        "type": "boolean",
                        "example": true
                    },
                    "specify_users_agent": {
                        "type": "object",
                        "properties": {
                            "enabled": {
                                "description": "True: required matched header user_agent to given list in allowed_users_agent\nto return new header X-Core-Id in response.\n",
                                "type": "boolean",
                                "example": true
                            },
                            "allowed_users_agent": {
                                "description": "Indicate which user_agent should be allowed to include new header in response header.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "example": [
                                    "kiosk",
                                    "email"
                                ]
                            }
                        }
                    },
                    "authorized_only": {
                        "description": "Only return new X-Core-Id header for authorized user.",
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "HealthCheck": {
                "description": "Health check criterias.",
                "type": "object",
                "properties": {
                    "database": {
                        "type": "boolean",
                        "example": true
                    },
                    "enable_feature": {
                        "type": "boolean",
                        "example": true
                    },
                    "number_active_av_engines": {
                        "type": "integer",
                        "example": 0
                    },
                    "engines": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "example": "clamav"
                                },
                                "display_name": {
                                    "type": "string",
                                    "example": "ClamAV"
                                }
                            }
                        }
                    },
                    "license": {
                        "type": "boolean",
                        "example": true
                    },
                    "scan_queue": {
                        "type": "integer",
                        "example": 100
                    }
                }
            },
            "PostRequestBody": {
                "description": "Health check criterias.",
                "type": "object",
                "properties": {
                    "enable_feature": {
                        "type": "boolean",
                        "example": true
                    },
                    "scan_queue": {
                        "type": "integer",
                        "example": 100
                    },
                    "number_active_av_engines": {
                        "type": "integer",
                        "example": 1
                    },
                    "required_engines": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "filetype",
                            "7z",
                            "avira"
                        ]
                    }
                }
            },
            "SetRequiredEngineFailedWhenInvalidLicense": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Failed to set required_engines when license is not valid"
                    }
                },
                "example": {
                    "err": "Failed to set required_engines when license is not valid"
                }
            },
            "SetRequiredEngineFailedWhenInvalidEngine": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Failed to set required_engines. Required_engines must be a licensed engine"
                    }
                },
                "example": {
                    "err": "Failed to set required_engines. Required_engines must be a licensed engine"
                }
            },
            "UserResponse": {
                "description": "User object in MetaDefender.",
                "type": "object",
                "properties": {
                    "api_key": {
                        "description": "Associated apikey with this user",
                        "type": "string",
                        "example": "b8a4b52f19de88e365aa4f7e403fa91b352f"
                    },
                    "directory_id": {
                        "description": "To which User Directories belongs to (LOCAL/System/etc.)",
                        "type": "integer",
                        "example": 1
                    },
                    "display_name": {
                        "description": "Which is the name showed in the Management Console",
                        "type": "string",
                        "example": "jsmith"
                    },
                    "email": {
                        "description": "User's email address",
                        "type": "string",
                        "example": "john.smith@company.com"
                    },
                    "name": {
                        "description": "User's full name",
                        "type": "string",
                        "example": "John Smith"
                    },
                    "roles": {
                        "description": "A list of roles attached to this user",
                        "type": "array",
                        "example": [
                            "1",
                            "2",
                            "3",
                            "..."
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "ui_settings": {
                        "description": "Configuration of Management Console for this user.",
                        "type": "object",
                        "example": {
                            "refresh_rate": {
                                "value": 30
                            },
                            "time_period": {
                                "value": 24,
                                "unitsInHour": 1
                            }
                        }
                    }
                }
            },
            "UserRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/UserResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "password": {
                                "description": "The user's password",
                                "type": "string",
                                "example": "HG&B*!C!KLEF#RH*#*(($YB"
                            }
                        }
                    }
                ]
            },
            "RolePermissionObject": {
                "description": "An object defining the permission set allowed on MetaDefender individual role.",
                "type": "array",
                "example": [
                    "read",
                    "write"
                ],
                "items": {
                    "type": "string",
                    "enum": [
                        "read",
                        "write"
                    ],
                    "example": "read"
                }
            },
            "NewUserRoleRequest": {
                "description": "MetaDefender user role describing object.",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name identifier of the role",
                        "type": "string",
                        "example": "new_role"
                    },
                    "display_name": {
                        "description": "The extended name showed in the Management Console.",
                        "type": "string",
                        "example": "New MetaDefender User Role"
                    },
                    "rights": {
                        "description": "A list of rights for each permission",
                        "type": "object",
                        "properties": {
                            "agents": {
                                "description": "What permissions are allowed for Node.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "cert": {
                                "description": "What permissions are allowed for Certificates.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "configlog": {
                                "description": "What permissions are allowed for Configuration logs.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "engines": {
                                "description": "What permissions are allowed for Engines and Modules.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "external": {
                                "description": "What permissions are allowed for External actions (External Scanner/Post Actions).",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "license": {
                                "description": "What permissions are allowed for managing the License.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "quarantine": {
                                "description": "What permissions are allowed for managing the Quarantine.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "retention": {
                                "description": "What permissions are allowed for managing the retention policies.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "rule": {
                                "description": "What permissions are allowed for managing the workflow rules.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "scan": {
                                "description": "What permissions are allowed for managing analysis actions.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "scanlog": {
                                "description": "What permissions are allowed for managing the analysis logs.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "skip": {
                                "description": "What permissions are allowed for managing the Whitelist/blacklist defined in the Inventory.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "update": {
                                "description": "What permissions are allowed for managing the update configuration.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "updatelog": {
                                "description": "What permissions are allowed for managing the update logs.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "users": {
                                "description": "What permissions are allowed for managing the users.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "workflow": {
                                "description": "What permissions are allowed for managing the workflow templates.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            },
                            "zone": {
                                "description": "What permissions are allowed for managing the network zones.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/RolePermissionObject"
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "NewUserRoleResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/NewUserRoleRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "editable",
                            "id"
                        ],
                        "properties": {
                            "editable": {
                                "description": "If the role can be altered or not.",
                                "type": "boolean",
                                "example": true
                            },
                            "id": {
                                "description": "Internal used identifier",
                                "type": "integer",
                                "example": 6
                            }
                        }
                    }
                ]
            },
            "YaraSourcesObject": {
                "description": "Object describing the yara sources.",
                "type": "object",
                "properties": {
                    "local_sources": {
                        "description": "A list of all locals sources",
                        "type": "array",
                        "items": {
                            "description": "Object defining the location of the files and if this source is being used.",
                            "type": "object",
                            "properties": {
                                "source": {
                                    "description": "The location (file path) of the files.",
                                    "type": "string",
                                    "example": "/mnt/yara"
                                },
                                "state": {
                                    "description": "Defining if this source is being used or not",
                                    "type": "string",
                                    "enum": [
                                        "disabled",
                                        "enabled"
                                    ],
                                    "example": "enabled"
                                }
                            }
                        }
                    },
                    "http_sources": {
                        "description": "A list of all remote sources.",
                        "type": "array",
                        "items": {
                            "description": "Object defining the URL and if this source is being used.",
                            "type": "object",
                            "properties": {
                                "source": {
                                    "description": "The location (URL) of the package.",
                                    "type": "string",
                                    "example": "http://onlineyarasources.net/source.zip"
                                },
                                "state": {
                                    "description": "Defining if this source is being used or not",
                                    "type": "string",
                                    "enum": [
                                        "disabled",
                                        "enabled"
                                    ],
                                    "example": "disabled"
                                }
                            }
                        }
                    }
                }
            },
            "BodyAndDownloadLinkGiven": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Both body data and download link were given."
                    }
                },
                "example": {
                    "err": "Both body data and download link were given."
                }
            },
            "CallbackURLInvalid": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Callback url is invalid."
                    }
                },
                "example": {
                    "err": "Callback url is invalid."
                }
            },
            "FileUploadRejected": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "File upload rejected due to insufficient disk space"
                    }
                },
                "example": {
                    "err": "File upload rejected due to insufficient disk space"
                }
            },
            "DLPRuleMatchResult": {
                "description": "An entry detailing the match.",
                "type": "object",
                "properties": {
                    "after": {
                        "description": "The context after the matched data.",
                        "type": "string",
                        "example": "123 Cherry Lane st."
                    },
                    "before": {
                        "description": "The context before the matched data.",
                        "type": "string",
                        "example": "Card Number"
                    },
                    "certainty": {
                        "description": "The text version of \"certainty_score\", possible values:\n  * `Very Low`\n  * `Low`\n  * `Medium`\n  * `High`\n  * `Very High`\n",
                        "type": "string",
                        "enum": [
                            "Very Low",
                            "Low",
                            "Medium",
                            "High",
                            "Very High"
                        ],
                        "example": "Very High"
                    },
                    "certainty_score": {
                        "description": "Is  defined by the relevance of the given hit in its context. It is calculated based on multiple factors such as the number of digits, possible values: [0-100]\n",
                        "type": "integer",
                        "example": 100
                    },
                    "hit": {
                        "description": "The matched data.",
                        "type": "string",
                        "example": "XXXXXXXXXXXXXXX1938"
                    },
                    "location": {
                        "description": "The location of the hit that is found in a file.",
                        "type": "string",
                        "example": "Page 1"
                    },
                    "severity": {
                        "description": "(NOTE: this field is deprecated): can be 0 (detected) or 1 (suspicious).\n",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "example": 0
                    },
                    "tryRedact": {
                        "description": "If file was redacted or not.",
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "DLPResponse": {
                "description": "Full report from Proactive DLP",
                "type": "object",
                "properties": {
                    "certainty": {
                        "description": "Describes how certain the hit is, possible values:\n  * `Very Low`\n  * `Low`\n  * `Medium`\n  * `High`\n  * `Very High`\n",
                        "type": "string",
                        "enum": [
                            "Very Low",
                            "Low",
                            "Medium",
                            "High",
                            "Very High"
                        ],
                        "example": "High"
                    },
                    "errors": {
                        "description": "A  list of error objects (empty if no errors happened), each error object contains following keys:\n  * `scan`: scan related error description\n  * `redact`: redaction related error description\n  * `watermark`: watermark related error description\n  * `metadata_removal`: metadata removal related error description\n",
                        "type": "object",
                        "example": {
                            "redact": "File structure invalid."
                        }
                    },
                    "filename": {
                        "description": "Output processed file name (pre-configured on engine settings under Core's worflow rule)",
                        "type": "string",
                        "example": "OPSWAT_Proactive_DLP_CCN_proactive-dlp-processed_by_OPSWAT_MetaDefender_8101abae27be4d63859c55d9e0ed0135.pdf"
                    },
                    "hits": {
                        "description": "Detailed results that contains as key the type of matched rule: \n  * ccn (credit card number), \n  * ssn (social security number), \n  * regex_<index> (regular expression with an index in order to differentiate the RegEx rules if there are more.)\n",
                        "type": "object",
                        "properties": {
                            "ccn": {
                                "type": "object",
                                "properties": {
                                    "display_name": {
                                        "description": "Credit Card Number, Social Security Number, or in case of RegEx, the name of the rule that has been given by the user",
                                        "type": "string",
                                        "example": "Credit Card Number"
                                    },
                                    "hits": {
                                        "description": "A list of detections that matched this rule/pattern.",
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "allOf": [
                                                {
                                                    "$ref": "#/components/schemas/DLPRuleMatchResult"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "metadata_removal": {
                        "description": "Result of metadata removal.",
                        "type": "object",
                        "properties": {
                            "result": {
                                "description": "Result of the metadata removal process, possible values:\n  * `removed`\n  * `not removed`\n  * `failed to remove`\n",
                                "type": "string",
                                "enum": [
                                    "removed",
                                    "not removed",
                                    "failed to remove"
                                ],
                                "example": "not removed"
                            }
                        }
                    },
                    "redact": {
                        "description": "Result of redaction process.",
                        "type": "object",
                        "properties": {
                            "result": {
                                "description": "Result of the redaction process, possible values:\n  * `redacted`\n  * `not redacted`\n  * `failed to redact`\n",
                                "type": "string",
                                "enum": [
                                    "redacted",
                                    "not redacted",
                                    "failed to redact"
                                ],
                                "example": "redacted"
                            }
                        }
                    },
                    "severity": {
                        "description": "(NOTE: this field is deprecated): represents the severity of the data loss, possible values:\n  * `0` - Certainly is data loss\n  * `1` - Might be data loss\n",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "example": 0
                    },
                    "verdict": {
                        "description": "The overall result for the scanned file. Possible values:\n  * `0` - Clean\n  * `1` - Found matched data\n  * `2` - Suspicious\n  * `3` - Failed\n  * `4` - Not scanned\n",
                        "type": "integer",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4
                        ],
                        "example": 1
                    },
                    "watermark": {
                        "description": "Result of watermarking process.",
                        "type": "object",
                        "properties": {
                            "result": {
                                "description": "Result of the watermarking process, possible values:\n  * `added`\n  * `not added`\n  * `failed to add`\n",
                                "type": "string",
                                "enum": [
                                    "added",
                                    "not added",
                                    "failed to add"
                                ],
                                "example": "added"
                            }
                        }
                    }
                }
            },
            "DownloadInfo": {
                "description": "The downloading status.",
                "type": "object",
                "properties": {
                    "error_detail": {
                        "description": "Revealed detailed reason why the download failed.\n",
                        "type": "string",
                        "example": "File size exceeded the configured maximum DOWNLOAD size"
                    },
                    "progress": {
                        "description": "Only applicable when \"status\" is `Downloading`, indicates download finished percentage, in a range of [1, 99].\n  * Once hitting 100, the status will be changed to `Download Success`.\n  * or other problematic status (`Download Cancelled`, `Download Failed`) if the download stopped unexpectedly.\n",
                        "type": "number",
                        "example": 5
                    },
                    "status": {
                        "description": "Indicates download status, which could be either\n  - `Downloading`\n    - Check `progress` key value for actual download percentage\n      ```json\n      \"download_info\": {\n          \"progress\": 7,\n          \"status\": \"Downloading\",\n          \"url\": \"http://192.168.200.97:8080/5gb.zip\"\n      }\n      ```\n  - `Download Success`\n      ```json\n      \"download_info\": {\n          \"status\": \"Download Success\",\n          \"url\": \"https://secure.eicar.org/eicar.com\"\n      }\n      ```\n  - `Download Failed`\n    - Check `error_detail` key value for an error explanation\n      ```json\n      \"download_info\": {\n          \"error_detail\": \"Connection error\",\n          \"status\": \"Download Failed\",\n          \"url\": \"http://192.168.200.97:8080/2gb.zip\"\n      }\n      ```\n  - `Download Timeout`\n    - Expecting to occur when the download progress takes longer than what time window allowed in MetaDefender Core's pre-configured setting under workflow rule (under \"SCAN\" tab)\n      ```json\n      \"download_info\": {\n          \"status\": \"Download Timeout\",\n          \"url\": \"http://192.168.200.97:8080/2gb.zip\"\n      }\n      ```\n  - `Download Cancelled`\n    - Expecting to occur when user explicitly cancelled that file scan request, or batch request that the scan belongs to\n      ```json\n      \"download_info\": {\n          \"status\": \"Download Cancelled\",\n          \"url\": \"http://192.168.200.97:8080/5gb.zip\"\n      }\n      ```\n",
                        "type": "string",
                        "example": "Download Success"
                    },
                    "url": {
                        "description": "Original download link which was specified in HTTP(S) request's `downloadfrom` header\n",
                        "type": "string",
                        "example": "https://secure.eicar.org/eicar.com"
                    }
                }
            },
            "ExtractionInfo": {
                "description": "Details for archive extraction.",
                "type": "object",
                "properties": {
                    "decrypted_status": {
                        "description": "Indicate that decryption phase is successful or not.",
                        "type": "string",
                        "enum": [
                            "Success",
                            "Failed"
                        ],
                        "example": "Failed"
                    },
                    "err_category": {
                        "description": "Error category",
                        "type": "string",
                        "example": "Extraction error"
                    },
                    "err_code": {
                        "description": "Error code",
                        "type": "integer",
                        "example": 307
                    },
                    "err_details": {
                        "description": "Error message",
                        "type": "string",
                        "example": "Password is not defined."
                    },
                    "is_encrypted_file": {
                        "description": "Indicate if file is password-protected or not.",
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "SignerInfo": {
                "description": "Digital signature information of the scanned file.\n",
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "digest_algorithm": {
                            "description": "Digest algorithm.",
                            "type": "string",
                            "example": "sha256"
                        },
                        "digest_encryption_algorithm": {
                            "description": "Encryption algorithm.",
                            "type": "string",
                            "example": "rsaEncryption"
                        },
                        "issuer": {
                            "description": "Entity that develops and registers the certificate.",
                            "type": "string",
                            "example": "DigiCert SHA2 Assured ID Code Signing CA"
                        },
                        "serial_number": {
                            "description": "Serial number of the certificate.",
                            "type": "string",
                            "example": "018B3D51928A477491ADD4FBC33B4FCB"
                        },
                        "vendor_name": {
                            "description": "Entity that is issued a certificate and utilize it for creating a digital signature.",
                            "type": "string",
                            "example": "OPSWAT, Inc."
                        },
                        "version": {
                            "description": "Version of X.509 that is used in the certificate. This version field is zero-based.\n\n* 0: v1\n* 1: v2\n* 2: v3\n",
                            "type": "string",
                            "example": 2
                        }
                    }
                }
            },
            "FileInformation": {
                "description": "basic information of the scanned file",
                "type": "object",
                "properties": {
                    "display_name": {
                        "description": "The filename reported via `filename` header.",
                        "type": "string",
                        "example": "OPSWAT_Proactive_DLP_CCN.pdf"
                    },
                    "file_size": {
                        "description": "Total file size in bytes.",
                        "type": "integer",
                        "example": 75906
                    },
                    "file_type": {
                        "description": "The filetype using mimetype.",
                        "type": "string",
                        "example": "application/pdf"
                    },
                    "file_type_description": {
                        "description": "The filetype in human readable format.",
                        "type": "string",
                        "example": "Adobe Portable Document Format"
                    },
                    "md5": {
                        "description": "File's MD5 hash.",
                        "type": "string",
                        "example": "c4863c8ce44fb7ae84eb48c9b78f8b5e"
                    },
                    "sha1": {
                        "description": "File's SHA1 hash.",
                        "type": "string",
                        "example": "a33c72a996a9603d479e3dff3d23bf619c975fbe"
                    },
                    "sha256": {
                        "description": "File's SHA256 Hash.",
                        "type": "string",
                        "example": "b9fdc10b47950b9e503ef4dc0ef42d28e7c37ccd749d4a5dcd7d9b3218996b7f"
                    },
                    "signer_infos": {
                        "$ref": "#/components/schemas/SignerInfo"
                    },
                    "type_category": {
                        "description": "File type category.\n  * `A` - Archive files\n  * `AP` - Application\n  * `D` - Document (Microsoft Office)\n  * `D_ENC` - Encrypted Documents\n  * `E` - Executables\n  * `G` - Graphical format (JPG, PNG, GIF, etc.)\n  * `I` - Disk image\n  * `M` - Audio or video format\n  * `OPENSSL_ENC` - OpenSSL Encrypted Files\n  * `P` - PDF format\n  * `T` - Text\n  * `Z` - Mail messages\n  * `O` - Other (anything that is not recognized as one of the above)\n",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "A",
                                "D",
                                "E",
                                "G",
                                "I",
                                "M",
                                "P",
                                "T",
                                "Z",
                                "O"
                            ]
                        },
                        "example": [
                            "P"
                        ]
                    },
                    "receive_data_timestamp": {
                        "description": "The timestamp when upload progress started (first byte received) (in milliseconds)",
                        "type": "string",
                        "example": "2020-03-12T08:37:00.002Z"
                    },
                    "upload_time": {
                        "description": "Total time elapsed for upload process (in milliseconds).",
                        "type": "integer",
                        "example": 3456
                    },
                    "upload_timestamp": {
                        "description": "The timestamp when upload progress finished (all bytes received) (in milliseconds)",
                        "type": "string",
                        "example": "2020-03-12T08:37:05.412Z"
                    }
                }
            },
            "FileTypeResponse": {
                "description": "response information from FileType engine",
                "type": "object",
                "required": [
                    "file_info"
                ],
                "properties": {
                    "file_info": {
                        "type": "object",
                        "required": [
                            "description",
                            "encrypted",
                            "extensions",
                            "groupID",
                            "groupIDs",
                            "type",
                            "typeID",
                            "type_ids"
                        ],
                        "properties": {
                            "description": {
                                "description": "File type description",
                                "type": "string",
                                "example": "Adobe Portable Document Format"
                            },
                            "encrypted": {
                                "description": "File is password-protected or not",
                                "type": "boolean",
                                "example": false
                            },
                            "extensions": {
                                "description": "File type extension",
                                "type": "string",
                                "example": "pdf"
                            },
                            "groupID": {
                                "description": "File type category",
                                "type": "string",
                                "example": "P"
                            },
                            "groupIDs": {
                                "description": "File type category.\n  * `A` - Archive files\n  * `AP` - Application\n  * `D` - Document (Microsoft Office)\n  * `D_ENC` - Encrypted Documents\n  * `E` - Executables\n  * `G` - Graphical format (JPG, PNG, GIF, etc.)\n  * `I` - Disk image\n  * `M` - Audio or video format\n  * `OPENSSL_ENC` - OpenSSL Encrypted Files\n  * `P` - PDF format\n  * `T` - Text\n  * `Z` - Mail messages\n  * `O` - Other (anything that is not recognized as one of the above)\n",
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "A",
                                        "D",
                                        "E",
                                        "G",
                                        "I",
                                        "M",
                                        "P",
                                        "T",
                                        "Z",
                                        "O"
                                    ]
                                },
                                "example": [
                                    "P"
                                ]
                            },
                            "type": {
                                "description": "MIME type",
                                "type": "string",
                                "example": "application/pdf"
                            },
                            "typeID": {
                                "description": "File type ID",
                                "type": "string",
                                "example": "PDF"
                            },
                            "type_ids": {
                                "description": "A list of file type IDs",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "example": [
                                    "PDF"
                                ]
                            }
                        }
                    },
                    "file_info_details": {
                        "description": "Detailed information.",
                        "type": "object"
                    },
                    "file_metadata": {
                        "description": "Metadata information.",
                        "type": "object"
                    },
                    "result_template_hash": {
                        "description": "SHA256 Hash of user-interface template. For web console only.",
                        "type": "string",
                        "example": "126b24af8d08e8199d478b03bfaf629bc0756d87c20fb46ff5c6b49b9a843303"
                    }
                }
            },
            "OPSWATFilescanResponse": {
                "description": "response information from OPSWAT Filescan engine",
                "type": "object"
            },
            "DeepCDRDetails": {
                "description": "Deep CDR module returns forensic info to describe what happened during the process in the case file was successfully sanitized.",
                "type": "object",
                "example": {
                    "description": "Sanitized successfully.",
                    "details": [
                        {
                            "action": "sanitized",
                            "object_name": "XML content"
                        },
                        {
                            "action": "removed",
                            "count": 1,
                            "object_details": [
                                "<ddeLink xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" ddeService=\"calc\" ddeTopic=\"topic\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">\r\n  <ddeItems>\r\n    <ddeItem name=\"_xlbgnm.A3\" advise=\"1\" />\r\n    <ddeItem name=\"StdDocumentName\" ole=\"1\" advise=\"1\" />\r\n  </ddeItems>\r\n</ddeLink>"
                            ],
                            "object_name": "DDE"
                        },
                        {
                            "action": "removed",
                            "count": 2,
                            "object_details": [
                                "http://metadefender.com/",
                                "http://google.com/"
                            ],
                            "object_name": "hyperlink"
                        },
                        {
                            "object_name": "XLS file",
                            "file_name": "Microsoft_Excel_97-2003_Worksheet.xls",
                            "description": "Sanitized successfully.",
                            "details": [
                                {
                                    "action": "removed",
                                    "count": 1,
                                    "object_details": [
                                        "Attribute VB_Name = \"Sheet1\"\r\nAttribute VB_Base = \"0{00020820-0000-0000-C000-000000000046}\"\r\nAttribute VB_GlobalNameSpace = False\r\nAttribute VB_Creatable = False\r\nAttribute VB_PredeclaredId = True\r\nAttribute VB_Exposed = True\r\nAttribute VB_TemplateDerived = False\r\nAttribute VB_Customizable = True\r\n"
                                    ],
                                    "object_name": "macro"
                                }
                            ],
                            "action": "sanitized"
                        },
                        {
                            "object_name": "XLSX file",
                            "file_name": "Microsoft_Excel_Worksheet.xlsx",
                            "description": "invalid file structure.",
                            "details": "Relationship file sharedStrings.xml does not exist",
                            "action": "removed"
                        },
                        {
                            "action": "removed",
                            "count": 1,
                            "object_name": "OLE"
                        },
                        {
                            "action": "sanitized",
                            "count": 3,
                            "object_name": "image"
                        },
                        {
                            "action": "removed",
                            "count": 1,
                            "object_details": [
                                "Attribute VB_Name = \"Module1\"\r\nSub test_Macro()\r\nAttribute test_Macro.VB_Description = \"create macro for FTC test\"\r\nAttribute test_Macro.VB_ProcData.VB_Invoke_Func = \"e\\n14\"\r\n'\r\n' test_Macro Macro\r\n' create macro for FTC test\r\n'\r\n' Keyboard Shortcut: Ctrl+e\r\n'\r\n    Range(\"B13\").Select\r\n    ActiveCell.FormulaR1C1 = \"testing macro\"\r\n    Range(\"C13\").Select\r\n    ActiveCell.FormulaR1C1 = \"blablabla\"\r\n    Range(\"D13\").Select\r\nEnd Sub\r\n"
                            ],
                            "object_name": "macro"
                        }
                    ],
                    "sanitized_file_info": {
                        "file_size": 75716,
                        "sha256": "2a8d720bd94508f9acc52d9abb4b343ac84242f9de12cf22fd12c68243ee36ba"
                    }
                },
                "properties": {
                    "description": {
                        "description": "Action was successful or not.",
                        "type": "string",
                        "example": "Sanitized successfully"
                    },
                    "details": {
                        "description": "List of all sanitized objects",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "action",
                                "object_name"
                            ],
                            "properties": {
                                "action": {
                                    "description": "The type of action that was performed",
                                    "enum": [
                                        "sanitized",
                                        "removed"
                                    ],
                                    "type": "string",
                                    "example": "sanitized"
                                },
                                "count": {
                                    "description": "The number of objects that were sanitized/removed.",
                                    "type": "integer",
                                    "example": 1
                                },
                                "details": {
                                    "description": "List of all sanitized objects of a sanitized embedded file",
                                    "type": "object",
                                    "properties": {
                                        "action": {
                                            "description": "The type of action that was performed",
                                            "enum": [
                                                "sanitized",
                                                "removed"
                                            ],
                                            "type": "string"
                                        },
                                        "count": {
                                            "description": "The number of objects that were sanitized/removed.",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "object_details": {
                                            "description": "Additional information about the sanitized object",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "object_name": {
                                            "description": "The object type that was sanitized/removed.",
                                            "type": "string",
                                            "example": "macro"
                                        }
                                    }
                                },
                                "description": {
                                    "description": "Action was successful or not.",
                                    "type": "string",
                                    "example": "Sanitized successfully"
                                },
                                "file_name": {
                                    "description": "If an embedded file was sanitized.",
                                    "type": "string",
                                    "example": "Microsoft_Excel_97-2003_Worksheet.xls"
                                },
                                "object_details": {
                                    "description": "Additional information about the sanitized object",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "http://metadefender.com/",
                                        "http://google.com/"
                                    ]
                                },
                                "object_name": {
                                    "description": "The object type that was sanitized/removed.",
                                    "type": "string",
                                    "example": "XML content"
                                }
                            }
                        }
                    },
                    "failure_category": {
                        "description": "Deep CDR errors are classified into different categories.\n\nFor more details, please find [Troubleshooting sanitization failures](https://docs.opswat.com/mdcore/deep-cdr/troubleshooting-sanitization-failures)\n",
                        "type": "string"
                    },
                    "sanitized_file_info": {
                        "description": "Information of sanitized file.\nOnly applicable to individual file sanitization, or original archive document sanitization level.\n",
                        "type": "object",
                        "properties": {
                            "file_size": {
                                "type": "integer",
                                "description": "Size of sanitized file in bytes."
                            },
                            "sha256": {
                                "type": "string",
                                "description": "SHA256 hash of sanitized file."
                            }
                        }
                    }
                }
            },
            "ProcessingResultsStringEnum": {
                "description": "Processing result and its index\n* `No Threat Detected`: 0\n* `Infected`: 1\n* `Suspicious`: 2\n* `Failed`: 3\n* `Whitelisted`: 7\n* `Blacklisted`: 8\n* `Exceeded Archive Depth`: 9\n* `Not Scanned`: 10\n* `Encrypted Archive`: 12\n* `Exceeded Archive Size`: 13\n* `Exceeded Archive File Number`: 14\n* `Password Protected Document`: 15\n* `Exceeded Archive Timeout`: 16\n* `Mismatch`: 17\n* `Potentially Vulnerable File`: 18\n* `Cancelled`: 19\n* `Sensitive Data Found`: 20\n* `Yara Rule Matched`: 21\n* `Potentially Unwanted`: 22\n* `Unsupported File Type`: 23\n* `In Progress`: 255\n",
                "type": "string",
                "enum": [
                    "No Threat Detected",
                    "Infected",
                    "Suspicious",
                    "Failed",
                    "Whitelisted",
                    "Blacklisted",
                    "Exceeded Archive Depth",
                    "Not Scanned",
                    "Encrypted Archive",
                    "Exceeded Archive Size",
                    "Exceeded Archive File Number",
                    "Password Protected Document",
                    "Exceeded Archive Timeout",
                    "Mismatch",
                    "Potentially Vulnerable File",
                    "Cancelled",
                    "Sensitive Data Found",
                    "Yara Rule Matched",
                    "Potentially Unwanted",
                    "Unsupported File Type",
                    "In Progress"
                ],
                "example": "No Threat Detected"
            },
            "ProcessingResultsIndexEnum": {
                "description": "Scan result as index in the Processing Results table above",
                "type": "integer",
                "enum": [
                    0,
                    1,
                    2,
                    3,
                    7,
                    8,
                    9,
                    10,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    255
                ],
                "example": 0
            },
            "AVEngineScanReport": {
                "description": "Scan report per each engine.",
                "type": "object",
                "properties": {
                    "def_time": {
                        "description": "The database definition time for this engine",
                        "type": "string",
                        "example": "2020-03-11T11:08:00.000Z"
                    },
                    "eng_id": {
                        "description": "The  unique identification string for the engine",
                        "type": "string",
                        "example": "clamav_1_windows"
                    },
                    "location": {
                        "description": "Where this engine is deployed (local/remote).",
                        "type": "string",
                        "example": "local"
                    },
                    "scan_result_i": {
                        "description": "Scan result as index in the Processing Results table",
                        "type": "integer",
                        "example": 0
                    },
                    "scan_time": {
                        "description": "The time elapsed during scan with this engine (in milliseconds).",
                        "type": "integer",
                        "example": 336
                    },
                    "threat_found": {
                        "description": "The threat name, IF scan result is Infected or Suspicious. Otherwise empty string or error message from the engine.",
                        "type": "string",
                        "example": ""
                    },
                    "wait_time": {
                        "description": "Time elapsed between sending file to node and receiving the result from the engine (in milliseconds).",
                        "type": "integer",
                        "example": 3
                    }
                }
            },
            "MetascanReport": {
                "description": "Result of the scanning process.",
                "type": "object",
                "properties": {
                    "data_id": {
                        "description": "Data ID of the requested file",
                        "type": "string",
                        "example": "8101abae27be4d63859c55d9e0ed0135"
                    },
                    "progress_percentage": {
                        "description": "Track analysis progress until reaches 100.",
                        "type": "integer",
                        "example": 100
                    },
                    "scan_all_result_a": {
                        "description": "The overall scan result as string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ProcessingResultsStringEnum"
                            }
                        ],
                        "example": "Sensitive Data Found"
                    },
                    "scan_all_result_i": {
                        "description": "The overall scan result as index in the Processing Results table.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ProcessingResultsIndexEnum"
                            }
                        ],
                        "example": 20
                    },
                    "start_time": {
                        "description": "Timestamp when the scanning process starts.",
                        "type": "string",
                        "example": "2020-03-12T08:37:05.427Z"
                    },
                    "total_avs": {
                        "description": "Total number of scanning engines used as part of this analysis.",
                        "type": "integer",
                        "example": 1
                    },
                    "total_time": {
                        "description": "Total time elapsed during scan (in milliseconds).",
                        "type": "integer",
                        "example": 4804
                    },
                    "scan_details": {
                        "description": "Scan results for each antivirus engine. The key is the name of the antivirus engine and the value is the result of the antivirus engine",
                        "type": "object",
                        "properties": {
                            "ClamAV": {
                                "$ref": "#/components/schemas/AVEngineScanReport"
                            }
                        }
                    }
                }
            },
            "VulnerabilityResponse": {
                "description": "Contains all vulnerability information of the analysis result",
                "type": "object",
                "properties": {
                    "result": {
                        "description": "The result information provided by the OESIS Framework",
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "The result code for vulnerability check, 0 means a successful check",
                                "type": "integer",
                                "example": 0
                            },
                            "hash": {
                                "description": "The file's SHA1 hash value",
                                "type": "string",
                                "example": "B428501D1FAD1BA14AA2FC3F9B5F051EC8721EA2"
                            },
                            "method": {
                                "description": "The method used by OESIS Framework, it should be 50700 every time.",
                                "type": "integer",
                                "enum": [
                                    50700
                                ],
                                "example": 50700
                            },
                            "timestamp": {
                                "description": "Timestamp of the request issued",
                                "type": "string",
                                "example": "1493020752"
                            },
                            "timing": {
                                "description": "The vulnerability check's duration in milliseconds",
                                "type": "integer",
                                "example": 48
                            },
                            "detected_product": {
                                "description": "Detected products object is present if input hash has been found to correspond to verified product",
                                "type": "object",
                                "properties": {
                                    "has_kb": {
                                        "description": "Indicates whether any KBs or MSBs exist for this hash",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "has_vulnerability": {
                                        "description": "Indicates whether any vulnerabilities have been associated with the particular product",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "is_current": {
                                        "description": "True if this product's patch level is current, defaults to true",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "product": {
                                        "description": "Product data object",
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "description": "The OPSWAT product id",
                                                "type": "integer",
                                                "example": 104
                                            },
                                            "name": {
                                                "description": "The product name",
                                                "type": "string",
                                                "example": "Adobe Flash Player"
                                            }
                                        }
                                    },
                                    "remediation_link": {
                                        "description": "A link where product updates or patches can be obtained",
                                        "type": "string",
                                        "example": "http://get.adobe.com/flashplayer/"
                                    },
                                    "severity": {
                                        "description": "String description of Severity level: \n  * `LOW`\n  * `MODERATE`\n  * `IMPORTANT`\n  * `CRITICAL`\n  * `NOT_AVAILABLE`\n  * `UNKNOWN`\n",
                                        "type": "string",
                                        "enum": [
                                            "LOW",
                                            "MODERATE",
                                            "IMPORTANT",
                                            "CRITICAL",
                                            "NOT_AVAILABLE",
                                            "UNKNOWN"
                                        ],
                                        "example": "CRITICAL"
                                    },
                                    "sig_name": {
                                        "description": "Product signature descriptor",
                                        "type": "string",
                                        "example": "Adobe Flash Player"
                                    },
                                    "signature": {
                                        "description": "OPSWAT signature id",
                                        "type": "integer",
                                        "example": 107
                                    },
                                    "vendor": {
                                        "description": "Vendor data object",
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "description": "The OPSWAT vendor id",
                                                "type": "integer",
                                                "example": 91
                                            },
                                            "name": {
                                                "description": "The vendor name",
                                                "type": "string",
                                                "example": "Adobe Systems Inc."
                                            }
                                        }
                                    },
                                    "version": {
                                        "description": "The installed product version",
                                        "type": "string",
                                        "example": "20.0.0.235"
                                    },
                                    "version_data": {
                                        "description": "Object containing detailed patch information",
                                        "type": "object",
                                        "properties": {
                                            "count_behind": {
                                                "description": "The number of patches behind of the installed product",
                                                "type": "integer",
                                                "example": 65
                                            },
                                            "feed_id": {
                                                "description": "The remote feed ID used to determine patch level",
                                                "type": "integer",
                                                "example": 200005
                                            },
                                            "version": {
                                                "description": "The current version of the product in the remote feed",
                                                "type": "string",
                                                "example": "25.0.0.149"
                                            }
                                        }
                                    },
                                    "vulnerabilites": {
                                        "description": "A list of specific vulnerabilities",
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "description": {
                                                    "description": "A text description of the specific vulnerability",
                                                    "type": "string",
                                                    "example": "Adobe Flash Player before 18.0.0.324 and 19.x and 20.x before 20.0.0.267 on Windows and OS X and before 11.2.202.559 on Linux, Adobe AIR before 20.0.0.233, Adobe AIR SDK before 20.0.0.233, and Adobe AIR SDK & Compiler before 20.0.0.233 allow attackers to execute arbitrary code or cause a denial of service (memory corruption) via unspecified vectors, a different vulnerability than CVE-2015-8460, CVE-2015-8636, and CVE-2015-8645.\n"
                                                },
                                                "details": {
                                                    "description": "A set of optional vulnerability details",
                                                    "type": "object",
                                                    "properties": {
                                                        "cpe": {
                                                            "description": "A CPE product reference",
                                                            "type": "string",
                                                            "example": "cpe:/a:adobe:flash player"
                                                        },
                                                        "cve": {
                                                            "description": "A CVE identification string",
                                                            "type": "string",
                                                            "example": "CVE-2015-8459"
                                                        },
                                                        "cvss": {
                                                            "description": "A set of cvss severity information",
                                                            "type": "object",
                                                            "properties": {
                                                                "access-complexity": {
                                                                    "description": "A CVSS access-complexity descriptor",
                                                                    "type": "string",
                                                                    "example": "LOW"
                                                                },
                                                                "access-vector": {
                                                                    "description": "A CVSS access-vector descriptor",
                                                                    "type": "string",
                                                                    "example": "NETWORK"
                                                                },
                                                                "authentication": {
                                                                    "description": "A CVSS authentication descriptor",
                                                                    "type": "string",
                                                                    "example": "NONE"
                                                                },
                                                                "availability-impact": {
                                                                    "description": "A CVSS availability impact descriptor",
                                                                    "type": "string",
                                                                    "example": ""
                                                                },
                                                                "confidentiality-impact": {
                                                                    "description": "A CVSS confidentiality impact descriptor",
                                                                    "type": "string",
                                                                    "example": "COMPLETE"
                                                                },
                                                                "generated-on-epoch": {
                                                                    "description": "An epoch timestamp indicating CVSS generation time",
                                                                    "type": "string",
                                                                    "example": "1451411824"
                                                                },
                                                                "integrity-impact": {
                                                                    "description": "A CVSS integrity impact descriptor",
                                                                    "type": "string",
                                                                    "example": "COMPLETE"
                                                                },
                                                                "score": {
                                                                    "description": "A CVSS 10-point severity score",
                                                                    "type": "string",
                                                                    "example": "10.0"
                                                                },
                                                                "source": {
                                                                    "description": "A CVSS source descriptor",
                                                                    "type": "string",
                                                                    "example": "http://nvd.nist.gov"
                                                                }
                                                            }
                                                        },
                                                        "cwe": {
                                                            "description": "A CWE group identification string",
                                                            "type": "string",
                                                            "example": "CWE-119"
                                                        },
                                                        "last_modified_epoch": {
                                                            "description": "An epoch timestamp indicating source last update time",
                                                            "type": "string",
                                                            "example": "1487300348"
                                                        },
                                                        "published-epoch": {
                                                            "description": "An epoch timestamp indicating source publishing time",
                                                            "type": "string",
                                                            "example": "1451347140"
                                                        },
                                                        "references": {
                                                            "description": "An array of external reference links",
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string",
                                                                "example": [
                                                                    "http://lists.opensuse.org/opensuse-security-announce/2015-12/msg00045.html",
                                                                    "https://docs.ssh-mitm.at/puttydos.html",
                                                                    "https://www.chiark.greenend.org.uk/~sgtatham/putty/changes.html"
                                                                ]
                                                            }
                                                        }
                                                    }
                                                },
                                                "severity": {
                                                    "description": "String description of Severity level:\n  * `LOW`\n  * `MODERATE`\n  * `IMPORTANT`\n  * `CRITICAL`\n  * `NOT_AVAILABLE`\n  * `UNKNOWN`\n",
                                                    "type": "string",
                                                    "enum": [
                                                        "LOW",
                                                        "MODERATE",
                                                        "IMPORTANT",
                                                        "CRITICAL",
                                                        "NOT_AVAILABLE",
                                                        "UNKNOWN"
                                                    ],
                                                    "example": "CRITICAL"
                                                },
                                                "severity_index": {
                                                    "description": "A 5 point scale numerical description of Severity level with 5 being greatest and 0 being unknown",
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "static_id": {
                                                    "description": "An OPSWAT identifier for the vulnerability",
                                                    "type": "integer",
                                                    "example": 20158459
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "verdict": {
                        "description": "The vulnerability check's duration in milliseconds\n* `0` - No Vulnerability Found\n* `1` - Vulnerability Found\n* `3` - Failed\n* `16` - Processing Timed Out\n",
                        "type": "integer",
                        "example": 1
                    }
                }
            },
            "ScanResultEnum": {
                "type": "integer",
                "enum": [
                    0,
                    1,
                    2,
                    3,
                    4
                ],
                "description": "The overall result for the analyzed file. Value will be one of the following:\n  | index         | status                       |\n  |---------------|------------------------------|\n  | 0             | Clean                        |\n  | 1             | Found matched data           |\n  | 2             | Suspicious                   |\n  | 3             | Failed                       |\n  | 4             | Not scanned                  |\n    \n"
            },
            "YaraReport": {
                "description": "Information on data that matched yara rules",
                "type": "object",
                "properties": {
                    "hits": {
                        "description": "detailed results that contains the name of the matched rules and a description for each.",
                        "type": "object"
                    },
                    "verdict": {
                        "$ref": "#/components/schemas/ScanResultEnum"
                    }
                }
            },
            "AnalysisResult": {
                "type": "object",
                "properties": {
                    "data_id": {
                        "description": "data identifier of the requested file",
                        "type": "string",
                        "example": "8101abae27be4d63859c55d9e0ed0135"
                    },
                    "dlp_info": {
                        "$ref": "#/components/schemas/DLPResponse"
                    },
                    "download_info": {
                        "$ref": "#/components/schemas/DownloadInfo"
                    },
                    "extraction_info": {
                        "$ref": "#/components/schemas/ExtractionInfo"
                    },
                    "file_info": {
                        "$ref": "#/components/schemas/FileInformation"
                    },
                    "filetype_info": {
                        "$ref": "#/components/schemas/FileTypeResponse"
                    },
                    "opswatfilescan_info": {
                        "$ref": "#/components/schemas/OPSWATFilescanResponse"
                    },
                    "process_info": {
                        "description": "Processing information",
                        "type": "object",
                        "properties": {
                            "blocked_reason": {
                                "description": "Provides the reason why the file is blocked (if so).",
                                "type": "string",
                                "example": "Sensitive Data Found"
                            },
                            "blocked_reasons": {
                                "description": "Provides the reason why the file is blocked in an array (if so).",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "example": [
                                    "Sensitive Data Found"
                                ]
                            },
                            "file_type_skipped_scan": {
                                "description": "Indicates if the input file's detected type was configured to skip scanning.",
                                "type": "boolean",
                                "example": false
                            },
                            "hash_time": {
                                "description": "Total time elapsed for computing hashes (in milliseconds).",
                                "type": "integer",
                                "example": 145
                            },
                            "outdated_data": {
                                "description": "array of flags - if occur - describing outdated data in the result, these can be\n  * enginedefinitions: at least one of the AV engines the item was scanned with has a newer definition database\n  * configuration: the process' rule - or any item used by the rule - was modified since the item was processed\n  * sanitization: if item was sanitized this flag notifies that the sanitization information regarding this result is outdated, meaning the sanitized item is no longer available              \n",
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "enginedefinitions",
                                        "configuration",
                                        "sanitization"
                                    ]
                                },
                                "example": [
                                    "enginedefinitions",
                                    "configuration",
                                    "sanitization"
                                ]
                            },
                            "processing_time": {
                                "description": "Total time elapsed during processing file on the node (in milliseconds).",
                                "type": "integer",
                                "example": 4804
                            },
                            "processing_time_details": {
                                "description": "Starting with MetaDefender Core 4.19.1, processing time on each major workflow processing step is calculated.",
                                "type": "object",
                                "properties": {
                                    "av_scan_time": {
                                        "description": "AV engines' processing time.",
                                        "type": "integer",
                                        "example": 2000
                                    },
                                    "cdr_time": {
                                        "description": "Deep CDR engine's sanitization time.",
                                        "type": "integer",
                                        "example": 800
                                    },
                                    "dlp_time": {
                                        "description": "Proactive DLP engine's processing time.",
                                        "type": "integer",
                                        "example": 500
                                    },
                                    "extraction_time": {
                                        "description": "Archive extraction engine's processing time.",
                                        "type": "integer",
                                        "example": 5000
                                    },
                                    "filetype_time": {
                                        "description": "FileType engine's processing time.",
                                        "type": "integer",
                                        "example": 4
                                    },
                                    "opswatfilescan_time": {
                                        "description": "OPSWAT Filescan engine's processing time.",
                                        "type": "integer",
                                        "example": 10000
                                    },
                                    "others_time": {
                                        "description": "Total time elapsed for following processing tasks in the product (in milliseconds):\n* Decryption time (if receiving an encrypted file)\n* External scanner (if configured)\n* Post action (if configured)\n* Other internal processing time among components in the product\n",
                                        "type": "integer",
                                        "example": 1000
                                    },
                                    "parse_dgsg_time": {
                                        "description": "Digital signature analyzing time.",
                                        "type": "integer",
                                        "example": 3
                                    },
                                    "vul_time": {
                                        "description": "Vulnerability engine's lookup time.",
                                        "type": "integer",
                                        "example": 300
                                    },
                                    "yara_time": {
                                        "description": "Yara engine's processing time.",
                                        "type": "integer",
                                        "example": 200
                                    }
                                }
                            },
                            "profile": {
                                "description": "The used rule name.",
                                "type": "string",
                                "example": "File process"
                            },
                            "progress_percentage": {
                                "description": "Percentage of processing completed (from 1-100).",
                                "type": "integer",
                                "example": 100
                            },
                            "queue_time": {
                                "description": "Total time elapsed for file processing task was waiting in MetaDefender Core’s queue until being picked up (queue_time = start_time - upload_timestamp) (in milliseconds).",
                                "type": "integer",
                                "example": 321
                            },
                            "result": {
                                "description": "The final result of processing the file (Allowed / Blocked / Processing).",
                                "type": "string",
                                "example": "Blocked"
                            },
                            "user_agent": {
                                "description": "Identifier for the REST Client that calls the API.",
                                "type": "string",
                                "example": "webscan"
                            },
                            "username": {
                                "description": "User identifier who submitted scan request earlier.",
                                "type": "string",
                                "example": "LOCAL/admin"
                            },
                            "verdicts": {
                                "description": "Aggregated list of potential issues.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "example": [
                                    "Sensitive Data Found"
                                ]
                            },
                            "post_processing": {
                                "description": "Contains information about result of sanitization process and any action done after finalizing the process using Post Actions.",
                                "type": "object",
                                "properties": {
                                    "actions_failed": {
                                        "description": "Empty string if no action failed or list of failed actions, separated by \"|\".",
                                        "type": "string",
                                        "example": "Sanitization Failed | PAscript failed"
                                    },
                                    "actions_ran": {
                                        "description": "List of successful actions, separated by \"|\". Empty string if otherwise.",
                                        "type": "string",
                                        "example": "Sanitized | PAscript"
                                    },
                                    "converted_destination": {
                                        "description": "Contains the name of the sanitized file.",
                                        "type": "string",
                                        "example": "OPSWAT_Proactive_DLP_CCN_sanitized.pdf"
                                    },
                                    "converted_to": {
                                        "description": "Contains target type name of sanitization.",
                                        "type": "string",
                                        "example": ""
                                    },
                                    "copy_move_destination": {
                                        "description": "Contains target type name of sanitization.",
                                        "type": "string",
                                        "example": ""
                                    },
                                    "sanitization_details": {
                                        "description": "Contains target type name of sanitization.",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/DeepCDRDetails"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "scan_results": {
                        "$ref": "#/components/schemas/MetascanReport"
                    },
                    "vulnerability_info": {
                        "$ref": "#/components/schemas/VulnerabilityResponse"
                    },
                    "yara": {
                        "$ref": "#/components/schemas/YaraReport"
                    }
                }
            },
            "InvalidAPIKeyGiven": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Invalid apikey given"
                    }
                },
                "example": {
                    "err": "Invalid apikey given"
                }
            },
            "InprogressBatchClosed": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Batch closed during file upload."
                    }
                },
                "example": {
                    "err": "Batch closed during file upload."
                }
            },
            "BatchNotFound": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Can not scan in given batch."
                    }
                },
                "example": {
                    "err": "Can not scan in given batch."
                }
            },
            "BatchInstanceMismatched": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Cannot scan batch in another instance."
                    }
                },
                "example": {
                    "err": "Cannot scan batch in another instance."
                }
            },
            "BodyAndLocalFilePathGiven": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Both body data and local file path were given."
                    }
                },
                "example": {
                    "err": "Both body data and local file path were given."
                }
            },
            "RedirectLinkNotSupported": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Redirect link not supported."
                    }
                },
                "example": {
                    "err": "Redirect link not supported."
                }
            },
            "InvalidDownloadLink": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Invalid download url."
                    }
                },
                "example": {
                    "err": "Invalid download url."
                }
            },
            "InvalidProtocolDownloadLink": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Download url must start with http:// or https://."
                    }
                },
                "example": {
                    "err": "Download url must start with http:// or https://."
                }
            },
            "CallbackURLNotSupported": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "callbackurl is not supported"
                    }
                },
                "example": {
                    "err": "callbackurl is not supported"
                }
            },
            "LicenseExpired": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "License is expired"
                    }
                },
                "example": {
                    "err": "License is expired"
                }
            },
            "NoAvailableRule": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "No available rule is present for scanning."
                    }
                },
                "example": {
                    "err": "No available rule is present for scanning."
                }
            },
            "InternalError": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Failed to request scan. Try again later."
                    }
                },
                "example": {
                    "err": "Failed to request scan. Try again later."
                }
            },
            "LocalFileNotFound": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "File not found, invalid path or access."
                    }
                },
                "example": {
                    "err": "File not found, invalid path or access."
                }
            },
            "FileSizeExceeded": {
                "type": "object",
                "properties": {
                    "err": {
                        "type": "string",
                        "description": "Failed to request scan. File size exceeded the maximum size permitted by your configuration."
                    }
                },
                "example": {
                    "err": "Failed to request scan. File size exceeded the maximum size permitted by your configuration."
                }
            },
            "ExtractedFiles2": {
                "description": "Information about extracted files.",
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "data_id": {
                            "description": "data identifier of the requested file",
                            "type": "string",
                            "example": "a80f3b43192843f28998abcfe073c3be"
                        },
                        "dlp_info": {
                            "$ref": "#/components/schemas/DLPResponse"
                        },
                        "extraction_info": {
                            "$ref": "#/components/schemas/ExtractionInfo"
                        },
                        "file_info": {
                            "$ref": "#/components/schemas/FileInformation"
                        },
                        "filetype_info": {
                            "$ref": "#/components/schemas/FileTypeResponse"
                        },
                        "process_info": {
                            "description": "Processing information",
                            "type": "object",
                            "properties": {
                                "blocked_reason": {
                                    "description": "Provides the reason why the file is blocked (if so).",
                                    "type": "string",
                                    "example": "Sensitive Data Found"
                                },
                                "file_type_skipped_scan": {
                                    "description": "Indicates if the input file's detected type was configured to skip scanning.",
                                    "type": "boolean",
                                    "example": false
                                },
                                "outdated_data": {
                                    "description": "array of flags - if occur - describing outdated data in the result, these can be\n  * enginedefinitions: at least one of the AV engines the item was scanned with has a newer definition database\n  * configuration: the process' rule - or any item used by the rule - was modified since the item was processed\n  * sanitization: if item was sanitized this flag notifies that the sanitization information regarding this result is outdated, meaning the sanitized item is no longer available\n",
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "enginedefinitions",
                                            "configuration",
                                            "sanitization"
                                        ]
                                    },
                                    "example": [
                                        "enginedefinitions",
                                        "configuration",
                                        "sanitization"
                                    ]
                                },
                                "processing_time": {
                                    "description": "Total time elapsed during processing file on the node (in milliseconds).",
                                    "type": "integer",
                                    "example": 4804
                                },
                                "processing_time_details": {
                                    "description": "Starting with MetaDefender Core 4.19.1, processing time on each major workflow processing step is calculated.",
                                    "type": "object",
                                    "properties": {
                                        "av_scan_time": {
                                            "description": "AV engines' processing time.",
                                            "type": "integer",
                                            "example": 2004
                                        },
                                        "cdr_time": {
                                            "description": "Deep CDR engine's sanitization time.",
                                            "type": "integer",
                                            "example": 800
                                        },
                                        "dlp_time": {
                                            "description": "Proactive DLP engine's processing time.",
                                            "type": "integer",
                                            "example": 500
                                        },
                                        "extraction_time": {
                                            "description": "Archive extraction engine's processing time.",
                                            "type": "integer",
                                            "example": 5000
                                        },
                                        "filetype_time": {
                                            "description": "FileType engine's processing time.",
                                            "type": "integer",
                                            "example": 4
                                        },
                                        "opswatfilescan_time": {
                                            "description": "OPSWAT Filescan engine's processing time.",
                                            "type": "integer",
                                            "example": 10000
                                        },
                                        "others_time": {
                                            "description": "Total time elapsed for following processing tasks in the product (in milliseconds):\n* File processing’s hash calculation time\n* External scanner (if configured)\n* Post action (if configured)\n* Other internal procssing time among components in the product\n",
                                            "type": "integer",
                                            "example": 1000
                                        },
                                        "vul_time": {
                                            "description": "Vulnerability engine's lookup time.",
                                            "type": "integer",
                                            "example": 300
                                        },
                                        "yara_time": {
                                            "description": "Yara engine's processing time.",
                                            "type": "integer",
                                            "example": 200
                                        }
                                    }
                                },
                                "profile": {
                                    "description": "The used rule name.",
                                    "type": "string",
                                    "example": "File process"
                                },
                                "progress_percentage": {
                                    "description": "Percentage of processing completed (from 1-100).",
                                    "type": "integer",
                                    "example": 100
                                },
                                "queue_time": {
                                    "description": "Total time elapsed for file processing task was waiting in MetaDefender Core’s queue until being picked up (queue_time = start_time - upload_timestamp) (in milliseconds).",
                                    "type": "integer",
                                    "example": 321
                                },
                                "result": {
                                    "description": "The final result of processing the file (Allowed / Blocked / Processing).",
                                    "type": "string",
                                    "example": "Blocked"
                                },
                                "user_agent": {
                                    "description": "Identifier for the REST Client that calls the API.",
                                    "type": "string",
                                    "example": "webscan"
                                },
                                "username": {
                                    "description": "User identifier who submitted scan request earlier.",
                                    "type": "string",
                                    "example": "LOCAL/admin"
                                },
                                "verdicts": {
                                    "description": "Aggregated list of potential issues.",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "Sensitive Data Found"
                                    ]
                                },
                                "post_processing": {
                                    "description": "Contains information about result of sanitization process and any action done after finalizing the process using Post Actions.",
                                    "type": "object",
                                    "properties": {
                                        "actions_failed": {
                                            "description": "Empty string if no action failed or list of failed actions, separated by \"|\".",
                                            "type": "string",
                                            "example": "Sanitization Failed | PAscript failed"
                                        },
                                        "actions_ran": {
                                            "description": "List of successful actions, separated by \"|\". Empty string if otherwise.",
                                            "type": "string",
                                            "example": "Sanitized | PAscript"
                                        },
                                        "converted_destination": {
                                            "description": "Contains the name of the sanitized file.",
                                            "type": "string",
                                            "example": "OPSWAT_Proactive_DLP_CCN_sanitized.pdf"
                                        },
                                        "converted_to": {
                                            "description": "Contains target type name of sanitization.",
                                            "type": "string",
                                            "example": ""
                                        },
                                        "copy_move_destination": {
                                            "description": "Contains target type name of sanitization.",
                                            "type": "string",
                                            "example": ""
                                        },
                                        "sanitization_details": {
                                            "description": "Contains target type name of sanitization.",
                                            "allOf": [
                                                {
                                                    "$ref": "#/components/schemas/DeepCDRDetails"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "scan_results": {
                            "$ref": "#/components/schemas/MetascanReport"
                        },
                        "vulnerability_info": {
                            "$ref": "#/components/schemas/VulnerabilityResponse"
                        },
                        "yara": {
                            "$ref": "#/components/schemas/YaraReport"
                        }
                    }
                }
            },
            "ExtractedFiles": {
                "description": "Information about extracted files.",
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "data_id": {
                            "description": "data identifier of the requested file",
                            "type": "string",
                            "example": "3b503f416a1d40ffacf79a8141baa1e7"
                        },
                        "dlp_info": {
                            "$ref": "#/components/schemas/DLPResponse"
                        },
                        "extracted_files": {
                            "$ref": "#/components/schemas/ExtractedFiles2"
                        },
                        "file_info": {
                            "$ref": "#/components/schemas/FileInformation"
                        },
                        "filetype_info": {
                            "$ref": "#/components/schemas/FileTypeResponse"
                        },
                        "process_info": {
                            "description": "Processing information",
                            "type": "object",
                            "properties": {
                                "blocked_reason": {
                                    "description": "Provides the reason why the file is blocked (if so).",
                                    "type": "string",
                                    "example": "Sensitive Data Found"
                                },
                                "file_type_skipped_scan": {
                                    "description": "Indicates if the input file's detected type was configured to skip scanning.",
                                    "type": "boolean",
                                    "example": false
                                },
                                "outdated_data": {
                                    "description": "array of flags - if occur - describing outdated data in the result, these can be\n  * enginedefinitions: at least one of the AV engines the item was scanned with has a newer definition database\n  * configuration: the process' rule - or any item used by the rule - was modified since the item was processed\n  * sanitization: if item was sanitized this flag notifies that the sanitization information regarding this result is outdated, meaning the sanitized item is no longer available              \n",
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "enginedefinitions",
                                            "configuration",
                                            "sanitization"
                                        ]
                                    },
                                    "example": [
                                        "enginedefinitions",
                                        "configuration",
                                        "sanitization"
                                    ]
                                },
                                "processing_time": {
                                    "description": "Total time elapsed during processing file on the node (in milliseconds).",
                                    "type": "integer",
                                    "example": 4804
                                },
                                "processing_time_details": {
                                    "description": "Starting with MetaDefender Core 4.19.1, processing time on each major workflow processing step is calculated.",
                                    "type": "object",
                                    "properties": {
                                        "av_scan_time": {
                                            "description": "AV engines' processing time.",
                                            "type": "integer",
                                            "example": 2004
                                        },
                                        "cdr_time": {
                                            "description": "Deep CDR engine's sanitization time.",
                                            "type": "integer",
                                            "example": 800
                                        },
                                        "dlp_time": {
                                            "description": "Proactive DLP engine's processing time.",
                                            "type": "integer",
                                            "example": 500
                                        },
                                        "extraction_time": {
                                            "description": "Archive extraction engine's processing time.",
                                            "type": "integer",
                                            "example": 5000
                                        },
                                        "filetype_time": {
                                            "description": "FileType engine's processing time.",
                                            "type": "integer",
                                            "example": 4
                                        },
                                        "opswatfilescan_time": {
                                            "description": "OPSWAT Filescan engine's processing time.",
                                            "type": "integer",
                                            "example": 10000
                                        },
                                        "others_time": {
                                            "description": "Total time elapsed for following processing tasks in the product (in milliseconds):\n* File processing’s hash calculation time\n* External scanner (if configured)\n* Post action (if configured)\n* Other internal procssing time among components in the product\n",
                                            "type": "integer",
                                            "example": 1000
                                        },
                                        "vul_time": {
                                            "description": "Vulnerability engine's lookup time.",
                                            "type": "integer",
                                            "example": 300
                                        },
                                        "wait_child_files_time": {
                                            "description": "The waiting time for completely processing all nested files of an archive file.",
                                            "type": "integer",
                                            "example": 13000
                                        },
                                        "yara_time": {
                                            "description": "Yara engine's processing time.",
                                            "type": "integer",
                                            "example": 200
                                        }
                                    }
                                },
                                "profile": {
                                    "description": "The used rule name.",
                                    "type": "string",
                                    "example": "File process"
                                },
                                "progress_percentage": {
                                    "description": "Percentage of processing completed (from 1-100).",
                                    "type": "integer",
                                    "example": 100
                                },
                                "queue_time": {
                                    "description": "Total time elapsed for file processing task was waiting in MetaDefender Core’s queue until being picked up (queue_time = start_time - upload_timestamp) (in milliseconds).",
                                    "type": "integer",
                                    "example": 321
                                },
                                "result": {
                                    "description": "The final result of processing the file (Allowed / Blocked / Processing).",
                                    "type": "string",
                                    "example": "Blocked"
                                },
                                "user_agent": {
                                    "description": "Identifier for the REST Client that calls the API.",
                                    "type": "string",
                                    "example": "webscan"
                                },
                                "username": {
                                    "description": "User identifier who submitted scan request earlier.",
                                    "type": "string",
                                    "example": "LOCAL/admin"
                                },
                                "verdicts": {
                                    "description": "Aggregated list of potential issues.",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "Sensitive Data Found"
                                    ]
                                },
                                "post_processing": {
                                    "description": "Contains information about result of sanitization process and any action done after finalizing the process using Post Actions.",
                                    "type": "object",
                                    "properties": {
                                        "actions_failed": {
                                            "description": "Empty string if no action failed or list of failed actions, separated by \"|\".",
                                            "type": "string",
                                            "example": "Sanitization Failed | PAscript failed"
                                        },
                                        "actions_ran": {
                                            "description": "List of successful actions, separated by \"|\". Empty string if otherwise.",
                                            "type": "string",
                                            "example": "Sanitized | PAscript"
                                        },
                                        "converted_destination": {
                                            "description": "Contains the name of the sanitized file.",
                                            "type": "string",
                                            "example": "OPSWAT_Proactive_DLP_CCN_sanitized.pdf"
                                        },
                                        "converted_to": {
                                            "description": "Contains target type name of sanitization.",
                                            "type": "string",
                                            "example": ""
                                        },
                                        "copy_move_destination": {
                                            "description": "Contains target type name of sanitization.",
                                            "type": "string",
                                            "example": ""
                                        },
                                        "sanitization_details": {
                                            "description": "Contains target type name of sanitization.",
                                            "allOf": [
                                                {
                                                    "$ref": "#/components/schemas/DeepCDRDetails"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "scan_results": {
                            "$ref": "#/components/schemas/MetascanReport"
                        },
                        "vulnerability_info": {
                            "$ref": "#/components/schemas/VulnerabilityResponse"
                        },
                        "yara": {
                            "$ref": "#/components/schemas/YaraReport"
                        }
                    }
                }
            },
            "AnalysisResultAllExtractedFiles": {
                "type": "object",
                "properties": {
                    "data_id": {
                        "description": "data identifier of the requested file",
                        "type": "string",
                        "example": "8101abae27be4d63859c55d9e0ed0135"
                    },
                    "dlp_info": {
                        "$ref": "#/components/schemas/DLPResponse"
                    },
                    "download_info": {
                        "$ref": "#/components/schemas/DownloadInfo"
                    },
                    "extracted_files": {
                        "$ref": "#/components/schemas/ExtractedFiles"
                    },
                    "file_info": {
                        "$ref": "#/components/schemas/FileInformation"
                    },
                    "filetype_info": {
                        "$ref": "#/components/schemas/FileTypeResponse"
                    },
                    "opswatfilescan_info": {
                        "$ref": "#/components/schemas/OPSWATFilescanResponse"
                    },
                    "process_info": {
                        "description": "Processing information",
                        "type": "object",
                        "properties": {
                            "blocked_reason": {
                                "description": "Provides the reason why the file is blocked (if so).",
                                "type": "string",
                                "example": "Sensitive Data Found"
                            },
                            "file_type_skipped_scan": {
                                "description": "Indicates if the input file's detected type was configured to skip scanning.",
                                "type": "boolean",
                                "example": false
                            },
                            "outdated_data": {
                                "description": "array of flags - if occur - describing outdated data in the result, these can be\n  * enginedefinitions: at least one of the AV engines the item was scanned with has a newer definition database\n  * configuration: the process' rule - or any item used by the rule - was modified since the item was processed\n  * sanitization: if item was sanitized this flag notifies that the sanitization information regarding this result is outdated, meaning the sanitized item is no longer available              \n",
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "enginedefinitions",
                                        "configuration",
                                        "sanitization"
                                    ]
                                },
                                "example": [
                                    "enginedefinitions",
                                    "configuration",
                                    "sanitization"
                                ]
                            },
                            "processing_time": {
                                "description": "Total time elapsed during processing file on the node (in milliseconds).",
                                "type": "integer",
                                "example": 4804
                            },
                            "processing_time_details": {
                                "description": "Starting with MetaDefender Core 4.19.1, processing time on each major workflow processing step is calculated.",
                                "type": "object",
                                "properties": {
                                    "av_scan_time": {
                                        "description": "AV engines' processing time.",
                                        "type": "integer",
                                        "example": 2004
                                    },
                                    "cdr_time": {
                                        "description": "Deep CDR engine's sanitization time.",
                                        "type": "integer",
                                        "example": 800
                                    },
                                    "dlp_time": {
                                        "description": "Proactive DLP engine's processing time.",
                                        "type": "integer",
                                        "example": 500
                                    },
                                    "extraction_time": {
                                        "description": "Archive extraction engine's processing time.",
                                        "type": "integer",
                                        "example": 5000
                                    },
                                    "filetype_time": {
                                        "description": "FileType engine's processing time.",
                                        "type": "integer",
                                        "example": 4
                                    },
                                    "opswatfilescan_time": {
                                        "description": "OPSWAT Filescan engine's processing time.",
                                        "type": "integer",
                                        "example": 10000
                                    },
                                    "others_time": {
                                        "description": "Total time elapsed for following processing tasks in the product (in milliseconds):\n* File processing’s hash calculation time\n* External scanner (if configured)\n* Post action (if configured)\n* Other internal procssing time among components in the product\n",
                                        "type": "integer",
                                        "example": 1000
                                    },
                                    "parse_dgsg_time": {
                                        "description": "Digital signature analyzing time.",
                                        "type": "integer",
                                        "example": 3
                                    },
                                    "vul_time": {
                                        "description": "Vulnerability engine's lookup time.",
                                        "type": "integer",
                                        "example": 300
                                    },
                                    "wait_child_files_time": {
                                        "description": "The waiting time for completely processing all nested files of an archive file.",
                                        "type": "integer",
                                        "example": 13000
                                    },
                                    "yara_time": {
                                        "description": "Yara engine's processing time.",
                                        "type": "integer",
                                        "example": 200
                                    }
                                }
                            },
                            "profile": {
                                "description": "The used rule name.",
                                "type": "string",
                                "example": "File process"
                            },
                            "progress_percentage": {
                                "description": "Percentage of processing completed (from 1-100).",
                                "type": "integer",
                                "example": 100
                            },
                            "queue_time": {
                                "description": "Total time elapsed for file processing task was waiting in MetaDefender Core’s queue until being picked up (queue_time = start_time - upload_timestamp) (in milliseconds).",
                                "type": "integer",
                                "example": 321
                            },
                            "result": {
                                "description": "The final result of processing the file (Allowed / Blocked / Processing).",
                                "type": "string",
                                "example": "Blocked"
                            },
                            "user_agent": {
                                "description": "Identifier for the REST Client that calls the API.",
                                "type": "string",
                                "example": "webscan"
                            },
                            "username": {
                                "description": "User identifier who submitted scan request earlier.",
                                "type": "string",
                                "example": "LOCAL/admin"
                            },
                            "verdicts": {
                                "description": "Aggregated list of potential issues.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "example": [
                                    "Sensitive Data Found"
                                ]
                            },
                            "post_processing": {
                                "description": "Contains information about result of sanitization process and any action done after finalizing the process using Post Actions.",
                                "type": "object",
                                "properties": {
                                    "actions_failed": {
                                        "description": "Empty string if no action failed or list of failed actions, separated by \"|\".",
                                        "type": "string",
                                        "example": "Sanitization Failed | PAscript failed"
                                    },
                                    "actions_ran": {
                                        "description": "List of successful actions, separated by \"|\". Empty string if otherwise.",
                                        "type": "string",
                                        "example": "Sanitized | PAscript"
                                    },
                                    "converted_destination": {
                                        "description": "Contains the name of the sanitized file.",
                                        "type": "string",
                                        "example": "OPSWAT_Proactive_DLP_CCN_sanitized.pdf"
                                    },
                                    "converted_to": {
                                        "description": "Contains target type name of sanitization.",
                                        "type": "string",
                                        "example": ""
                                    },
                                    "copy_move_destination": {
                                        "description": "Contains target type name of sanitization.",
                                        "type": "string",
                                        "example": ""
                                    },
                                    "sanitization_details": {
                                        "description": "Contains target type name of sanitization.",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/DeepCDRDetails"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "scan_results": {
                        "$ref": "#/components/schemas/MetascanReport"
                    },
                    "vulnerability_info": {
                        "$ref": "#/components/schemas/VulnerabilityResponse"
                    },
                    "yara": {
                        "$ref": "#/components/schemas/YaraReport"
                    }
                }
            },
            "BatchId": {
                "type": "object",
                "required": [
                    "batch_id"
                ],
                "properties": {
                    "batch_id": {
                        "type": "string",
                        "description": "The batch identifier used to submit files in the batch and to close the batch."
                    }
                }
            },
            "BatchResponseClosed": {
                "description": "The response for a Batch status request.",
                "type": "object",
                "properties": {
                    "batch_files": {
                        "description": "Information about the files included in this batch.",
                        "type": "object",
                        "properties": {
                            "batch_count": {
                                "description": "How many files/entries in the batch.",
                                "type": "integer",
                                "example": 4
                            },
                            "files_in_batch": {
                                "description": "The list of files in this batch.",
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "data_id": {
                                            "description": "Unique identifer for the file.",
                                            "type": "string",
                                            "example": "24c8b5dadd48445989ac3431544fdc34"
                                        },
                                        "detected_by": {
                                            "description": "Total number of engines that detected this file.",
                                            "type": "integer",
                                            "example": 4
                                        },
                                        "display_name": {
                                            "description": "The filename reported via `filename` header.",
                                            "type": "string",
                                            "example": "eicar.com"
                                        },
                                        "file_size": {
                                            "description": "Total file size in bytes.",
                                            "type": "integer",
                                            "example": 68
                                        },
                                        "file_type": {
                                            "description": "The filetype using mimetype.",
                                            "type": "string",
                                            "example": "application/octet-stream"
                                        },
                                        "file_type_description": {
                                            "description": "The filetype in human readable format.",
                                            "type": "string",
                                            "example": "EICAR virus test files"
                                        },
                                        "process_info": {
                                            "description": "The analysis summary",
                                            "type": "object",
                                            "properties": {
                                                "blocked_reason": {
                                                    "description": "Provides the reason why the file is blocked (if so).",
                                                    "type": "string",
                                                    "example": "Infected"
                                                },
                                                "progress_percentage": {
                                                    "description": "Percentage of processing completed (from 1-100).",
                                                    "type": "integer",
                                                    "example": 100
                                                },
                                                "result": {
                                                    "description": "The final result of processing the file (Allowed / Blocked / Processing).",
                                                    "type": "string",
                                                    "example": "Blocked"
                                                },
                                                "verdicts": {
                                                    "description": "Aggregated list of potential issues.",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "example": [
                                                        "Infected"
                                                    ]
                                                }
                                            }
                                        },
                                        "progress_percentage": {
                                            "description": "Track analysis progress until reaches 100.",
                                            "type": "integer",
                                            "example": 100
                                        },
                                        "scan_all_result_a": {
                                            "description": "The overall scan result as string",
                                            "allOf": [
                                                {
                                                    "$ref": "#/components/schemas/ProcessingResultsStringEnum"
                                                }
                                            ],
                                            "example": "Infected"
                                        },
                                        "scan_all_result_i": {
                                            "description": "The overall scan result as index in the Processing Results table.",
                                            "allOf": [
                                                {
                                                    "$ref": "#/components/schemas/ProcessingResultsIndexEnum"
                                                }
                                            ],
                                            "example": 1
                                        },
                                        "scanned_with": {
                                            "description": "The total number of engines used to analyze this file.",
                                            "type": "integer",
                                            "example": 4
                                        }
                                    }
                                }
                            },
                            "first_index": {
                                "description": "The starting index in the batch. Used for pagination.",
                                "type": "integer",
                                "example": 0
                            },
                            "page_size": {
                                "description": "The number of entries per page.",
                                "type": "integer",
                                "example": 50
                            }
                        }
                    },
                    "batch_id": {
                        "description": "The batch unique identifer",
                        "type": "string",
                        "example": "b7cc760038324b02908a5c111cb1563d"
                    },
                    "is_closed": {
                        "description": "The batch status (open/close).",
                        "type": "boolean",
                        "example": true
                    },
                    "process_info": {
                        "description": "Overall batch process result",
                        "type": "object",
                        "properties": {
                            "blocked_reason": {
                                "description": "Provides the reason why the file is blocked (if so).",
                                "type": "string",
                                "example": "Infected"
                            },
                            "file_type_skipped_scan": {
                                "description": "Indicates if the input file's detected type was configured to skip scanning.",
                                "type": "boolean",
                                "example": false
                            },
                            "profile": {
                                "description": "The used rule name.",
                                "type": "string",
                                "example": "File process"
                            },
                            "result": {
                                "description": "The final result of processing the file (Allowed / Blocked / Processing).",
                                "type": "string",
                                "example": "Blocked"
                            },
                            "user_agent": {
                                "description": "Identifier for the REST Client that calls the API.",
                                "type": "string",
                                "example": "mdicapserver"
                            },
                            "username": {
                                "description": "User identifier who submitted scan request earlier.",
                                "type": "string",
                                "example": "LOCAL/admin"
                            }
                        }
                    },
                    "scan_results": {
                        "description": "Metascan analysis result.",
                        "type": "object",
                        "properties": {
                            "batch_id": {
                                "description": "The batch unique identifer",
                                "type": "string",
                                "example": "b7cc760038324b02908a5c111cb1563d"
                            },
                            "scan_all_result_a": {
                                "description": "The overall scan result as string",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ProcessingResultsStringEnum"
                                    }
                                ],
                                "example": "Infected"
                            },
                            "scan_all_result_i": {
                                "description": "The overall scan result as index in the Processing Results table.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ProcessingResultsIndexEnum"
                                    }
                                ],
                                "example": 1
                            },
                            "start_time": {
                                "description": "Timestamp when the scanning process starts.",
                                "type": "string",
                                "example": "2020-03-12T08:37:05.427Z"
                            },
                            "total_avs": {
                                "description": "Total number of scanning engines used as part of this analysis. Not like files, batch is not processed by engine, so this value is always 0.",
                                "type": "integer",
                                "example": 0
                            },
                            "total_time": {
                                "description": "Total time elapsed during scan (in milliseconds).",
                                "type": "integer",
                                "example": 18403
                            }
                        }
                    },
                    "user_data": {
                        "description": "Metadata submitted at batch creation.",
                        "type": "string",
                        "example": "http://localhost:8008/"
                    }
                }
            },
            "BatchResponseInProgress": {
                "description": "The response for a Batch status request.",
                "type": "object",
                "properties": {
                    "batch_files": {
                        "description": "Information about the files included in this batch.",
                        "type": "object",
                        "properties": {
                            "batch_count": {
                                "description": "How many files/entries in the batch.",
                                "type": "integer",
                                "example": 4
                            },
                            "files_in_batch": {
                                "description": "The list of files in this batch.",
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "data_id": {
                                            "description": "Unique identifer for the file.",
                                            "type": "string",
                                            "example": "24c8b5dadd48445989ac3431544fdc34"
                                        },
                                        "detected_by": {
                                            "description": "Total number of engines that detected this file.",
                                            "type": "integer",
                                            "example": 4
                                        },
                                        "display_name": {
                                            "description": "The filename reported via `filename` header.",
                                            "type": "string",
                                            "example": "eicar.com"
                                        },
                                        "file_size": {
                                            "description": "Total file size in bytes.",
                                            "type": "integer",
                                            "example": 68
                                        },
                                        "file_type": {
                                            "description": "The filetype using mimetype.",
                                            "type": "string",
                                            "example": "application/octet-stream"
                                        },
                                        "file_type_description": {
                                            "description": "The filetype in human readable format.",
                                            "type": "string",
                                            "example": "EICAR virus test files"
                                        },
                                        "process_info": {
                                            "description": "The analysis summary",
                                            "type": "object",
                                            "properties": {
                                                "blocked_reason": {
                                                    "description": "Provides the reason why the file is blocked (if so).",
                                                    "type": "string",
                                                    "example": "Infected"
                                                },
                                                "progress_percentage": {
                                                    "description": "Percentage of processing completed (from 1-100).",
                                                    "type": "integer",
                                                    "example": 100
                                                },
                                                "result": {
                                                    "description": "The final result of processing the file (Allowed / Blocked / Processing).",
                                                    "type": "string",
                                                    "example": "Blocked"
                                                },
                                                "verdicts": {
                                                    "description": "Aggregated list of potential issues.",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "example": [
                                                        "Infected"
                                                    ]
                                                }
                                            }
                                        },
                                        "progress_percentage": {
                                            "description": "Track analysis progress until reaches 100.",
                                            "type": "integer",
                                            "example": 100
                                        },
                                        "scan_all_result_a": {
                                            "description": "The overall scan result as string",
                                            "allOf": [
                                                {
                                                    "$ref": "#/components/schemas/ProcessingResultsStringEnum"
                                                }
                                            ],
                                            "example": "Infected"
                                        },
                                        "scan_all_result_i": {
                                            "description": "The overall scan result as index in the Processing Results table.",
                                            "allOf": [
                                                {
                                                    "$ref": "#/components/schemas/ProcessingResultsIndexEnum"
                                                }
                                            ],
                                            "example": 1
                                        },
                                        "scanned_with": {
                                            "description": "The total number of engines used to analyze this file.",
                                            "type": "integer",
                                            "example": 4
                                        }
                                    }
                                }
                            },
                            "first_index": {
                                "description": "The starting index in the batch. Used for pagination.",
                                "type": "integer",
                                "example": 0
                            },
                            "page_size": {
                                "description": "The number of entries per page.",
                                "type": "integer",
                                "example": 50
                            }
                        }
                    },
                    "batch_id": {
                        "description": "The batch unique identifer",
                        "type": "string",
                        "example": "b7cc760038324b02908a5c111cb1563d"
                    },
                    "is_closed": {
                        "description": "The batch status (open/close).",
                        "type": "boolean",
                        "example": false
                    },
                    "process_info": {
                        "description": "Overall batch process result",
                        "type": "object",
                        "properties": {
                            "blocked_reason": {
                                "description": "Provides the reason why the file is blocked (if so).",
                                "type": "string",
                                "example": "Infected"
                            },
                            "file_type_skipped_scan": {
                                "description": "Indicates if the input file's detected type was configured to skip scanning.",
                                "type": "boolean",
                                "example": false
                            },
                            "profile": {
                                "description": "The used rule name.",
                                "type": "string",
                                "example": "File process"
                            },
                            "result": {
                                "description": "The final result of processing the file (Allowed / Blocked / Processing).",
                                "type": "string",
                                "example": "Processing"
                            },
                            "user_agent": {
                                "description": "Identifier for the REST Client that calls the API.",
                                "type": "string",
                                "example": "mdicapserver"
                            },
                            "username": {
                                "description": "User identifier who submitted scan request earlier.",
                                "type": "string",
                                "example": "LOCAL/admin"
                            }
                        }
                    },
                    "scan_results": {
                        "description": "Metascan analysis result.",
                        "type": "object",
                        "properties": {
                            "batch_id": {
                                "description": "The batch unique identifer",
                                "type": "string",
                                "example": "b7cc760038324b02908a5c111cb1563d"
                            },
                            "scan_all_result_a": {
                                "description": "The overall scan result as string",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ProcessingResultsStringEnum"
                                    }
                                ],
                                "example": "In Progress"
                            },
                            "scan_all_result_i": {
                                "description": "The overall scan result as index in the Processing Results table.",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ProcessingResultsIndexEnum"
                                    }
                                ],
                                "example": 255
                            },
                            "start_time": {
                                "description": "Timestamp when the scanning process starts.",
                                "type": "string",
                                "example": "2020-03-12T08:37:05.427Z"
                            },
                            "total_avs": {
                                "description": "Total number of scanning engines used as part of this analysis. Not like files, batch is not processed by engine, so this value is always 0.",
                                "type": "integer",
                                "example": 0
                            },
                            "total_time": {
                                "description": "Total time elapsed during scan (in milliseconds).",
                                "type": "integer",
                                "example": -1
                            }
                        }
                    },
                    "user_data": {
                        "description": "Metadata submitted at batch creation.",
                        "type": "string",
                        "example": "http://localhost:8008/"
                    }
                }
            },
            "readyz": {
                "type": "object",
                "properties": {
                    "database": {
                        "description": "Database connection",
                        "type": "object",
                        "properties": {
                            "status": {
                                "description": "Connection status",
                                "type": "boolean",
                                "example": true
                            }
                        }
                    },
                    "license": {
                        "description": "License status",
                        "type": "object",
                        "properties": {
                            "status": {
                                "description": "License status",
                                "type": "string",
                                "enum": [
                                    "expired",
                                    "invalid",
                                    "ok"
                                ],
                                "example": "ok"
                            }
                        }
                    },
                    "scan_queue": {
                        "description": "Scan queue status",
                        "type": "object",
                        "properties": {
                            "max_number_in_queue": {
                                "description": "Maximum slots in scan queue",
                                "type": "integer",
                                "example": 1500
                            },
                            "number_in_queue": {
                                "description": "Current queue status",
                                "type": "integer",
                                "example": 80
                            },
                            "threshold": {
                                "description": "User-defined threshold",
                                "type": "integer",
                                "example": 80
                            },
                            "status": {
                                "description": "status",
                                "type": "boolean",
                                "example": true
                            }
                        }
                    },
                    "number_active_av_engines": {
                        "description": "Number of active AV engines",
                        "type": "object",
                        "properties": {
                            "threshold": {
                                "description": "User-defined threshold",
                                "type": "integer",
                                "example": 4
                            },
                            "status": {
                                "description": "Status",
                                "type": "boolean",
                                "example": true
                            }
                        }
                    },
                    "engines": {
                        "description": "All available engines according to the activated license",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "engine_id": {
                                    "description": "Engine ID",
                                    "type": "string",
                                    "example": "avira"
                                },
                                "required": {
                                    "description": "This engine is mandatorily active",
                                    "type": "boolean",
                                    "example": true
                                },
                                "status": {
                                    "description": "Status",
                                    "type": "boolean",
                                    "example": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "links": {
            "GetAPIKey": {
                "operationId": "getAPIkey",
                "parameters": {
                    "apikey": "$response.body#/session_id"
                },
                "description": "Generated `session_id` from login call can be used as an `apikey` for API calls that require authentication.  This can also be used for file submission, if identifying who is submitting the file is enforced in the workflow(s).'\n"
            },
            "GetBatchId": {
                "operationId": "getBatchId",
                "parameters": {
                    "apikey": "$response.body#/batch_id"
                },
                "description": "The batch identifier used to submit files in the batch and to close the batch.\n"
            }
        },
        "responses": {
            "Error500": {
                "description": "Unexpected event on server",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "err": {
                                    "type": "string",
                                    "description": "Error reason"
                                }
                            }
                        },
                        "example": {
                            "err": "<error message>"
                        }
                    }
                }
            },
            "Success200": {
                "description": "Request processed successfully",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "success": {
                                    "type": "boolean",
                                    "example": true
                                }
                            }
                        }
                    }
                }
            },
            "Error400": {
                "description": "Bad Request (e.g. invalid header, apikey is missing or invalid).",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "err": {
                                    "type": "string",
                                    "description": "Error reason"
                                }
                            }
                        },
                        "example": {
                            "err": "Access denied"
                        }
                    }
                }
            },
            "Error403": {
                "description": "Invalid user information or Not Allowed",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "err": {
                                    "type": "string",
                                    "description": "Error reason"
                                }
                            }
                        },
                        "example": {
                            "err": "Access denied"
                        }
                    }
                }
            },
            "LicenseInformationResponse": {
                "description": "Information about the licensed product (product type, number of activations, deploymentId, expiration date and days left)",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/LicenseInformation"
                        }
                    }
                }
            },
            "AdminCleanupResponse": {
                "description": "Request processed successfully",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "cleanuprange": {
                                    "description": "The number of hours of data retention. Anything older than this number will be deleted.",
                                    "type": "integer",
                                    "example": 24
                                }
                            }
                        }
                    }
                }
            },
            "Error405": {
                "description": "The user has no rights for this operation.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "err": {
                                    "type": "string",
                                    "description": "Error reason"
                                }
                            }
                        },
                        "example": {
                            "err": "Access denied"
                        }
                    }
                }
            },
            "SkipListResponse": {
                "description": "A list of all skip/white/black-listed hashes.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/SkipList"
                        }
                    }
                }
            },
            "Error404": {
                "description": "Requests resource was not found.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "err": {
                                    "type": "string",
                                    "description": "Error reason"
                                }
                            }
                        },
                        "example": {
                            "err": "Not found"
                        }
                    }
                }
            },
            "SkipListResponse_AfterDeleted": {
                "description": "A list of all skip/white/black-listed hashes.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/SkipListAfterDeleted"
                        }
                    }
                }
            },
            "ProxyListResponse": {
                "description": "A list of all proxy.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ProxyList"
                        }
                    }
                }
            },
            "Response": {
                "description": "Health check criterias to determine whether MetaDefender Core server status is healthy or not.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/HealthCheck"
                        }
                    }
                }
            },
            "YaraResponse": {
                "description": "A list of Yara Engine sources.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/YaraSourcesObject"
                        }
                    }
                }
            },
            "YaraGenerationResponse": {
                "description": "Request processed successfully.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "Current status of generating the package.",
                                    "type": "string",
                                    "enum": [
                                        "idle",
                                        "error",
                                        "inprogress"
                                    ],
                                    "example": "idle"
                                },
                                "start_time": {
                                    "description": "Used only when status is inprogress, otherwise its empty",
                                    "type": "string",
                                    "example": ""
                                },
                                "issues": {
                                    "description": "Stores a map of issues. Each key represents the according source, except \"general\", which contains general errors occurred during the generation process",
                                    "type": "object",
                                    "properties": {
                                        "general": {
                                            "description": "Contains general errors occurred during the generation process",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "severity": {
                                                        "type": "string",
                                                        "example": "warning"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Error while extracting network source. Can not open destination."
                                                    }
                                                }
                                            }
                                        },
                                        "source": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "severity": {
                                                        "type": "string",
                                                        "example": "warning"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "The given local source does not exists."
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "Error404Hash": {
                "description": "Invalid hash format"
            }
        },
        "parameters": {
            "apikey_required": {
                "name": "apikey",
                "description": "Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.\n",
                "in": "header",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "apikey_optional": {
                "name": "apikey",
                "description": "Generated `session_id` from [Login](/mdcore/metadefender-core/ref#userlogin) call can be used as an `apikey` for API calls that require authentication.\n",
                "in": "header",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "useragent": {
                "name": "user_agent",
                "description": "user_agent header used to identify (and limit) access to a particular rule. For rule selection, `rule` header should be used.\nSince MetaDefender Core 5.6.0, when user agent is matched the predefined setting in workflow rule,  the product will return X-Core-Id containing identity of MetaDefender Core server as a header of response.\n",
                "schema": {
                    "type": "string"
                },
                "in": "header",
                "required": false
            },
            "rule": {
                "name": "rule",
                "description": "Select rule for the analysis, if no header given the default rule will be selected (URL encoded UTF-8 string of rule name)\n",
                "in": "header",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "userdata": {
                "name": "user-data",
                "description": "Name of the batch (max 1024 bytes, URL encoded UTF-8 string).\n",
                "in": "header",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "batchId": {
                "name": "batchId",
                "description": "The batch identifier used to submit files in the batch and to close the batch.",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "string"
                }
            }
        },
        "requestBodies": {
            "licenseFile": {
                "content": {
                    "application/octet-stream": {
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "adminCleanup": {
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "cleanuprange": {
                                    "description": "The number of hours of data retention. Anything older than this number will be deleted.",
                                    "type": "integer",
                                    "example": 24
                                }
                            }
                        }
                    }
                }
            },
            "skipListRequestBody": {
                "description": "A list of all skip/white/black-listed hashes.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/SkipList"
                        }
                    }
                }
            },
            "skipListBody_Post": {
                "description": "A list of new hashes to be added to \"skip-by-hash\".",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/SkipList"
                        }
                    }
                }
            },
            "skipListBody_Delete": {
                "description": "A list of to-be-deleted hashes.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "example": [
                                "edecbf6bd03ef340e0c6cd438a4069c2",
                                "13d8b8329bd2f668e6a889f32feaa48c832dbf0c"
                            ]
                        }
                    }
                }
            },
            "proxyListRequestBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ProxyListRequestBody"
                        }
                    }
                }
            },
            "RequestBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PostRequestBody"
                        }
                    }
                }
            },
            "yaraRequestBody": {
                "description": "A list of Yara Engine sources.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/YaraSourcesObject"
                        }
                    }
                }
            },
            "uploadFile": {
                "content": {
                    "application/octet-stream": {
                        "schema": {
                            "type": "string",
                            "format": "binary",
                            "example": "<Payload in raw bytes>"
                        }
                    }
                }
            }
        }
    }
}